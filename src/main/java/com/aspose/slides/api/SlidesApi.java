/*
 * --------------------------------------------------------------------------------------------------------------------
 * <copyright company="Aspose">
 *   Copyright (c) 2018 Aspose.Slides for Cloud
 * </copyright>
 * <summary>
 *   Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 * 
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 * 
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 * </summary>
 * --------------------------------------------------------------------------------------------------------------------
 */

package com.aspose.slides.api;

import com.aspose.slides.ApiCallback;
import com.aspose.slides.ApiClient;
import com.aspose.slides.ApiException;
import com.aspose.slides.ApiResponse;
import com.aspose.slides.Configuration;
import com.aspose.slides.FileInfo;
import com.aspose.slides.Pair;
import com.aspose.slides.ProgressRequestBody;
import com.aspose.slides.ProgressResponseBody;
import com.aspose.slides.auth.NeedRepeatRequestException;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.aspose.slides.model.ApiInfo;
import com.aspose.slides.model.Axis;
import com.aspose.slides.model.Chart;
import com.aspose.slides.model.ChartCategory;
import com.aspose.slides.model.ChartSeriesGroup;
import com.aspose.slides.model.ChartWall;
import com.aspose.slides.model.ColorScheme;
import com.aspose.slides.model.CommentAuthors;
import com.aspose.slides.model.DataPoint;
import com.aspose.slides.model.DiscUsage;
import com.aspose.slides.model.Document;
import com.aspose.slides.model.DocumentProperties;
import com.aspose.slides.model.DocumentProperty;
import com.aspose.slides.model.DocumentReplaceResult;
import com.aspose.slides.model.Effect;
import com.aspose.slides.model.EntityExists;
import com.aspose.slides.model.ExportOptions;
import java.io.File;
import com.aspose.slides.model.FileVersions;
import com.aspose.slides.model.FilesList;
import com.aspose.slides.model.FilesUploadResult;
import com.aspose.slides.model.FontScheme;
import com.aspose.slides.model.FontsData;
import com.aspose.slides.model.FormatScheme;
import com.aspose.slides.model.GeometryPaths;
import com.aspose.slides.model.HeaderFooter;
import com.aspose.slides.model.IShapeExportOptions;
import com.aspose.slides.model.Images;
import com.aspose.slides.model.InteractiveSequence;
import com.aspose.slides.model.LayoutSlide;
import com.aspose.slides.model.LayoutSlides;
import com.aspose.slides.model.Legend;
import com.aspose.slides.model.MasterSlide;
import com.aspose.slides.model.MasterSlides;
import com.aspose.slides.model.NotesSlide;
import com.aspose.slides.model.NotesSlideHeaderFooter;
import com.aspose.slides.model.ObjectExist;
import com.aspose.slides.model.OrderedMergeRequest;
import com.aspose.slides.model.Paragraph;
import com.aspose.slides.model.Paragraphs;
import com.aspose.slides.model.PdfImportOptions;
import com.aspose.slides.model.PictureFrame;
import com.aspose.slides.model.Pipeline;
import com.aspose.slides.model.Placeholder;
import com.aspose.slides.model.Placeholders;
import com.aspose.slides.model.Portion;
import com.aspose.slides.model.PortionFormat;
import com.aspose.slides.model.Portions;
import com.aspose.slides.model.PresentationsMergeRequest;
import com.aspose.slides.model.ProtectionProperties;
import com.aspose.slides.model.Sections;
import com.aspose.slides.model.Series;
import com.aspose.slides.model.Shape;
import com.aspose.slides.model.ShapeBase;
import com.aspose.slides.model.Shapes;
import com.aspose.slides.model.Slide;
import com.aspose.slides.model.SlideAnimation;
import com.aspose.slides.model.SlideBackground;
import com.aspose.slides.model.SlideCommentBase;
import com.aspose.slides.model.SlideComments;
import com.aspose.slides.model.SlideProperties;
import com.aspose.slides.model.SlideReplaceResult;
import com.aspose.slides.model.SlideShowProperties;
import com.aspose.slides.model.Slides;
import com.aspose.slides.model.SmartArt;
import com.aspose.slides.model.SplitDocumentResult;
import com.aspose.slides.model.StorageExist;
import com.aspose.slides.model.Table;
import com.aspose.slides.model.TableCell;
import com.aspose.slides.model.TableCellMergeOptions;
import com.aspose.slides.model.TableRow;
import com.aspose.slides.model.TextBounds;
import com.aspose.slides.model.TextItems;
import com.aspose.slides.model.Theme;
import com.aspose.slides.model.VbaModule;
import com.aspose.slides.model.VbaProject;
import com.aspose.slides.model.ViewProperties;
import com.aspose.slides.model.*;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class SlidesApi {
    public SlidesApi(Configuration configuration) {
        apiClient = new ApiClient(configuration);
    }

    public SlidesApi(String appSid, String appKey) {
        this(new Configuration(appSid, appKey));
    }

    /**
     * Build call for alignShapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call alignShapesCall(String name, Integer slideIndex, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling alignShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling alignShapes(Async)");
        }
        // verify the required parameter 'alignmentType' is set
        if (alignmentType == null) {
            throw new ApiException("Missing the required parameter 'alignmentType' when calling alignShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/align/{alignmentType}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "alignmentType" + "\\}", apiClient.objectToString(alignmentType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "alignToSlide", alignToSlide);
        apiClient.addQueryParameter(queryParams, "shapes", shapes);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes alignShapes(String name, Integer slideIndex, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Shapes> resp = alignShapesWithHttpInfo(name, slideIndex, alignmentType, alignToSlide, shapes, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = alignShapesWithHttpInfo(name, slideIndex, alignmentType, alignToSlide, shapes, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> alignShapesWithHttpInfo(String name, Integer slideIndex, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = alignShapesCall(name, slideIndex, alignmentType, alignToSlide, shapes, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Changes the placement of selected shapes on the slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call alignShapesAsync(String name, Integer slideIndex, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, String subShape, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = alignShapesCall(name, slideIndex, alignmentType, alignToSlide, shapes, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for alignSpecialSlideShapes
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call alignSpecialSlideShapesCall(String name, Integer slideIndex, SpecialSlideType slideType, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling alignSpecialSlideShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling alignSpecialSlideShapes(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling alignSpecialSlideShapes(Async)");
        }
        // verify the required parameter 'alignmentType' is set
        if (alignmentType == null) {
            throw new ApiException("Missing the required parameter 'alignmentType' when calling alignSpecialSlideShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/align/{alignmentType}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "alignmentType" + "\\}", apiClient.objectToString(alignmentType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "alignToSlide", alignToSlide);
        apiClient.addQueryParameter(queryParams, "shapes", shapes);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes alignSpecialSlideShapes(String name, Integer slideIndex, SpecialSlideType slideType, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Shapes> resp = alignSpecialSlideShapesWithHttpInfo(name, slideIndex, slideType, alignmentType, alignToSlide, shapes, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = alignSpecialSlideShapesWithHttpInfo(name, slideIndex, slideType, alignmentType, alignToSlide, shapes, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> alignSpecialSlideShapesWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = alignSpecialSlideShapesCall(name, slideIndex, slideType, alignmentType, alignToSlide, shapes, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Changes the placement of selected shapes on the master slide. Aligns shapes to the margins or the edge of the slide or aligns them relative to each other. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param alignmentType Alignment type that will be applied to the shapes. (required)
     * @param alignToSlide If true, shapes will be aligned relative to the slide edges. 
     * @param shapes Shapes indexes. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call alignSpecialSlideShapesAsync(String name, Integer slideIndex, SpecialSlideType slideType, ShapesAlignmentType alignmentType, Boolean alignToSlide, List<Integer> shapes, String password, String folder, String storage, String subShape, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = alignSpecialSlideShapesCall(name, slideIndex, slideType, alignmentType, alignToSlide, shapes, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for compressEmbeddedFonts
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call compressEmbeddedFontsCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling compressEmbeddedFonts(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/fonts/embedded/compress"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Compresses embedded fonts by removing unused characters.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void compressEmbeddedFonts(String name, String password, String folder, String storage) throws ApiException {
        try {
            compressEmbeddedFontsWithHttpInfo(name, password, folder, storage);
        } catch (NeedRepeatRequestException e) {
            compressEmbeddedFontsWithHttpInfo(name, password, folder, storage);
        }
    }

    /**
     * Compresses embedded fonts by removing unused characters.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> compressEmbeddedFontsWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = compressEmbeddedFontsCall(name, password, folder, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Compresses embedded fonts by removing unused characters. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call compressEmbeddedFontsAsync(String name, String password, String folder, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = compressEmbeddedFontsCall(name, password, folder, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for compressEmbeddedFontsOnline
     * @param document Document data. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call compressEmbeddedFontsOnlineCall(byte[] document, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling compressEmbeddedFontsOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/fonts/embedded/compress"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Compresses embedded fonts by removing unused characters.
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File compressEmbeddedFontsOnline(byte[] document, String password) throws ApiException {
        try {
            ApiResponse<File> resp = compressEmbeddedFontsOnlineWithHttpInfo(document, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = compressEmbeddedFontsOnlineWithHttpInfo(document, password);
            return resp.getData();
        }
    }

    /**
     * Compresses embedded fonts by removing unused characters.
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> compressEmbeddedFontsOnlineWithHttpInfo(byte[] document, String password) throws ApiException {
        com.squareup.okhttp.Call call = compressEmbeddedFontsOnlineCall(document, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Compresses embedded fonts by removing unused characters. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call compressEmbeddedFontsOnlineAsync(byte[] document, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = compressEmbeddedFontsOnlineCall(document, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for convert
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default. 
     * @param options Export options. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertCall(byte[] document, ExportFormat format, String password, String storage, String fontsFolder, List<Integer> slides, ExportOptions options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling convert(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling convert(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/convert/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);
        apiClient.addQueryParameter(queryParams, "slides", slides);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default. 
     * @param options Export options. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File convert(byte[] document, ExportFormat format, String password, String storage, String fontsFolder, List<Integer> slides, ExportOptions options) throws ApiException {
        try {
            ApiResponse<File> resp = convertWithHttpInfo(document, format, password, storage, fontsFolder, slides, options);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = convertWithHttpInfo(document, format, password, storage, fontsFolder, slides, options);
            return resp.getData();
        }
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default. 
     * @param options Export options. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> convertWithHttpInfo(byte[] document, ExportFormat format, String password, String storage, String fontsFolder, List<Integer> slides, ExportOptions options) throws ApiException {
        com.squareup.okhttp.Call call = convertCall(document, format, password, storage, fontsFolder, slides, options, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Convert presentation from request content to format specified. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default. 
     * @param options Export options. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertAsync(byte[] document, ExportFormat format, String password, String storage, String fontsFolder, List<Integer> slides, ExportOptions options, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertCall(document, format, password, storage, fontsFolder, slides, options, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for convertAndSave
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default. 
     * @param options Export options. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call convertAndSaveCall(byte[] document, ExportFormat format, String outPath, String password, String storage, String fontsFolder, List<Integer> slides, ExportOptions options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling convertAndSave(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling convertAndSave(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling convertAndSave(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/convert/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);
        apiClient.addQueryParameter(queryParams, "slides", slides);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default. 
     * @param options Export options. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void convertAndSave(byte[] document, ExportFormat format, String outPath, String password, String storage, String fontsFolder, List<Integer> slides, ExportOptions options) throws ApiException {
        try {
            convertAndSaveWithHttpInfo(document, format, outPath, password, storage, fontsFolder, slides, options);
        } catch (NeedRepeatRequestException e) {
            convertAndSaveWithHttpInfo(document, format, outPath, password, storage, fontsFolder, slides, options);
        }
    }

    /**
     * Convert presentation from request content to format specified.
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default. 
     * @param options Export options. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> convertAndSaveWithHttpInfo(byte[] document, ExportFormat format, String outPath, String password, String storage, String fontsFolder, List<Integer> slides, ExportOptions options) throws ApiException {
        com.squareup.okhttp.Call call = convertAndSaveCall(document, format, outPath, password, storage, fontsFolder, slides, options, null, null);
        return apiClient.execute(call);
    }

    /**
     * Convert presentation from request content to format specified. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format Export format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be converted. If not specified, all slides are converted by default. 
     * @param options Export options. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call convertAndSaveAsync(byte[] document, ExportFormat format, String outPath, String password, String storage, String fontsFolder, List<Integer> slides, ExportOptions options, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = convertAndSaveCall(document, format, outPath, password, storage, fontsFolder, slides, options, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for copyFile
     * @param srcPath Source file path e.g. '/folder/file.ext' (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to copy 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFileCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling copyFile(Async)");
        }
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling copyFile(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/copy/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.objectToString(srcPath));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destPath", destPath);
        apiClient.addQueryParameter(queryParams, "srcStorageName", srcStorageName);
        apiClient.addQueryParameter(queryParams, "destStorageName", destStorageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy file
     * 
     * @param srcPath Source file path e.g. '/folder/file.ext' (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to copy 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void copyFile(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        try {
            copyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        } catch (NeedRepeatRequestException e) {
            copyFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        }
    }

    /**
     * Copy file
     * 
     * @param srcPath Source file path e.g. '/folder/file.ext' (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to copy 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> copyFileWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = copyFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy file (asynchronously)
     * 
     * @param srcPath Source file path e.g. '/folder/file.ext' (required)
     * @param destPath Destination file path (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to copy 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyFileAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for copyFolder
     * @param srcPath Source folder path e.g. '/src' (required)
     * @param destPath Destination folder path e.g. '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyFolderCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling copyFolder(Async)");
        }
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling copyFolder(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/copy/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.objectToString(srcPath));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destPath", destPath);
        apiClient.addQueryParameter(queryParams, "srcStorageName", srcStorageName);
        apiClient.addQueryParameter(queryParams, "destStorageName", destStorageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy folder
     * 
     * @param srcPath Source folder path e.g. '/src' (required)
     * @param destPath Destination folder path e.g. '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void copyFolder(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        try {
            copyFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        } catch (NeedRepeatRequestException e) {
            copyFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        }
    }

    /**
     * Copy folder
     * 
     * @param srcPath Source folder path e.g. '/src' (required)
     * @param destPath Destination folder path e.g. '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> copyFolderWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        com.squareup.okhttp.Call call = copyFolderCall(srcPath, destPath, srcStorageName, destStorageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Copy folder (asynchronously)
     * 
     * @param srcPath Source folder path e.g. '/src' (required)
     * @param destPath Destination folder path e.g. '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyFolderAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyFolderCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for copyLayoutSlide
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param cloneFromPosition Position of cloned layout slide. (required)
     * @param cloneFromPassword Password for the document to clone layoutSlide from. 
     * @param cloneFromStorage Storage of the document to clone layoutSlide from. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyLayoutSlideCall(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling copyLayoutSlide(Async)");
        }
        // verify the required parameter 'cloneFrom' is set
        if (cloneFrom == null) {
            throw new ApiException("Missing the required parameter 'cloneFrom' when calling copyLayoutSlide(Async)");
        }
        // verify the required parameter 'cloneFromPosition' is set
        if (cloneFromPosition == null) {
            throw new ApiException("Missing the required parameter 'cloneFromPosition' when calling copyLayoutSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/layoutSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "cloneFrom", cloneFrom);
        apiClient.addQueryParameter(queryParams, "cloneFromPosition", cloneFromPosition);
        apiClient.addQueryParameter(queryParams, "cloneFromStorage", cloneFromStorage);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (cloneFromPassword != null)
        headerParams.put("cloneFromPassword", apiClient.parameterToString(cloneFromPassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy layoutSlide from source presentation.
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param cloneFromPosition Position of cloned layout slide. (required)
     * @param cloneFromPassword Password for the document to clone layoutSlide from. 
     * @param cloneFromStorage Storage of the document to clone layoutSlide from. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return LayoutSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutSlide copyLayoutSlide(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<LayoutSlide> resp = copyLayoutSlideWithHttpInfo(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<LayoutSlide> resp = copyLayoutSlideWithHttpInfo(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Copy layoutSlide from source presentation.
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param cloneFromPosition Position of cloned layout slide. (required)
     * @param cloneFromPassword Password for the document to clone layoutSlide from. 
     * @param cloneFromStorage Storage of the document to clone layoutSlide from. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;LayoutSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutSlide> copyLayoutSlideWithHttpInfo(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = copyLayoutSlideCall(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, password, folder, storage, null, null);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Copy layoutSlide from source presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone layoutSlide from. (required)
     * @param cloneFromPosition Position of cloned layout slide. (required)
     * @param cloneFromPassword Password for the document to clone layoutSlide from. 
     * @param cloneFromStorage Storage of the document to clone layoutSlide from. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyLayoutSlideAsync(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, String password, String folder, String storage, final ApiCallback<LayoutSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyLayoutSlideCall(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for copyMasterSlide
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone masterSlide from. (required)
     * @param cloneFromPosition Position of cloned master slide. (required)
     * @param cloneFromPassword Password for the document to clone masterSlide from. 
     * @param cloneFromStorage Storage of the document to clone masterSlide from. 
     * @param applyToAll True to apply cloned master slide to every existing slide. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copyMasterSlideCall(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, Boolean applyToAll, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling copyMasterSlide(Async)");
        }
        // verify the required parameter 'cloneFrom' is set
        if (cloneFrom == null) {
            throw new ApiException("Missing the required parameter 'cloneFrom' when calling copyMasterSlide(Async)");
        }
        // verify the required parameter 'cloneFromPosition' is set
        if (cloneFromPosition == null) {
            throw new ApiException("Missing the required parameter 'cloneFromPosition' when calling copyMasterSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/masterSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "cloneFrom", cloneFrom);
        apiClient.addQueryParameter(queryParams, "cloneFromPosition", cloneFromPosition);
        apiClient.addQueryParameter(queryParams, "cloneFromStorage", cloneFromStorage);
        apiClient.addQueryParameter(queryParams, "applyToAll", applyToAll);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (cloneFromPassword != null)
        headerParams.put("cloneFromPassword", apiClient.parameterToString(cloneFromPassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy masterSlide from source presentation.
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone masterSlide from. (required)
     * @param cloneFromPosition Position of cloned master slide. (required)
     * @param cloneFromPassword Password for the document to clone masterSlide from. 
     * @param cloneFromStorage Storage of the document to clone masterSlide from. 
     * @param applyToAll True to apply cloned master slide to every existing slide. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return MasterSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MasterSlide copyMasterSlide(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, Boolean applyToAll, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<MasterSlide> resp = copyMasterSlideWithHttpInfo(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, applyToAll, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<MasterSlide> resp = copyMasterSlideWithHttpInfo(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, applyToAll, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Copy masterSlide from source presentation.
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone masterSlide from. (required)
     * @param cloneFromPosition Position of cloned master slide. (required)
     * @param cloneFromPassword Password for the document to clone masterSlide from. 
     * @param cloneFromStorage Storage of the document to clone masterSlide from. 
     * @param applyToAll True to apply cloned master slide to every existing slide. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;MasterSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MasterSlide> copyMasterSlideWithHttpInfo(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, Boolean applyToAll, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = copyMasterSlideCall(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, applyToAll, password, folder, storage, null, null);
        Type returnType = new TypeToken<MasterSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Copy masterSlide from source presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param cloneFrom Name of the document to clone masterSlide from. (required)
     * @param cloneFromPosition Position of cloned master slide. (required)
     * @param cloneFromPassword Password for the document to clone masterSlide from. 
     * @param cloneFromStorage Storage of the document to clone masterSlide from. 
     * @param applyToAll True to apply cloned master slide to every existing slide. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copyMasterSlideAsync(String name, String cloneFrom, Integer cloneFromPosition, String cloneFromPassword, String cloneFromStorage, Boolean applyToAll, String password, String folder, String storage, final ApiCallback<MasterSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copyMasterSlideCall(name, cloneFrom, cloneFromPosition, cloneFromPassword, cloneFromStorage, applyToAll, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<MasterSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for copySlide
     * @param name Document name. (required)
     * @param slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param position The target position at which to copy the slide. Copy to the end by default. 
     * @param source Name of the document to copy a slide from. 
     * @param sourcePassword Password for the document to copy a slide from. 
     * @param sourceStorage Template storage name. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call copySlideCall(String name, Integer slideToCopy, Integer position, String source, String sourcePassword, String sourceStorage, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling copySlide(Async)");
        }
        // verify the required parameter 'slideToCopy' is set
        if (slideToCopy == null) {
            throw new ApiException("Missing the required parameter 'slideToCopy' when calling copySlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/copy"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "slideToCopy", slideToCopy);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "source", source);
        apiClient.addQueryParameter(queryParams, "sourceStorage", sourceStorage);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (sourcePassword != null)
        headerParams.put("sourcePassword", apiClient.parameterToString(sourcePassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Copy a slide from the current or another presentation.
     * 
     * @param name Document name. (required)
     * @param slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param position The target position at which to copy the slide. Copy to the end by default. 
     * @param source Name of the document to copy a slide from. 
     * @param sourcePassword Password for the document to copy a slide from. 
     * @param sourceStorage Template storage name. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides copySlide(String name, Integer slideToCopy, Integer position, String source, String sourcePassword, String sourceStorage, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = copySlideWithHttpInfo(name, slideToCopy, position, source, sourcePassword, sourceStorage, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = copySlideWithHttpInfo(name, slideToCopy, position, source, sourcePassword, sourceStorage, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Copy a slide from the current or another presentation.
     * 
     * @param name Document name. (required)
     * @param slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param position The target position at which to copy the slide. Copy to the end by default. 
     * @param source Name of the document to copy a slide from. 
     * @param sourcePassword Password for the document to copy a slide from. 
     * @param sourceStorage Template storage name. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> copySlideWithHttpInfo(String name, Integer slideToCopy, Integer position, String source, String sourcePassword, String sourceStorage, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = copySlideCall(name, slideToCopy, position, source, sourcePassword, sourceStorage, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Copy a slide from the current or another presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideToCopy The index of the slide to be copied from the source presentation. (required)
     * @param position The target position at which to copy the slide. Copy to the end by default. 
     * @param source Name of the document to copy a slide from. 
     * @param sourcePassword Password for the document to copy a slide from. 
     * @param sourceStorage Template storage name. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call copySlideAsync(String name, Integer slideToCopy, Integer position, String source, String sourcePassword, String sourceStorage, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = copySlideCall(name, slideToCopy, position, source, sourcePassword, sourceStorage, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createAnimationEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAnimationEffectCall(String name, Integer slideIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createAnimationEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createAnimationEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling createAnimationEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/mainSequence"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add an effect to slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation createAnimationEffect(String name, Integer slideIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = createAnimationEffectWithHttpInfo(name, slideIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = createAnimationEffectWithHttpInfo(name, slideIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add an effect to slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> createAnimationEffectWithHttpInfo(String name, Integer slideIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createAnimationEffectCall(name, slideIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add an effect to slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAnimationEffectAsync(String name, Integer slideIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAnimationEffectCall(name, slideIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createAnimationInteractiveSequence
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAnimationInteractiveSequenceCall(String name, Integer slideIndex, InteractiveSequence sequence, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'sequence' is set
        if (sequence == null) {
            throw new ApiException("Missing the required parameter 'sequence' when calling createAnimationInteractiveSequence(Async)");
        }
        Object postBody = sequence;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation createAnimationInteractiveSequence(String name, Integer slideIndex, InteractiveSequence sequence, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = createAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, sequence, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = createAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, sequence, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> createAnimationInteractiveSequenceWithHttpInfo(String name, Integer slideIndex, InteractiveSequence sequence, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createAnimationInteractiveSequenceCall(name, slideIndex, sequence, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAnimationInteractiveSequenceAsync(String name, Integer slideIndex, InteractiveSequence sequence, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAnimationInteractiveSequenceCall(name, slideIndex, sequence, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createAnimationInteractiveSequenceEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAnimationInteractiveSequenceEffectCall(String name, Integer slideIndex, Integer sequenceIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling createAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling createAnimationInteractiveSequenceEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add an animation effect to a slide interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation createAnimationInteractiveSequenceEffect(String name, Integer slideIndex, Integer sequenceIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = createAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = createAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add an animation effect to a slide interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> createAnimationInteractiveSequenceEffectWithHttpInfo(String name, Integer slideIndex, Integer sequenceIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add an animation effect to a slide interactive sequence. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAnimationInteractiveSequenceEffectAsync(String name, Integer slideIndex, Integer sequenceIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createChartCategory
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChartCategoryCall(String name, Integer slideIndex, Integer shapeIndex, ChartCategory category, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createChartCategory(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createChartCategory(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createChartCategory(Async)");
        }
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling createChartCategory(Async)");
        }
        Object postBody = category;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add a new category to a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart createChartCategory(String name, Integer slideIndex, Integer shapeIndex, ChartCategory category, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = createChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, category, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = createChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, category, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add a new category to a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> createChartCategoryWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ChartCategory category, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createChartCategoryCall(name, slideIndex, shapeIndex, category, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add a new category to a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChartCategoryAsync(String name, Integer slideIndex, Integer shapeIndex, ChartCategory category, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChartCategoryCall(name, slideIndex, shapeIndex, category, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createChartDataPoint
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChartDataPointCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, DataPoint dataPoint, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createChartDataPoint(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createChartDataPoint(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createChartDataPoint(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling createChartDataPoint(Async)");
        }
        // verify the required parameter 'dataPoint' is set
        if (dataPoint == null) {
            throw new ApiException("Missing the required parameter 'dataPoint' when calling createChartDataPoint(Async)");
        }
        Object postBody = dataPoint;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add a new data point to a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart createChartDataPoint(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, DataPoint dataPoint, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = createChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, dataPoint, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = createChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, dataPoint, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add a new data point to a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> createChartDataPointWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, DataPoint dataPoint, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, dataPoint, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add a new data point to a chart series. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChartDataPointAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, DataPoint dataPoint, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, dataPoint, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createChartSeries
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createChartSeriesCall(String name, Integer slideIndex, Integer shapeIndex, Series series, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createChartSeries(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createChartSeries(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createChartSeries(Async)");
        }
        // verify the required parameter 'series' is set
        if (series == null) {
            throw new ApiException("Missing the required parameter 'series' when calling createChartSeries(Async)");
        }
        Object postBody = series;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add a new series to a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart createChartSeries(String name, Integer slideIndex, Integer shapeIndex, Series series, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = createChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, series, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = createChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, series, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add a new series to a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> createChartSeriesWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Series series, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createChartSeriesCall(name, slideIndex, shapeIndex, series, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add a new series to a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createChartSeriesAsync(String name, Integer slideIndex, Integer shapeIndex, Series series, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createChartSeriesCall(name, slideIndex, shapeIndex, series, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createComment
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Comment DTO. (required)
     * @param shapeIndex Shape index. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCommentCall(String name, Integer slideIndex, SlideCommentBase dto, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createComment(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createComment(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createComment(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/comments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeIndex", shapeIndex);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Adds the comment on the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Comment DTO. (required)
     * @param shapeIndex Shape index. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideComments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideComments createComment(String name, Integer slideIndex, SlideCommentBase dto, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideComments> resp = createCommentWithHttpInfo(name, slideIndex, dto, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideComments> resp = createCommentWithHttpInfo(name, slideIndex, dto, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Adds the comment on the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Comment DTO. (required)
     * @param shapeIndex Shape index. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideComments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideComments> createCommentWithHttpInfo(String name, Integer slideIndex, SlideCommentBase dto, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createCommentCall(name, slideIndex, dto, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideComments>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Adds the comment on the slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Comment DTO. (required)
     * @param shapeIndex Shape index. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCommentAsync(String name, Integer slideIndex, SlideCommentBase dto, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<SlideComments> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCommentCall(name, slideIndex, dto, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideComments>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createCommentOnline
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Comment DTO. (required)
     * @param shapeIndex Shape index. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCommentOnlineCall(byte[] document, Integer slideIndex, SlideCommentBase dto, Integer shapeIndex, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling createCommentOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createCommentOnline(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createCommentOnline(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/comments"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeIndex", shapeIndex);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Adds the comment on the slide.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Comment DTO. (required)
     * @param shapeIndex Shape index. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File createCommentOnline(byte[] document, Integer slideIndex, SlideCommentBase dto, Integer shapeIndex, String password) throws ApiException {
        try {
            ApiResponse<File> resp = createCommentOnlineWithHttpInfo(document, slideIndex, dto, shapeIndex, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = createCommentOnlineWithHttpInfo(document, slideIndex, dto, shapeIndex, password);
            return resp.getData();
        }
    }

    /**
     * Adds the comment on the slide.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Comment DTO. (required)
     * @param shapeIndex Shape index. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> createCommentOnlineWithHttpInfo(byte[] document, Integer slideIndex, SlideCommentBase dto, Integer shapeIndex, String password) throws ApiException {
        com.squareup.okhttp.Call call = createCommentOnlineCall(document, slideIndex, dto, shapeIndex, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Adds the comment on the slide. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Comment DTO. (required)
     * @param shapeIndex Shape index. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCommentOnlineAsync(byte[] document, Integer slideIndex, SlideCommentBase dto, Integer shapeIndex, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCommentOnlineCall(document, slideIndex, dto, shapeIndex, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createFolder
     * @param path Folder path to create e.g. 'folder_1/folder_2/' 
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createFolderCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create the folder
     * 
     * @param path Folder path to create e.g. 'folder_1/folder_2/' 
     * @param storageName Storage name 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createFolder(String path, String storageName) throws ApiException {
        try {
            createFolderWithHttpInfo(path, storageName);
        } catch (NeedRepeatRequestException e) {
            createFolderWithHttpInfo(path, storageName);
        }
    }

    /**
     * Create the folder
     * 
     * @param path Folder path to create e.g. 'folder_1/folder_2/' 
     * @param storageName Storage name 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createFolderWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = createFolderCall(path, storageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create the folder (asynchronously)
     * 
     * @param path Folder path to create e.g. 'folder_1/folder_2/' 
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFolderAsync(String path, String storageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFolderCall(path, storageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createImageWatermark
     * @param name Document name. (required)
     * @param image Image data. 
     * @param pictureFrame PictureFrame DTO 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createImageWatermarkCall(String name, byte[] image, PictureFrame pictureFrame, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createImageWatermark(Async)");
        }
        Object postBody = pictureFrame;

        // create path and map variables
        String methodPath = "/slides/{name}/watermark/image"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (image != null)
        formParams.put("image", image);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     * 
     * @param name Document name. (required)
     * @param image Image data. 
     * @param pictureFrame PictureFrame DTO 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createImageWatermark(String name, byte[] image, PictureFrame pictureFrame, String password, String folder, String storage) throws ApiException {
        try {
            createImageWatermarkWithHttpInfo(name, image, pictureFrame, password, folder, storage);
        } catch (NeedRepeatRequestException e) {
            createImageWatermarkWithHttpInfo(name, image, pictureFrame, password, folder, storage);
        }
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     * 
     * @param name Document name. (required)
     * @param image Image data. 
     * @param pictureFrame PictureFrame DTO 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createImageWatermarkWithHttpInfo(String name, byte[] image, PictureFrame pictureFrame, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createImageWatermarkCall(name, image, pictureFrame, password, folder, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously.  (asynchronously)
     * 
     * @param name Document name. (required)
     * @param image Image data. 
     * @param pictureFrame PictureFrame DTO 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createImageWatermarkAsync(String name, byte[] image, PictureFrame pictureFrame, String password, String folder, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createImageWatermarkCall(name, image, pictureFrame, password, folder, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createImageWatermarkOnline
     * @param document Document data. (required)
     * @param image Image data. 
     * @param pictureFrame PictureFrame DTO. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createImageWatermarkOnlineCall(byte[] document, byte[] image, PictureFrame pictureFrame, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling createImageWatermarkOnline(Async)");
        }
        Object postBody = pictureFrame;

        // create path and map variables
        String methodPath = "/slides/watermark/image"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);
        if (image != null)
        formParams.put("image", image);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     * 
     * @param document Document data. (required)
     * @param image Image data. 
     * @param pictureFrame PictureFrame DTO. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File createImageWatermarkOnline(byte[] document, byte[] image, PictureFrame pictureFrame, String password) throws ApiException {
        try {
            ApiResponse<File> resp = createImageWatermarkOnlineWithHttpInfo(document, image, pictureFrame, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = createImageWatermarkOnlineWithHttpInfo(document, image, pictureFrame, password);
            return resp.getData();
        }
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously. 
     * 
     * @param document Document data. (required)
     * @param image Image data. 
     * @param pictureFrame PictureFrame DTO. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> createImageWatermarkOnlineWithHttpInfo(byte[] document, byte[] image, PictureFrame pictureFrame, String password) throws ApiException {
        com.squareup.okhttp.Call call = createImageWatermarkOnlineCall(document, image, pictureFrame, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Adds an image watermark to each slide of the presentation.  Image can be provided as a part of the form or withing PictureFrame DTO for detailed customization. Both options are applicable simultaneously.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param image Image data. 
     * @param pictureFrame PictureFrame DTO. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createImageWatermarkOnlineAsync(byte[] document, byte[] image, PictureFrame pictureFrame, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createImageWatermarkOnlineCall(document, image, pictureFrame, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createNotesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNotesSlideCall(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createNotesSlide(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createNotesSlide(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add new notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlide createNotesSlide(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlide> resp = createNotesSlideWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlide> resp = createNotesSlideWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add new notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlide> createNotesSlideWithHttpInfo(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createNotesSlideCall(name, slideIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add new notes slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNotesSlideAsync(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage, final ApiCallback<NotesSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNotesSlideCall(name, slideIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph createParagraph(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = createParagraphWithHttpInfo(name, slideIndex, shapeIndex, dto, position, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = createParagraphWithHttpInfo(name, slideIndex, shapeIndex, dto, position, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Creates new paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> createParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = createParagraphCall(name, slideIndex, shapeIndex, dto, position, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, String subShape, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createParagraphCall(name, slideIndex, shapeIndex, dto, position, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling createPortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createPortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion createPortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portion> resp = createPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = createPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Creates new portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> createPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = createPortionCall(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, String subShape, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortionCall(name, slideIndex, shapeIndex, paragraphIndex, dto, position, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createPresentation
     * @param name Document name. (required)
     * @param data Source presentation binary data. 
     * @param inputPassword The password for source presentation. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPresentationCall(String name, byte[] data, String inputPassword, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createPresentation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (inputPassword != null)
        headerParams.put("inputPassword", apiClient.parameterToString(inputPassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (data != null)
        formParams.put("data", data);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a presentation.
     * 
     * @param name Document name. (required)
     * @param data Source presentation binary data. 
     * @param inputPassword The password for source presentation. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document createPresentation(String name, byte[] data, String inputPassword, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = createPresentationWithHttpInfo(name, data, inputPassword, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = createPresentationWithHttpInfo(name, data, inputPassword, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a presentation.
     * 
     * @param name Document name. (required)
     * @param data Source presentation binary data. 
     * @param inputPassword The password for source presentation. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> createPresentationWithHttpInfo(String name, byte[] data, String inputPassword, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createPresentationCall(name, data, inputPassword, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param data Source presentation binary data. 
     * @param inputPassword The password for source presentation. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPresentationAsync(String name, byte[] data, String inputPassword, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPresentationCall(name, data, inputPassword, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createPresentationFromSource
     * @param name Document name. (required)
     * @param sourcePath Source file path. 
     * @param sourcePassword Source file password. 
     * @param sourceStorage Source storage name. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPresentationFromSourceCall(String name, String sourcePath, String sourcePassword, String sourceStorage, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createPresentationFromSource(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/fromSource"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "sourcePath", sourcePath);
        apiClient.addQueryParameter(queryParams, "sourceStorage", sourceStorage);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (sourcePassword != null)
        headerParams.put("sourcePassword", apiClient.parameterToString(sourcePassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a presentation from an existing source.
     * 
     * @param name Document name. (required)
     * @param sourcePath Source file path. 
     * @param sourcePassword Source file password. 
     * @param sourceStorage Source storage name. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document createPresentationFromSource(String name, String sourcePath, String sourcePassword, String sourceStorage, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = createPresentationFromSourceWithHttpInfo(name, sourcePath, sourcePassword, sourceStorage, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = createPresentationFromSourceWithHttpInfo(name, sourcePath, sourcePassword, sourceStorage, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a presentation from an existing source.
     * 
     * @param name Document name. (required)
     * @param sourcePath Source file path. 
     * @param sourcePassword Source file password. 
     * @param sourceStorage Source storage name. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> createPresentationFromSourceWithHttpInfo(String name, String sourcePath, String sourcePassword, String sourceStorage, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createPresentationFromSourceCall(name, sourcePath, sourcePassword, sourceStorage, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a presentation from an existing source. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sourcePath Source file path. 
     * @param sourcePassword Source file password. 
     * @param sourceStorage Source storage name. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPresentationFromSourceAsync(String name, String sourcePath, String sourcePassword, String sourceStorage, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPresentationFromSourceCall(name, sourcePath, sourcePassword, sourceStorage, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createPresentationFromTemplate
     * @param name Document name. (required)
     * @param templatePath Template file path. (required)
     * @param data Document input data. 
     * @param templatePassword Template file password. 
     * @param templateStorage Template storage name. 
     * @param isImageDataEmbedded True if image data is embedded. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPresentationFromTemplateCall(String name, String templatePath, String data, String templatePassword, String templateStorage, Boolean isImageDataEmbedded, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createPresentationFromTemplate(Async)");
        }
        // verify the required parameter 'templatePath' is set
        if (templatePath == null) {
            throw new ApiException("Missing the required parameter 'templatePath' when calling createPresentationFromTemplate(Async)");
        }
        Object postBody = data;

        // create path and map variables
        String methodPath = "/slides/{name}/fromTemplate"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "templatePath", templatePath);
        apiClient.addQueryParameter(queryParams, "templateStorage", templateStorage);
        apiClient.addQueryParameter(queryParams, "isImageDataEmbedded", isImageDataEmbedded);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (templatePassword != null)
        headerParams.put("templatePassword", apiClient.parameterToString(templatePassword));
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a presentation.
     * 
     * @param name Document name. (required)
     * @param templatePath Template file path. (required)
     * @param data Document input data. 
     * @param templatePassword Template file password. 
     * @param templateStorage Template storage name. 
     * @param isImageDataEmbedded True if image data is embedded. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document createPresentationFromTemplate(String name, String templatePath, String data, String templatePassword, String templateStorage, Boolean isImageDataEmbedded, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = createPresentationFromTemplateWithHttpInfo(name, templatePath, data, templatePassword, templateStorage, isImageDataEmbedded, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = createPresentationFromTemplateWithHttpInfo(name, templatePath, data, templatePassword, templateStorage, isImageDataEmbedded, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a presentation.
     * 
     * @param name Document name. (required)
     * @param templatePath Template file path. (required)
     * @param data Document input data. 
     * @param templatePassword Template file password. 
     * @param templateStorage Template storage name. 
     * @param isImageDataEmbedded True if image data is embedded. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> createPresentationFromTemplateWithHttpInfo(String name, String templatePath, String data, String templatePassword, String templateStorage, Boolean isImageDataEmbedded, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createPresentationFromTemplateCall(name, templatePath, data, templatePassword, templateStorage, isImageDataEmbedded, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param templatePath Template file path. (required)
     * @param data Document input data. 
     * @param templatePassword Template file password. 
     * @param templateStorage Template storage name. 
     * @param isImageDataEmbedded True if image data is embedded. 
     * @param password The document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPresentationFromTemplateAsync(String name, String templatePath, String data, String templatePassword, String templateStorage, Boolean isImageDataEmbedded, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPresentationFromTemplateCall(name, templatePath, data, templatePassword, templateStorage, isImageDataEmbedded, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createSection
     * @param name Document name. (required)
     * @param sectionName Section name. (required)
     * @param slideIndex Slide index (one-based). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSectionCall(String name, String sectionName, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSection(Async)");
        }
        // verify the required parameter 'sectionName' is set
        if (sectionName == null) {
            throw new ApiException("Missing the required parameter 'sectionName' when calling createSection(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createSection(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "sectionName", sectionName);
        apiClient.addQueryParameter(queryParams, "slideIndex", slideIndex);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a section starting at a specified slide index.
     * 
     * @param name Document name. (required)
     * @param sectionName Section name. (required)
     * @param slideIndex Slide index (one-based). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections createSection(String name, String sectionName, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = createSectionWithHttpInfo(name, sectionName, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = createSectionWithHttpInfo(name, sectionName, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a section starting at a specified slide index.
     * 
     * @param name Document name. (required)
     * @param sectionName Section name. (required)
     * @param slideIndex Slide index (one-based). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> createSectionWithHttpInfo(String name, String sectionName, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSectionCall(name, sectionName, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a section starting at a specified slide index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sectionName Section name. (required)
     * @param slideIndex Slide index (one-based). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSectionAsync(String name, String sectionName, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSectionCall(name, sectionName, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createShapeCall(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createShape(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeToClone", shapeToClone);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create new shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase createShape(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = createShapeWithHttpInfo(name, slideIndex, dto, shapeToClone, position, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = createShapeWithHttpInfo(name, slideIndex, dto, shapeToClone, position, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Create new shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> createShapeWithHttpInfo(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = createShapeCall(name, slideIndex, dto, shapeToClone, position, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create new shape. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Shape DTO. 
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createShapeAsync(String name, Integer slideIndex, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, String subShape, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createShapeCall(name, slideIndex, dto, shapeToClone, position, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createSlide
     * @param name Document name. (required)
     * @param layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index 
     * @param position The target position at which to create the slide. Add to the end by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSlideCall(String name, String layoutAlias, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "layoutAlias", layoutAlias);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create a slide.
     * 
     * @param name Document name. (required)
     * @param layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index 
     * @param position The target position at which to create the slide. Add to the end by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides createSlide(String name, String layoutAlias, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = createSlideWithHttpInfo(name, layoutAlias, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = createSlideWithHttpInfo(name, layoutAlias, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create a slide.
     * 
     * @param name Document name. (required)
     * @param layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index 
     * @param position The target position at which to create the slide. Add to the end by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> createSlideWithHttpInfo(String name, String layoutAlias, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSlideCall(name, layoutAlias, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param layoutAlias Alias of layout slide for new slide. Alias may be the type of layout, name of layout slide or index 
     * @param position The target position at which to create the slide. Add to the end by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSlideAsync(String name, String layoutAlias, Integer position, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSlideCall(name, layoutAlias, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createSmartArtNode
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2). 
     * @param text Node text. 
     * @param position Position to insert a new node. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSmartArtNodeCall(String name, Integer slideIndex, Integer smartArtIndex, String subNode, String text, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSmartArtNode(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createSmartArtNode(Async)");
        }
        // verify the required parameter 'smartArtIndex' is set
        if (smartArtIndex == null) {
            throw new ApiException("Missing the required parameter 'smartArtIndex' when calling createSmartArtNode(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/smartArts/{smartArtIndex}/nodes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "smartArtIndex" + "\\}", apiClient.objectToString(smartArtIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "subNode", subNode);
        apiClient.addQueryParameter(queryParams, "text", text);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add SmartArt node
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2). 
     * @param text Node text. 
     * @param position Position to insert a new node. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SmartArt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmartArt createSmartArtNode(String name, Integer slideIndex, Integer smartArtIndex, String subNode, String text, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SmartArt> resp = createSmartArtNodeWithHttpInfo(name, slideIndex, smartArtIndex, subNode, text, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SmartArt> resp = createSmartArtNodeWithHttpInfo(name, slideIndex, smartArtIndex, subNode, text, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add SmartArt node
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2). 
     * @param text Node text. 
     * @param position Position to insert a new node. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SmartArt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmartArt> createSmartArtNodeWithHttpInfo(String name, Integer slideIndex, Integer smartArtIndex, String subNode, String text, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSmartArtNodeCall(name, slideIndex, smartArtIndex, subNode, text, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<SmartArt>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add SmartArt node (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2). 
     * @param text Node text. 
     * @param position Position to insert a new node. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSmartArtNodeAsync(String name, Integer slideIndex, Integer smartArtIndex, String subNode, String text, Integer position, String password, String folder, String storage, final ApiCallback<SmartArt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSmartArtNodeCall(name, slideIndex, smartArtIndex, subNode, text, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SmartArt>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createSpecialSlideAnimationEffect
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideAnimationEffectCall(String name, Integer slideIndex, SpecialSlideType slideType, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling createSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling createSpecialSlideAnimationEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/mainSequence"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add an effect to special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation createSpecialSlideAnimationEffect(String name, Integer slideIndex, SpecialSlideType slideType, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = createSpecialSlideAnimationEffectWithHttpInfo(name, slideIndex, slideType, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = createSpecialSlideAnimationEffectWithHttpInfo(name, slideIndex, slideType, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add an effect to special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> createSpecialSlideAnimationEffectWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSpecialSlideAnimationEffectCall(name, slideIndex, slideType, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add an effect to special slide (master, layout, notes) animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideAnimationEffectAsync(String name, Integer slideIndex, SpecialSlideType slideType, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpecialSlideAnimationEffectCall(name, slideIndex, slideType, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createSpecialSlideAnimationInteractiveSequence
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideAnimationInteractiveSequenceCall(String name, Integer slideIndex, SpecialSlideType slideType, InteractiveSequence sequence, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSpecialSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createSpecialSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling createSpecialSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'sequence' is set
        if (sequence == null) {
            throw new ApiException("Missing the required parameter 'sequence' when calling createSpecialSlideAnimationInteractiveSequence(Async)");
        }
        Object postBody = sequence;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation createSpecialSlideAnimationInteractiveSequence(String name, Integer slideIndex, SpecialSlideType slideType, InteractiveSequence sequence, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = createSpecialSlideAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, slideType, sequence, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = createSpecialSlideAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, slideType, sequence, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> createSpecialSlideAnimationInteractiveSequenceWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, InteractiveSequence sequence, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSpecialSlideAnimationInteractiveSequenceCall(name, slideIndex, slideType, sequence, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set special slide (master, layout, notes) animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequence Animation sequence DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideAnimationInteractiveSequenceAsync(String name, Integer slideIndex, SpecialSlideType slideType, InteractiveSequence sequence, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpecialSlideAnimationInteractiveSequenceCall(name, slideIndex, slideType, sequence, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createSpecialSlideAnimationInteractiveSequenceEffect
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideAnimationInteractiveSequenceEffectCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling createSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling createSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling createSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences/{sequenceIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation createSpecialSlideAnimationInteractiveSequenceEffect(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = createSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, slideType, sequenceIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = createSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, slideType, sequenceIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> createSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createSpecialSlideAnimationInteractiveSequenceEffectCall(name, slideIndex, slideType, sequenceIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Add an animation effect to a special slide (master, layout, notes) interactive sequence. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideAnimationInteractiveSequenceEffectAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpecialSlideAnimationInteractiveSequenceEffectCall(name, slideIndex, slideType, sequenceIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createSpecialSlideParagraph
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideParagraphCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling createSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createSpecialSlideParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph createSpecialSlideParagraph(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = createSpecialSlideParagraphWithHttpInfo(name, slideIndex, slideType, shapeIndex, dto, position, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = createSpecialSlideParagraphWithHttpInfo(name, slideIndex, slideType, shapeIndex, dto, position, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Creates new paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> createSpecialSlideParagraphWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = createSpecialSlideParagraphCall(name, slideIndex, slideType, shapeIndex, dto, position, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Paragraph DTO. (required)
     * @param position Position of the new paragraph in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideParagraphAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Paragraph dto, Integer position, String password, String folder, String storage, String subShape, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpecialSlideParagraphCall(name, slideIndex, slideType, shapeIndex, dto, position, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createSpecialSlidePortion
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlidePortionCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling createSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling createSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createSpecialSlidePortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates new portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion createSpecialSlidePortion(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portion> resp = createSpecialSlidePortionWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, dto, position, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = createSpecialSlidePortionWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, dto, position, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Creates new portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> createSpecialSlidePortionWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = createSpecialSlidePortionCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, dto, position, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates new portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param position Position of the new portion in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlidePortionAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Portion dto, Integer position, String password, String folder, String storage, String subShape, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpecialSlidePortionCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, dto, position, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createSpecialSlideShape
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param dto Shape DTO. (required)
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideShapeCall(String name, Integer slideIndex, SpecialSlideType slideType, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling createSpecialSlideShape(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createSpecialSlideShape(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeToClone", shapeToClone);
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create new shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param dto Shape DTO. (required)
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase createSpecialSlideShape(String name, Integer slideIndex, SpecialSlideType slideType, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = createSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, dto, shapeToClone, position, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = createSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, dto, shapeToClone, position, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Create new shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param dto Shape DTO. (required)
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> createSpecialSlideShapeWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = createSpecialSlideShapeCall(name, slideIndex, slideType, dto, shapeToClone, position, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create new shape. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param dto Shape DTO. (required)
     * @param shapeToClone Optional index for clone shape instead of adding a new one. 
     * @param position Position of the new shape in the list. Default is at the end of the list. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSpecialSlideShapeAsync(String name, Integer slideIndex, SpecialSlideType slideType, ShapeBase dto, Integer shapeToClone, Integer position, String password, String folder, String storage, String subShape, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSpecialSlideShapeCall(name, slideIndex, slideType, dto, shapeToClone, position, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createTableCellParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTableCellParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Paragraph dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createTableCellParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createTableCellParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createTableCellParagraph(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling createTableCellParagraph(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling createTableCellParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createTableCellParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates table cell paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph createTableCellParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = createTableCellParagraphWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = createTableCellParagraphWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Creates table cell paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> createTableCellParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createTableCellParagraphCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates table cell paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTableCellParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Paragraph dto, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTableCellParagraphCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createTableCellPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTableCellPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Portion dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createTableCellPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createTableCellPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createTableCellPortion(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling createTableCellPortion(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling createTableCellPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling createTableCellPortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createTableCellPortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates table cell portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion createTableCellPortion(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = createTableCellPortionWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = createTableCellPortionWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Creates table cell portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> createTableCellPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createTableCellPortionCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates table cell portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTableCellPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Portion dto, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTableCellPortionCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createTableRow
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Table row data. (required)
     * @param position Position. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTableRowCall(String name, Integer slideIndex, Integer shapeIndex, TableRow dto, Integer position, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createTableRow(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling createTableRow(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling createTableRow(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling createTableRow(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "position", position);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Inserts the table row in the specified position. If position is not specified, the row add to the end of the table.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Table row data. (required)
     * @param position Position. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return TableRow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TableRow createTableRow(String name, Integer slideIndex, Integer shapeIndex, TableRow dto, Integer position, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<TableRow> resp = createTableRowWithHttpInfo(name, slideIndex, shapeIndex, dto, position, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<TableRow> resp = createTableRowWithHttpInfo(name, slideIndex, shapeIndex, dto, position, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Inserts the table row in the specified position. If position is not specified, the row add to the end of the table.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Table row data. (required)
     * @param position Position. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;TableRow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TableRow> createTableRowWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, TableRow dto, Integer position, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createTableRowCall(name, slideIndex, shapeIndex, dto, position, password, folder, storage, null, null);
        Type returnType = new TypeToken<TableRow>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Inserts the table row in the specified position. If position is not specified, the row add to the end of the table. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Table row data. (required)
     * @param position Position. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTableRowAsync(String name, Integer slideIndex, Integer shapeIndex, TableRow dto, Integer position, String password, String folder, String storage, final ApiCallback<TableRow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTableRowCall(name, slideIndex, shapeIndex, dto, position, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<TableRow>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createVbaModule
     * @param name Document name. (required)
     * @param moduleDto VBA module DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createVbaModuleCall(String name, VbaModule moduleDto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createVbaModule(Async)");
        }
        // verify the required parameter 'moduleDto' is set
        if (moduleDto == null) {
            throw new ApiException("Missing the required parameter 'moduleDto' when calling createVbaModule(Async)");
        }
        Object postBody = moduleDto;

        // create path and map variables
        String methodPath = "/slides/{name}/vbaProject/modules"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Append module to VBA project             
     * 
     * @param name Document name. (required)
     * @param moduleDto VBA module DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return VbaModule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VbaModule createVbaModule(String name, VbaModule moduleDto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<VbaModule> resp = createVbaModuleWithHttpInfo(name, moduleDto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<VbaModule> resp = createVbaModuleWithHttpInfo(name, moduleDto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Append module to VBA project             
     * 
     * @param name Document name. (required)
     * @param moduleDto VBA module DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;VbaModule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VbaModule> createVbaModuleWithHttpInfo(String name, VbaModule moduleDto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createVbaModuleCall(name, moduleDto, password, folder, storage, null, null);
        Type returnType = new TypeToken<VbaModule>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Append module to VBA project              (asynchronously)
     * 
     * @param name Document name. (required)
     * @param moduleDto VBA module DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createVbaModuleAsync(String name, VbaModule moduleDto, String password, String folder, String storage, final ApiCallback<VbaModule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createVbaModuleCall(name, moduleDto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<VbaModule>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for createWatermark
     * @param name Document name. (required)
     * @param shape Shape DTO 
     * @param fontHeight Watermark font height. 
     * @param text Watermark text. 
     * @param fontName Watermark font name. 
     * @param fontColor Watermark font color. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createWatermarkCall(String name, Shape shape, Double fontHeight, String text, String fontName, String fontColor, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createWatermark(Async)");
        }
        Object postBody = shape;

        // create path and map variables
        String methodPath = "/slides/{name}/watermark"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "fontHeight", fontHeight);
        apiClient.addQueryParameter(queryParams, "text", text);
        apiClient.addQueryParameter(queryParams, "fontName", fontName);
        apiClient.addQueryParameter(queryParams, "fontColor", fontColor);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     * 
     * @param name Document name. (required)
     * @param shape Shape DTO 
     * @param fontHeight Watermark font height. 
     * @param text Watermark text. 
     * @param fontName Watermark font name. 
     * @param fontColor Watermark font color. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void createWatermark(String name, Shape shape, Double fontHeight, String text, String fontName, String fontColor, String password, String folder, String storage) throws ApiException {
        try {
            createWatermarkWithHttpInfo(name, shape, fontHeight, text, fontName, fontColor, password, folder, storage);
        } catch (NeedRepeatRequestException e) {
            createWatermarkWithHttpInfo(name, shape, fontHeight, text, fontName, fontColor, password, folder, storage);
        }
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     * 
     * @param name Document name. (required)
     * @param shape Shape DTO 
     * @param fontHeight Watermark font height. 
     * @param text Watermark text. 
     * @param fontName Watermark font name. 
     * @param fontColor Watermark font color. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> createWatermarkWithHttpInfo(String name, Shape shape, Double fontHeight, String text, String fontName, String fontColor, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = createWatermarkCall(name, shape, fontHeight, text, fontName, fontColor, password, folder, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously.  (asynchronously)
     * 
     * @param name Document name. (required)
     * @param shape Shape DTO 
     * @param fontHeight Watermark font height. 
     * @param text Watermark text. 
     * @param fontName Watermark font name. 
     * @param fontColor Watermark font color. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createWatermarkAsync(String name, Shape shape, Double fontHeight, String text, String fontName, String fontColor, String password, String folder, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createWatermarkCall(name, shape, fontHeight, text, fontName, fontColor, password, folder, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for createWatermarkOnline
     * @param document Document data. (required)
     * @param shape Shape DTO 
     * @param fontHeight Watermark font height. 
     * @param text Watermark text. 
     * @param fontName Watermark font name. 
     * @param fontColor Watermark font color. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createWatermarkOnlineCall(byte[] document, Shape shape, Double fontHeight, String text, String fontName, String fontColor, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling createWatermarkOnline(Async)");
        }
        Object postBody = shape;

        // create path and map variables
        String methodPath = "/slides/watermark"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "fontHeight", fontHeight);
        apiClient.addQueryParameter(queryParams, "text", text);
        apiClient.addQueryParameter(queryParams, "fontName", fontName);
        apiClient.addQueryParameter(queryParams, "fontColor", fontColor);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     * 
     * @param document Document data. (required)
     * @param shape Shape DTO 
     * @param fontHeight Watermark font height. 
     * @param text Watermark text. 
     * @param fontName Watermark font name. 
     * @param fontColor Watermark font color. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File createWatermarkOnline(byte[] document, Shape shape, Double fontHeight, String text, String fontName, String fontColor, String password) throws ApiException {
        try {
            ApiResponse<File> resp = createWatermarkOnlineWithHttpInfo(document, shape, fontHeight, text, fontName, fontColor, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = createWatermarkOnlineWithHttpInfo(document, shape, fontHeight, text, fontName, fontColor, password);
            return resp.getData();
        }
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously. 
     * 
     * @param document Document data. (required)
     * @param shape Shape DTO 
     * @param fontHeight Watermark font height. 
     * @param text Watermark text. 
     * @param fontName Watermark font name. 
     * @param fontColor Watermark font color. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> createWatermarkOnlineWithHttpInfo(byte[] document, Shape shape, Double fontHeight, String text, String fontName, String fontColor, String password) throws ApiException {
        com.squareup.okhttp.Call call = createWatermarkOnlineCall(document, shape, fontHeight, text, fontName, fontColor, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Adds a text watermark to each slide of the presentation. Text watermark can be setup via method arguments or withing Shape DTO for detailed customization. Both options are applicable simultaneously.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param shape Shape DTO 
     * @param fontHeight Watermark font height. 
     * @param text Watermark text. 
     * @param fontName Watermark font name. 
     * @param fontColor Watermark font color. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createWatermarkOnlineAsync(byte[] document, Shape shape, Double fontHeight, String text, String fontName, String fontColor, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createWatermarkOnlineCall(document, shape, fontHeight, text, fontName, fontColor, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteAnimation
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAnimation(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteAnimation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove animation from a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimation(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove animation from a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove animation from a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteAnimationEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationEffectCall(String name, Integer slideIndex, Integer effectIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAnimationEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteAnimationEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling deleteAnimationEffect(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove an effect from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationEffect(String name, Integer slideIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationEffectWithHttpInfo(name, slideIndex, effectIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationEffectWithHttpInfo(name, slideIndex, effectIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove an effect from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationEffectWithHttpInfo(String name, Integer slideIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationEffectCall(name, slideIndex, effectIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove an effect from slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationEffectAsync(String name, Integer slideIndex, Integer effectIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationEffectCall(name, slideIndex, effectIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteAnimationInteractiveSequence
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequenceCall(String name, Integer slideIndex, Integer sequenceIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling deleteAnimationInteractiveSequence(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove an interactive sequence from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationInteractiveSequence(String name, Integer slideIndex, Integer sequenceIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, sequenceIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, sequenceIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove an interactive sequence from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationInteractiveSequenceWithHttpInfo(String name, Integer slideIndex, Integer sequenceIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequenceCall(name, slideIndex, sequenceIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove an interactive sequence from slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequenceAsync(String name, Integer slideIndex, Integer sequenceIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequenceCall(name, slideIndex, sequenceIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteAnimationInteractiveSequenceEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequenceEffectCall(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling deleteAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling deleteAnimationInteractiveSequenceEffect(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove an effect from slide animation interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationInteractiveSequenceEffect(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effectIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effectIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove an effect from slide animation interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationInteractiveSequenceEffectWithHttpInfo(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effectIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove an effect from slide animation interactive sequence. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequenceEffectAsync(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effectIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteAnimationInteractiveSequences
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequencesCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAnimationInteractiveSequences(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteAnimationInteractiveSequences(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Clear all interactive sequences from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationInteractiveSequences(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequencesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationInteractiveSequencesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Clear all interactive sequences from slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationInteractiveSequencesWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequencesCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Clear all interactive sequences from slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationInteractiveSequencesAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationInteractiveSequencesCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteAnimationMainSequence
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationMainSequenceCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAnimationMainSequence(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteAnimationMainSequence(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/mainSequence"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Clear main sequence in slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteAnimationMainSequence(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteAnimationMainSequenceWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteAnimationMainSequenceWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Clear main sequence in slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteAnimationMainSequenceWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteAnimationMainSequenceCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Clear main sequence in slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAnimationMainSequenceAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAnimationMainSequenceCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteBackground
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteBackgroundCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteBackground(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteBackground(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove background from a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideBackground deleteBackground(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideBackground> resp = deleteBackgroundWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideBackground> resp = deleteBackgroundWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove background from a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideBackground> deleteBackgroundWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteBackgroundCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove background from a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteBackgroundAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideBackground> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteBackgroundCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteChartCategory
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChartCategoryCall(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteChartCategory(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteChartCategory(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteChartCategory(Async)");
        }
        // verify the required parameter 'categoryIndex' is set
        if (categoryIndex == null) {
            throw new ApiException("Missing the required parameter 'categoryIndex' when calling deleteChartCategory(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "categoryIndex" + "\\}", apiClient.objectToString(categoryIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a category from a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart deleteChartCategory(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = deleteChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, categoryIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = deleteChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, categoryIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a category from a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> deleteChartCategoryWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteChartCategoryCall(name, slideIndex, shapeIndex, categoryIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a category from a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChartCategoryAsync(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChartCategoryCall(name, slideIndex, shapeIndex, categoryIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteChartDataPoint
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChartDataPointCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteChartDataPoint(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteChartDataPoint(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteChartDataPoint(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling deleteChartDataPoint(Async)");
        }
        // verify the required parameter 'pointIndex' is set
        if (pointIndex == null) {
            throw new ApiException("Missing the required parameter 'pointIndex' when calling deleteChartDataPoint(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex)).replaceAll("\\{" + "pointIndex" + "\\}", apiClient.objectToString(pointIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a data point from a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart deleteChartDataPoint(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = deleteChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, pointIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = deleteChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, pointIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a data point from a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> deleteChartDataPointWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, pointIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a data point from a chart series. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChartDataPointAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, pointIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteChartSeries
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteChartSeriesCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteChartSeries(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteChartSeries(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteChartSeries(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling deleteChartSeries(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a series from a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart deleteChartSeries(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = deleteChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = deleteChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a series from a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> deleteChartSeriesWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteChartSeriesCall(name, slideIndex, shapeIndex, seriesIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a series from a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteChartSeriesAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteChartSeriesCall(name, slideIndex, shapeIndex, seriesIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteComments
     * @param name Document name. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommentsCall(String name, String author, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteComments(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/comments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "author", author);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     * 
     * @param name Document name. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteComments(String name, String author, String password, String folder, String storage) throws ApiException {
        try {
            deleteCommentsWithHttpInfo(name, author, password, folder, storage);
        } catch (NeedRepeatRequestException e) {
            deleteCommentsWithHttpInfo(name, author, password, folder, storage);
        }
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     * 
     * @param name Document name. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCommentsWithHttpInfo(String name, String author, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteCommentsCall(name, author, password, folder, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed.  (asynchronously)
     * 
     * @param name Document name. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommentsAsync(String name, String author, String password, String folder, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentsCall(name, author, password, folder, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteCommentsOnline
     * @param document Document data. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCommentsOnlineCall(byte[] document, String author, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling deleteCommentsOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/comments/delete"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "author", author);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     * 
     * @param document Document data. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File deleteCommentsOnline(byte[] document, String author, String password) throws ApiException {
        try {
            ApiResponse<File> resp = deleteCommentsOnlineWithHttpInfo(document, author, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = deleteCommentsOnlineWithHttpInfo(document, author, password);
            return resp.getData();
        }
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed. 
     * 
     * @param document Document data. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> deleteCommentsOnlineWithHttpInfo(byte[] document, String author, String password) throws ApiException {
        com.squareup.okhttp.Call call = deleteCommentsOnlineCall(document, author, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes comments of the specified author from the presentation. If author value is not provided all comments will be removed.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCommentsOnlineAsync(byte[] document, String author, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCommentsOnlineCall(document, author, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDocumentProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Clean document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperties deleteDocumentProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperties> resp = deleteDocumentPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperties> resp = deleteDocumentPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Clean document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperties> deleteDocumentPropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentPropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Clean document properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<DocumentProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentPropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentProperty
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertyCall(String name, String propertyName, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteDocumentProperty(Async)");
        }
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling deleteDocumentProperty(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "propertyName" + "\\}", apiClient.objectToString(propertyName));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperties deleteDocumentProperty(String name, String propertyName, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperties> resp = deleteDocumentPropertyWithHttpInfo(name, propertyName, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperties> resp = deleteDocumentPropertyWithHttpInfo(name, propertyName, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperties> deleteDocumentPropertyWithHttpInfo(String name, String propertyName, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentPropertyCall(name, propertyName, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete document property. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentPropertyAsync(String name, String propertyName, String password, String folder, String storage, final ApiCallback<DocumentProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentPropertyCall(name, propertyName, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmbeddedFont
     * @param name Document name. (required)
     * @param fontName Font name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmbeddedFontCall(String name, String fontName, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteEmbeddedFont(Async)");
        }
        // verify the required parameter 'fontName' is set
        if (fontName == null) {
            throw new ApiException("Missing the required parameter 'fontName' when calling deleteEmbeddedFont(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/fonts/embedded/{fontName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "fontName" + "\\}", apiClient.objectToString(fontName));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes specified embedded font and returns presentation fonts info.
     * 
     * @param name Document name. (required)
     * @param fontName Font name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return FontsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FontsData deleteEmbeddedFont(String name, String fontName, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<FontsData> resp = deleteEmbeddedFontWithHttpInfo(name, fontName, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FontsData> resp = deleteEmbeddedFontWithHttpInfo(name, fontName, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Removes specified embedded font and returns presentation fonts info.
     * 
     * @param name Document name. (required)
     * @param fontName Font name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;FontsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FontsData> deleteEmbeddedFontWithHttpInfo(String name, String fontName, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmbeddedFontCall(name, fontName, password, folder, storage, null, null);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes specified embedded font and returns presentation fonts info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param fontName Font name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmbeddedFontAsync(String name, String fontName, String password, String folder, String storage, final ApiCallback<FontsData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmbeddedFontCall(name, fontName, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteEmbeddedFontOnline
     * @param document Document data. (required)
     * @param fontName Font name. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteEmbeddedFontOnlineCall(byte[] document, String fontName, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling deleteEmbeddedFontOnline(Async)");
        }
        // verify the required parameter 'fontName' is set
        if (fontName == null) {
            throw new ApiException("Missing the required parameter 'fontName' when calling deleteEmbeddedFontOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/fonts/embedded/{fontName}/delete"
            .replaceAll("\\{" + "fontName" + "\\}", apiClient.objectToString(fontName));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes specified embedded font and returns presentation.
     * 
     * @param document Document data. (required)
     * @param fontName Font name. (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File deleteEmbeddedFontOnline(byte[] document, String fontName, String password) throws ApiException {
        try {
            ApiResponse<File> resp = deleteEmbeddedFontOnlineWithHttpInfo(document, fontName, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = deleteEmbeddedFontOnlineWithHttpInfo(document, fontName, password);
            return resp.getData();
        }
    }

    /**
     * Removes specified embedded font and returns presentation.
     * 
     * @param document Document data. (required)
     * @param fontName Font name. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> deleteEmbeddedFontOnlineWithHttpInfo(byte[] document, String fontName, String password) throws ApiException {
        com.squareup.okhttp.Call call = deleteEmbeddedFontOnlineCall(document, fontName, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes specified embedded font and returns presentation. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param fontName Font name. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteEmbeddedFontOnlineAsync(byte[] document, String fontName, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteEmbeddedFontOnlineCall(document, fontName, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteFile
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to delete 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete file
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to delete 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFile(String path, String storageName, String versionId) throws ApiException {
        try {
            deleteFileWithHttpInfo(path, storageName, versionId);
        } catch (NeedRepeatRequestException e) {
            deleteFileWithHttpInfo(path, storageName, versionId);
        }
    }

    /**
     * Delete file
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to delete 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFileWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFileCall(path, storageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete file (asynchronously)
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to delete 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFileAsync(String path, String storageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileCall(path, storageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteFolder
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param recursive Enable to delete folders, subfolders and files 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFolderCall(String path, String storageName, Boolean recursive, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);
        apiClient.addQueryParameter(queryParams, "recursive", recursive);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete folder
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param recursive Enable to delete folders, subfolders and files 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFolder(String path, String storageName, Boolean recursive) throws ApiException {
        try {
            deleteFolderWithHttpInfo(path, storageName, recursive);
        } catch (NeedRepeatRequestException e) {
            deleteFolderWithHttpInfo(path, storageName, recursive);
        }
    }

    /**
     * Delete folder
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param recursive Enable to delete folders, subfolders and files 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFolderWithHttpInfo(String path, String storageName, Boolean recursive) throws ApiException {
        com.squareup.okhttp.Call call = deleteFolderCall(path, storageName, recursive, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete folder (asynchronously)
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param recursive Enable to delete folders, subfolders and files 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFolderAsync(String path, String storageName, Boolean recursive, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFolderCall(path, storageName, recursive, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNotesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteNotesSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slide deleteNotesSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slide> resp = deleteNotesSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slide> resp = deleteNotesSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slide> deleteNotesSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteNotesSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove notes slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNotesSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Slide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNotesSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteParagraphs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the paragraphs to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphsCall(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "paragraphs", paragraphs);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the paragraphs to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteParagraphs(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteParagraphsWithHttpInfo(name, slideIndex, shapeIndex, paragraphs, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteParagraphsWithHttpInfo(name, slideIndex, shapeIndex, paragraphs, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the paragraphs to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteParagraphsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteParagraphsCall(name, slideIndex, shapeIndex, paragraphs, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of paragraphs. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the paragraphs to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteParagraphsAsync(String name, Integer slideIndex, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, String subShape, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteParagraphsCall(name, slideIndex, shapeIndex, paragraphs, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deletePictureCroppedAreas
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must refer to a picture frame). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Presentation storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePictureCroppedAreasCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePictureCroppedAreas(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deletePictureCroppedAreas(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deletePictureCroppedAreas(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/pictureCroppedAreas"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Deletes cropped areas of a pictire.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must refer to a picture frame). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Presentation storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePictureCroppedAreas(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            deletePictureCroppedAreasWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
        } catch (NeedRepeatRequestException e) {
            deletePictureCroppedAreasWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
        }
    }

    /**
     * Deletes cropped areas of a pictire.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must refer to a picture frame). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Presentation storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePictureCroppedAreasWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deletePictureCroppedAreasCall(name, slideIndex, shapeIndex, password, folder, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes cropped areas of a pictire. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must refer to a picture frame). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Presentation storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePictureCroppedAreasAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePictureCroppedAreasCall(name, slideIndex, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deletePortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deletePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deletePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deletePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling deletePortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deletePortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portions> resp = deletePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deletePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deletePortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deletePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deletePortions
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the portions to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortionsCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deletePortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deletePortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deletePortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deletePortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "portions", portions);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the portions to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deletePortions(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portions> resp = deletePortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deletePortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a range of portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the portions to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deletePortionsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deletePortionsCall(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of portions. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the portions to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortionsAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, String subShape, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortionsCall(name, slideIndex, shapeIndex, paragraphIndex, portions, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteProtection
     * @param name Document name. (required)
     * @param password Presentation password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProtectionCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteProtection(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Resets all presentation protection settings. 
     * 
     * @param name Document name. (required)
     * @param password Presentation password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ProtectionProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProtectionProperties deleteProtection(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ProtectionProperties> resp = deleteProtectionWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ProtectionProperties> resp = deleteProtectionWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Resets all presentation protection settings. 
     * 
     * @param name Document name. (required)
     * @param password Presentation password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ProtectionProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProtectionProperties> deleteProtectionWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteProtectionCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Resets all presentation protection settings.  (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Presentation password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProtectionAsync(String name, String password, String folder, String storage, final ApiCallback<ProtectionProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProtectionCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteProtectionOnline
     * @param document Document data. (required)
     * @param password Presentation password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteProtectionOnlineCall(byte[] document, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling deleteProtectionOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/protection/delete"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Resets all presentation protection settings. 
     * 
     * @param document Document data. (required)
     * @param password Presentation password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File deleteProtectionOnline(byte[] document, String password) throws ApiException {
        try {
            ApiResponse<File> resp = deleteProtectionOnlineWithHttpInfo(document, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = deleteProtectionOnlineWithHttpInfo(document, password);
            return resp.getData();
        }
    }

    /**
     * Resets all presentation protection settings. 
     * 
     * @param document Document data. (required)
     * @param password Presentation password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> deleteProtectionOnlineWithHttpInfo(byte[] document, String password) throws ApiException {
        com.squareup.okhttp.Call call = deleteProtectionOnlineCall(document, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Resets all presentation protection settings.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param password Presentation password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteProtectionOnlineAsync(byte[] document, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteProtectionOnlineCall(document, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSection
     * @param name Document name. (required)
     * @param sectionIndex Section index. (required)
     * @param withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSectionCall(String name, Integer sectionIndex, Boolean withSlides, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSection(Async)");
        }
        // verify the required parameter 'sectionIndex' is set
        if (sectionIndex == null) {
            throw new ApiException("Missing the required parameter 'sectionIndex' when calling deleteSection(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections/{sectionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "sectionIndex" + "\\}", apiClient.objectToString(sectionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "withSlides", withSlides);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a presentation section.
     * 
     * @param name Document name. (required)
     * @param sectionIndex Section index. (required)
     * @param withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections deleteSection(String name, Integer sectionIndex, Boolean withSlides, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = deleteSectionWithHttpInfo(name, sectionIndex, withSlides, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = deleteSectionWithHttpInfo(name, sectionIndex, withSlides, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a presentation section.
     * 
     * @param name Document name. (required)
     * @param sectionIndex Section index. (required)
     * @param withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> deleteSectionWithHttpInfo(String name, Integer sectionIndex, Boolean withSlides, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSectionCall(name, sectionIndex, withSlides, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a presentation section. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sectionIndex Section index. (required)
     * @param withSlides True to delete the slides related to the deleted section; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSectionAsync(String name, Integer sectionIndex, Boolean withSlides, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSectionCall(name, sectionIndex, withSlides, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSections
     * @param name Document name. (required)
     * @param sections The indices of the sections to be deleted; delete all by default. 
     * @param withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSectionsCall(String name, List<Integer> sections, Boolean withSlides, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSections(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "sections", sections);
        apiClient.addQueryParameter(queryParams, "withSlides", withSlides);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete presentation sections.
     * 
     * @param name Document name. (required)
     * @param sections The indices of the sections to be deleted; delete all by default. 
     * @param withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections deleteSections(String name, List<Integer> sections, Boolean withSlides, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = deleteSectionsWithHttpInfo(name, sections, withSlides, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = deleteSectionsWithHttpInfo(name, sections, withSlides, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete presentation sections.
     * 
     * @param name Document name. (required)
     * @param sections The indices of the sections to be deleted; delete all by default. 
     * @param withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> deleteSectionsWithHttpInfo(String name, List<Integer> sections, Boolean withSlides, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSectionsCall(name, sections, withSlides, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete presentation sections. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sections The indices of the sections to be deleted; delete all by default. 
     * @param withSlides True to delete the slides related to the deleted sections; move them to the remaining sections otherwise. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSectionsAsync(String name, List<Integer> sections, Boolean withSlides, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSectionsCall(name, sections, withSlides, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteShapeCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteShape(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteShapeCall(name, slideIndex, shapeIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a shape. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteShapeAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteShapeCall(name, slideIndex, shapeIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteShapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteShapesCall(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapes", shapes);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of shapes.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteShapes(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteShapesWithHttpInfo(name, slideIndex, shapes, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteShapesWithHttpInfo(name, slideIndex, shapes, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a range of shapes.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteShapesWithHttpInfo(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteShapesCall(name, slideIndex, shapes, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of shapes. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteShapesAsync(String name, Integer slideIndex, List<Integer> shapes, String password, String folder, String storage, String subShape, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteShapesCall(name, slideIndex, shapes, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete a presentation slide by index.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides deleteSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = deleteSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = deleteSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete a presentation slide by index.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> deleteSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete a presentation slide by index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSlideComments
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSlideCommentsCall(String name, Integer slideIndex, String author, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlideComments(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideComments(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/comments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "author", author);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideComments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideComments deleteSlideComments(String name, Integer slideIndex, String author, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideComments> resp = deleteSlideCommentsWithHttpInfo(name, slideIndex, author, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideComments> resp = deleteSlideCommentsWithHttpInfo(name, slideIndex, author, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed. 
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideComments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideComments> deleteSlideCommentsWithHttpInfo(String name, Integer slideIndex, String author, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSlideCommentsCall(name, slideIndex, author, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideComments>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.  (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSlideCommentsAsync(String name, Integer slideIndex, String author, String password, String folder, String storage, final ApiCallback<SlideComments> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSlideCommentsCall(name, slideIndex, author, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideComments>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSlideCommentsOnline
     * @param document Document data. (required)
     * @param slideIndex  (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSlideCommentsOnlineCall(byte[] document, Integer slideIndex, String author, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling deleteSlideCommentsOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSlideCommentsOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/comments/delete"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "author", author);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     * 
     * @param document Document data. (required)
     * @param slideIndex  (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File deleteSlideCommentsOnline(byte[] document, Integer slideIndex, String author, String password) throws ApiException {
        try {
            ApiResponse<File> resp = deleteSlideCommentsOnlineWithHttpInfo(document, slideIndex, author, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = deleteSlideCommentsOnlineWithHttpInfo(document, slideIndex, author, password);
            return resp.getData();
        }
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.              
     * 
     * @param document Document data. (required)
     * @param slideIndex  (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> deleteSlideCommentsOnlineWithHttpInfo(byte[] document, Integer slideIndex, String author, String password) throws ApiException {
        com.squareup.okhttp.Call call = deleteSlideCommentsOnlineCall(document, slideIndex, author, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes comments of the specified author from the slide. If author value is not provided all comments will be removed.               (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex  (required)
     * @param author Author of comments. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSlideCommentsOnlineAsync(byte[] document, Integer slideIndex, String author, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSlideCommentsOnlineCall(document, slideIndex, author, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSlides
     * @param name Document name. (required)
     * @param slides The indices of the slides to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSlidesCall(String name, List<Integer> slides, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSlides(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "slides", slides);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete presentation slides.
     * 
     * @param name Document name. (required)
     * @param slides The indices of the slides to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides deleteSlides(String name, List<Integer> slides, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = deleteSlidesWithHttpInfo(name, slides, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = deleteSlidesWithHttpInfo(name, slides, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete presentation slides.
     * 
     * @param name Document name. (required)
     * @param slides The indices of the slides to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> deleteSlidesWithHttpInfo(String name, List<Integer> slides, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSlidesCall(name, slides, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete presentation slides. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slides The indices of the slides to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSlidesAsync(String name, List<Integer> slides, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSlidesCall(name, slides, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSmartArtNode
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param nodeIndex Root level node index. (required)
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2). 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSmartArtNodeCall(String name, Integer slideIndex, Integer smartArtIndex, Integer nodeIndex, String subNode, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSmartArtNode(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSmartArtNode(Async)");
        }
        // verify the required parameter 'smartArtIndex' is set
        if (smartArtIndex == null) {
            throw new ApiException("Missing the required parameter 'smartArtIndex' when calling deleteSmartArtNode(Async)");
        }
        // verify the required parameter 'nodeIndex' is set
        if (nodeIndex == null) {
            throw new ApiException("Missing the required parameter 'nodeIndex' when calling deleteSmartArtNode(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/smartArts/{smartArtIndex}/nodes/{nodeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "smartArtIndex" + "\\}", apiClient.objectToString(smartArtIndex)).replaceAll("\\{" + "nodeIndex" + "\\}", apiClient.objectToString(nodeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "subNode", subNode);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete SmartArt node
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param nodeIndex Root level node index. (required)
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2). 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SmartArt
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SmartArt deleteSmartArtNode(String name, Integer slideIndex, Integer smartArtIndex, Integer nodeIndex, String subNode, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SmartArt> resp = deleteSmartArtNodeWithHttpInfo(name, slideIndex, smartArtIndex, nodeIndex, subNode, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SmartArt> resp = deleteSmartArtNodeWithHttpInfo(name, slideIndex, smartArtIndex, nodeIndex, subNode, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete SmartArt node
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param nodeIndex Root level node index. (required)
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2). 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SmartArt&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SmartArt> deleteSmartArtNodeWithHttpInfo(String name, Integer slideIndex, Integer smartArtIndex, Integer nodeIndex, String subNode, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSmartArtNodeCall(name, slideIndex, smartArtIndex, nodeIndex, subNode, password, folder, storage, null, null);
        Type returnType = new TypeToken<SmartArt>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete SmartArt node (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param smartArtIndex Index of the object on the slide among the same type of objects. (required)
     * @param nodeIndex Root level node index. (required)
     * @param subNode Sub-node path (e.g. \"3\", \"3/nodes/2). 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSmartArtNodeAsync(String name, Integer slideIndex, Integer smartArtIndex, Integer nodeIndex, String subNode, String password, String folder, String storage, final ApiCallback<SmartArt> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSmartArtNodeCall(name, slideIndex, smartArtIndex, nodeIndex, subNode, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SmartArt>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideAnimation
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationCall(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideAnimation(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideAnimation(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideAnimation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove animation from a special slide (master, layout, notes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteSpecialSlideAnimation(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationWithHttpInfo(name, slideIndex, slideType, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationWithHttpInfo(name, slideIndex, slideType, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove animation from a special slide (master, layout, notes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteSpecialSlideAnimationWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationCall(name, slideIndex, slideType, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove animation from a special slide (master, layout, notes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationAsync(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationCall(name, slideIndex, slideType, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideAnimationEffect
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationEffectCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer effectIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling deleteSpecialSlideAnimationEffect(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/mainSequence/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteSpecialSlideAnimationEffect(String name, Integer slideIndex, SpecialSlideType slideType, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationEffectWithHttpInfo(name, slideIndex, slideType, effectIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationEffectWithHttpInfo(name, slideIndex, slideType, effectIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove an effect from special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteSpecialSlideAnimationEffectWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationEffectCall(name, slideIndex, slideType, effectIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove an effect from special slide (master, layout, notes) animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationEffectAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer effectIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationEffectCall(name, slideIndex, slideType, effectIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideAnimationInteractiveSequence
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationInteractiveSequenceCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideAnimationInteractiveSequence(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling deleteSpecialSlideAnimationInteractiveSequence(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences/{sequenceIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteSpecialSlideAnimationInteractiveSequence(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, slideType, sequenceIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationInteractiveSequenceWithHttpInfo(name, slideIndex, slideType, sequenceIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteSpecialSlideAnimationInteractiveSequenceWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationInteractiveSequenceCall(name, slideIndex, slideType, sequenceIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove an interactive sequence from special slide (master, layout, notes) animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The index of an interactive sequence to be deleted. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationInteractiveSequenceAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationInteractiveSequenceCall(name, slideIndex, slideType, sequenceIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideAnimationInteractiveSequenceEffect
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationInteractiveSequenceEffectCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling deleteSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling deleteSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteSpecialSlideAnimationInteractiveSequenceEffect(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, slideType, sequenceIndex, effectIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, slideType, sequenceIndex, effectIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationInteractiveSequenceEffectCall(name, slideIndex, slideType, sequenceIndex, effectIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove an effect from special slide (master, layout, notes) animation interactive sequence. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex Interactive sequence index. (required)
     * @param effectIndex Index of the effect to be removed. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationInteractiveSequenceEffectAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Integer effectIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationInteractiveSequenceEffectCall(name, slideIndex, slideType, sequenceIndex, effectIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideAnimationInteractiveSequences
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationInteractiveSequencesCall(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideAnimationInteractiveSequences(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideAnimationInteractiveSequences(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideAnimationInteractiveSequences(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteSpecialSlideAnimationInteractiveSequences(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationInteractiveSequencesWithHttpInfo(name, slideIndex, slideType, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationInteractiveSequencesWithHttpInfo(name, slideIndex, slideType, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteSpecialSlideAnimationInteractiveSequencesWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationInteractiveSequencesCall(name, slideIndex, slideType, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Clear all interactive sequences from special slide (master, layout, notes) animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationInteractiveSequencesAsync(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationInteractiveSequencesCall(name, slideIndex, slideType, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideAnimationMainSequence
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationMainSequenceCall(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideAnimationMainSequence(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideAnimationMainSequence(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideAnimationMainSequence(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/mainSequence"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation deleteSpecialSlideAnimationMainSequence(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationMainSequenceWithHttpInfo(name, slideIndex, slideType, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = deleteSpecialSlideAnimationMainSequenceWithHttpInfo(name, slideIndex, slideType, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Clear main sequence in special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> deleteSpecialSlideAnimationMainSequenceWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationMainSequenceCall(name, slideIndex, slideType, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Clear main sequence in special slide (master, layout, notes) animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideAnimationMainSequenceAsync(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideAnimationMainSequenceCall(name, slideIndex, slideType, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideParagraph
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideParagraphCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteSpecialSlideParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteSpecialSlideParagraph(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteSpecialSlideParagraphWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteSpecialSlideParagraphWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteSpecialSlideParagraphWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideParagraphCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideParagraphAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideParagraphCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideParagraphs
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideParagraphsCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideParagraphs(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSpecialSlideParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "paragraphs", paragraphs);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteSpecialSlideParagraphs(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteSpecialSlideParagraphsWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphs, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteSpecialSlideParagraphsWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphs, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a range of paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteSpecialSlideParagraphsWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideParagraphsCall(name, slideIndex, slideType, shapeIndex, paragraphs, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of paragraphs. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphs The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideParagraphsAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, List<Integer> paragraphs, String password, String folder, String storage, String subShape, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideParagraphsCall(name, slideIndex, slideType, shapeIndex, paragraphs, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlidePortion
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlidePortionCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling deleteSpecialSlidePortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deleteSpecialSlidePortion(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portions> resp = deleteSpecialSlidePortionWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deleteSpecialSlidePortionWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deleteSpecialSlidePortionWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlidePortionCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlidePortionAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlidePortionCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlidePortions
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlidePortionsCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlidePortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlidePortions(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlidePortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSpecialSlidePortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteSpecialSlidePortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "portions", portions);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deleteSpecialSlidePortions(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portions> resp = deleteSpecialSlidePortionsWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, portions, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deleteSpecialSlidePortionsWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, portions, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a range of portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deleteSpecialSlidePortionsWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlidePortionsCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, portions, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of portions. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portions The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlidePortionsAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, List<Integer> portions, String password, String folder, String storage, String subShape, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlidePortionsCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, portions, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideShape
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideShapeCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteSpecialSlideShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteSpecialSlideShape(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a shape.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteSpecialSlideShapeWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a shape. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideShapeAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteSpecialSlideShapes
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideShapesCall(String name, Integer slideIndex, SpecialSlideType slideType, List<Integer> shapes, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteSpecialSlideShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteSpecialSlideShapes(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling deleteSpecialSlideShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapes", shapes);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Remove a range of shapes.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes deleteSpecialSlideShapes(String name, Integer slideIndex, SpecialSlideType slideType, List<Integer> shapes, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Shapes> resp = deleteSpecialSlideShapesWithHttpInfo(name, slideIndex, slideType, shapes, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = deleteSpecialSlideShapesWithHttpInfo(name, slideIndex, slideType, shapes, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Remove a range of shapes.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> deleteSpecialSlideShapesWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, List<Integer> shapes, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = deleteSpecialSlideShapesCall(name, slideIndex, slideType, shapes, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Remove a range of shapes. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapes The indices of the shapes to be deleted; delete all by default. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSpecialSlideShapesAsync(String name, Integer slideIndex, SpecialSlideType slideType, List<Integer> shapes, String password, String folder, String storage, String subShape, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSpecialSlideShapesCall(name, slideIndex, slideType, shapes, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteTableCellParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableCellParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteTableCellParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteTableCellParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteTableCellParagraph(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling deleteTableCellParagraph(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling deleteTableCellParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteTableCellParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete cell paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs deleteTableCellParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = deleteTableCellParagraphWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = deleteTableCellParagraphWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete cell paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> deleteTableCellParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteTableCellParagraphCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete cell paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTableCellParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableCellParagraphCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteTableCellPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableCellPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteTableCellPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteTableCellPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteTableCellPortion(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling deleteTableCellPortion(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling deleteTableCellPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling deleteTableCellPortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling deleteTableCellPortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete table ell portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions deleteTableCellPortion(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = deleteTableCellPortionWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = deleteTableCellPortionWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete table ell portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> deleteTableCellPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteTableCellPortionCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete table ell portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTableCellPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableCellPortionCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteTableRow
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param withAttachedRows Also delete all attached rows. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTableRowCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Boolean withAttachedRows, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteTableRow(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling deleteTableRow(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling deleteTableRow(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling deleteTableRow(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "withAttachedRows", withAttachedRows);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Deletes the table row.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param withAttachedRows Also delete all attached rows. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Table
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Table deleteTableRow(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Boolean withAttachedRows, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Table> resp = deleteTableRowWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, withAttachedRows, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Table> resp = deleteTableRowWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, withAttachedRows, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Deletes the table row.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param withAttachedRows Also delete all attached rows. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Table&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Table> deleteTableRowWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Boolean withAttachedRows, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteTableRowCall(name, slideIndex, shapeIndex, rowIndex, withAttachedRows, password, folder, storage, null, null);
        Type returnType = new TypeToken<Table>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Deletes the table row. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param withAttachedRows Also delete all attached rows. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTableRowAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Boolean withAttachedRows, String password, String folder, String storage, final ApiCallback<Table> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTableRowCall(name, slideIndex, shapeIndex, rowIndex, withAttachedRows, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Table>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteUnusedLayoutSlides
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUnusedLayoutSlidesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteUnusedLayoutSlides(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/layoutSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes unused layout slides.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return LayoutSlides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutSlides deleteUnusedLayoutSlides(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<LayoutSlides> resp = deleteUnusedLayoutSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<LayoutSlides> resp = deleteUnusedLayoutSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Removes unused layout slides.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;LayoutSlides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutSlides> deleteUnusedLayoutSlidesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteUnusedLayoutSlidesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<LayoutSlides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes unused layout slides. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUnusedLayoutSlidesAsync(String name, String password, String folder, String storage, final ApiCallback<LayoutSlides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUnusedLayoutSlidesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<LayoutSlides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteUnusedLayoutSlidesOnline
     * @param document Document data (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUnusedLayoutSlidesOnlineCall(byte[] document, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling deleteUnusedLayoutSlidesOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/layoutSlides/delete"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes unused layout slides.
     * 
     * @param document Document data (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File deleteUnusedLayoutSlidesOnline(byte[] document, String password) throws ApiException {
        try {
            ApiResponse<File> resp = deleteUnusedLayoutSlidesOnlineWithHttpInfo(document, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = deleteUnusedLayoutSlidesOnlineWithHttpInfo(document, password);
            return resp.getData();
        }
    }

    /**
     * Removes unused layout slides.
     * 
     * @param document Document data (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> deleteUnusedLayoutSlidesOnlineWithHttpInfo(byte[] document, String password) throws ApiException {
        com.squareup.okhttp.Call call = deleteUnusedLayoutSlidesOnlineCall(document, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes unused layout slides. (asynchronously)
     * 
     * @param document Document data (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUnusedLayoutSlidesOnlineAsync(byte[] document, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUnusedLayoutSlidesOnlineCall(document, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteUnusedMasterSlides
     * @param name Document name. (required)
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUnusedMasterSlidesCall(String name, Boolean ignorePreserveField, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteUnusedMasterSlides(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/masterSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "ignorePreserveField", ignorePreserveField);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes unused master slides.
     * 
     * @param name Document name. (required)
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return MasterSlides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MasterSlides deleteUnusedMasterSlides(String name, Boolean ignorePreserveField, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<MasterSlides> resp = deleteUnusedMasterSlidesWithHttpInfo(name, ignorePreserveField, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<MasterSlides> resp = deleteUnusedMasterSlidesWithHttpInfo(name, ignorePreserveField, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Removes unused master slides.
     * 
     * @param name Document name. (required)
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;MasterSlides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MasterSlides> deleteUnusedMasterSlidesWithHttpInfo(String name, Boolean ignorePreserveField, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteUnusedMasterSlidesCall(name, ignorePreserveField, password, folder, storage, null, null);
        Type returnType = new TypeToken<MasterSlides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes unused master slides. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUnusedMasterSlidesAsync(String name, Boolean ignorePreserveField, String password, String folder, String storage, final ApiCallback<MasterSlides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUnusedMasterSlidesCall(name, ignorePreserveField, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<MasterSlides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteUnusedMasterSlidesOnline
     * @param document Document data (required)
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUnusedMasterSlidesOnlineCall(byte[] document, Boolean ignorePreserveField, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling deleteUnusedMasterSlidesOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/masterSlides/delete"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "ignorePreserveField", ignorePreserveField);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes unused master slides.
     * 
     * @param document Document data (required)
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File deleteUnusedMasterSlidesOnline(byte[] document, Boolean ignorePreserveField, String password) throws ApiException {
        try {
            ApiResponse<File> resp = deleteUnusedMasterSlidesOnlineWithHttpInfo(document, ignorePreserveField, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = deleteUnusedMasterSlidesOnlineWithHttpInfo(document, ignorePreserveField, password);
            return resp.getData();
        }
    }

    /**
     * Removes unused master slides.
     * 
     * @param document Document data (required)
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> deleteUnusedMasterSlidesOnlineWithHttpInfo(byte[] document, Boolean ignorePreserveField, String password) throws ApiException {
        com.squareup.okhttp.Call call = deleteUnusedMasterSlidesOnlineCall(document, ignorePreserveField, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes unused master slides. (asynchronously)
     * 
     * @param document Document data (required)
     * @param ignorePreserveField Determines, whether this method should remove unused master even if its             preserve property is set to true. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUnusedMasterSlidesOnlineAsync(byte[] document, Boolean ignorePreserveField, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUnusedMasterSlidesOnlineCall(document, ignorePreserveField, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteVbaModule
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteVbaModuleCall(String name, Integer moduleIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteVbaModule(Async)");
        }
        // verify the required parameter 'moduleIndex' is set
        if (moduleIndex == null) {
            throw new ApiException("Missing the required parameter 'moduleIndex' when calling deleteVbaModule(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/vbaProject/modules/{moduleIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "moduleIndex" + "\\}", apiClient.objectToString(moduleIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Delete module from VBA project.
     * 
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return VbaProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VbaProject deleteVbaModule(String name, Integer moduleIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<VbaProject> resp = deleteVbaModuleWithHttpInfo(name, moduleIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<VbaProject> resp = deleteVbaModuleWithHttpInfo(name, moduleIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Delete module from VBA project.
     * 
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;VbaProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VbaProject> deleteVbaModuleWithHttpInfo(String name, Integer moduleIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteVbaModuleCall(name, moduleIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<VbaProject>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Delete module from VBA project. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVbaModuleAsync(String name, Integer moduleIndex, String password, String folder, String storage, final ApiCallback<VbaProject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVbaModuleCall(name, moduleIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<VbaProject>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for deleteWatermark
     * @param name Document name. (required)
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWatermarkCall(String name, String shapeName, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteWatermark(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/watermark/delete"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeName", shapeName);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "DELETE", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     * 
     * @param name Document name. (required)
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWatermark(String name, String shapeName, String password, String folder, String storage) throws ApiException {
        try {
            deleteWatermarkWithHttpInfo(name, shapeName, password, folder, storage);
        } catch (NeedRepeatRequestException e) {
            deleteWatermarkWithHttpInfo(name, shapeName, password, folder, storage);
        }
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     * 
     * @param name Document name. (required)
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWatermarkWithHttpInfo(String name, String shapeName, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = deleteWatermarkCall(name, shapeName, password, folder, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWatermarkAsync(String name, String shapeName, String password, String folder, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWatermarkCall(name, shapeName, password, folder, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWatermarkOnline
     * @param document Document data. (required)
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWatermarkOnlineCall(byte[] document, String shapeName, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling deleteWatermarkOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/watermark/delete"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeName", shapeName);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     * 
     * @param document Document data. (required)
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File deleteWatermarkOnline(byte[] document, String shapeName, String password) throws ApiException {
        try {
            ApiResponse<File> resp = deleteWatermarkOnlineWithHttpInfo(document, shapeName, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = deleteWatermarkOnlineWithHttpInfo(document, shapeName, password);
            return resp.getData();
        }
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation.
     * 
     * @param document Document data. (required)
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> deleteWatermarkOnlineWithHttpInfo(byte[] document, String shapeName, String password) throws ApiException {
        com.squareup.okhttp.Call call = deleteWatermarkOnlineCall(document, shapeName, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Removes shapes with name \&quot;watermark\&quot; from the presentation. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param shapeName Name of the watermark shape. If null, default value \"watermark\"is used. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWatermarkOnlineAsync(byte[] document, String shapeName, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWatermarkOnlineCall(document, shapeName, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadFile
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to download 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadFileCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Download file
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to download 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadFile(String path, String storageName, String versionId) throws ApiException {
        try {
            ApiResponse<File> resp = downloadFileWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadFileWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        }
    }

    /**
     * Download file
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to download 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadFileWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = downloadFileCall(path, storageName, versionId, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Download file (asynchronously)
     * 
     * @param path File path e.g. '/folder/file.ext' 
     * @param storageName Storage name 
     * @param versionId File version ID to download 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadFileAsync(String path, String storageName, String versionId, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadFileCall(path, storageName, versionId, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadImage
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImageCall(String name, Integer index, ImageExportFormat format, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadImage(Async)");
        }
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling downloadImage(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadImage(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images/{index}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "index" + "\\}", apiClient.objectToString(index)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get image in specified format.
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImage(String name, Integer index, ImageExportFormat format, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImageWithHttpInfo(name, index, format, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImageWithHttpInfo(name, index, format, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get image in specified format.
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImageWithHttpInfo(String name, Integer index, ImageExportFormat format, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadImageCall(name, index, format, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get image in specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImageAsync(String name, Integer index, ImageExportFormat format, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImageCall(name, index, format, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadImageDefaultFormat
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImageDefaultFormatCall(String name, Integer index, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadImageDefaultFormat(Async)");
        }
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling downloadImageDefaultFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images/{index}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "index" + "\\}", apiClient.objectToString(index));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get image binary data.
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImageDefaultFormat(String name, Integer index, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImageDefaultFormatWithHttpInfo(name, index, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImageDefaultFormatWithHttpInfo(name, index, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get image binary data.
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImageDefaultFormatWithHttpInfo(String name, Integer index, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadImageDefaultFormatCall(name, index, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get image binary data. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImageDefaultFormatAsync(String name, Integer index, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImageDefaultFormatCall(name, index, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadImageDefaultFormatOnline
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImageDefaultFormatOnlineCall(byte[] document, Integer index, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling downloadImageDefaultFormatOnline(Async)");
        }
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling downloadImageDefaultFormatOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/images/{index}"
            .replaceAll("\\{" + "index" + "\\}", apiClient.objectToString(index));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get image binary data.
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImageDefaultFormatOnline(byte[] document, Integer index, String password) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImageDefaultFormatOnlineWithHttpInfo(document, index, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImageDefaultFormatOnlineWithHttpInfo(document, index, password);
            return resp.getData();
        }
    }

    /**
     * Get image binary data.
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImageDefaultFormatOnlineWithHttpInfo(byte[] document, Integer index, String password) throws ApiException {
        com.squareup.okhttp.Call call = downloadImageDefaultFormatOnlineCall(document, index, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get image binary data. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImageDefaultFormatOnlineAsync(byte[] document, Integer index, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImageDefaultFormatOnlineCall(document, index, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadImageOnline
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImageOnlineCall(byte[] document, Integer index, ImageExportFormat format, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling downloadImageOnline(Async)");
        }
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling downloadImageOnline(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadImageOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/images/{index}/{format}"
            .replaceAll("\\{" + "index" + "\\}", apiClient.objectToString(index)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get image in specified format.
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImageOnline(byte[] document, Integer index, ImageExportFormat format, String password) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImageOnlineWithHttpInfo(document, index, format, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImageOnlineWithHttpInfo(document, index, format, password);
            return resp.getData();
        }
    }

    /**
     * Get image in specified format.
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImageOnlineWithHttpInfo(byte[] document, Integer index, ImageExportFormat format, String password) throws ApiException {
        com.squareup.okhttp.Call call = downloadImageOnlineCall(document, index, format, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get image in specified format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param index Image index. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImageOnlineAsync(byte[] document, Integer index, ImageExportFormat format, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImageOnlineCall(document, index, format, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadImages
     * @param name  (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImagesCall(String name, ImageExportFormat format, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadImages(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadImages(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images/download/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all presentation images in specified format.
     * 
     * @param name  (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImages(String name, ImageExportFormat format, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImagesWithHttpInfo(name, format, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImagesWithHttpInfo(name, format, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get all presentation images in specified format.
     * 
     * @param name  (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImagesWithHttpInfo(String name, ImageExportFormat format, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadImagesCall(name, format, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all presentation images in specified format. (asynchronously)
     * 
     * @param name  (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImagesAsync(String name, ImageExportFormat format, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImagesCall(name, format, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadImagesDefaultFormat
     * @param name  (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImagesDefaultFormatCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadImagesDefaultFormat(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images/download"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all presentation images.
     * 
     * @param name  (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImagesDefaultFormat(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImagesDefaultFormatWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImagesDefaultFormatWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get all presentation images.
     * 
     * @param name  (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImagesDefaultFormatWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadImagesDefaultFormatCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all presentation images. (asynchronously)
     * 
     * @param name  (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImagesDefaultFormatAsync(String name, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImagesDefaultFormatCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadImagesDefaultFormatOnline
     * @param document Document data. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImagesDefaultFormatOnlineCall(byte[] document, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling downloadImagesDefaultFormatOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/images/download"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all presentation images.
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImagesDefaultFormatOnline(byte[] document, String password) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImagesDefaultFormatOnlineWithHttpInfo(document, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImagesDefaultFormatOnlineWithHttpInfo(document, password);
            return resp.getData();
        }
    }

    /**
     * Get all presentation images.
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImagesDefaultFormatOnlineWithHttpInfo(byte[] document, String password) throws ApiException {
        com.squareup.okhttp.Call call = downloadImagesDefaultFormatOnlineCall(document, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all presentation images. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImagesDefaultFormatOnlineAsync(byte[] document, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImagesDefaultFormatOnlineCall(document, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadImagesOnline
     * @param document Document data. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadImagesOnlineCall(byte[] document, ImageExportFormat format, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling downloadImagesOnline(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadImagesOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/images/download/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all presentation images in specified format. 
     * 
     * @param document Document data. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadImagesOnline(byte[] document, ImageExportFormat format, String password) throws ApiException {
        try {
            ApiResponse<File> resp = downloadImagesOnlineWithHttpInfo(document, format, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadImagesOnlineWithHttpInfo(document, format, password);
            return resp.getData();
        }
    }

    /**
     * Get all presentation images in specified format. 
     * 
     * @param document Document data. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadImagesOnlineWithHttpInfo(byte[] document, ImageExportFormat format, String password) throws ApiException {
        com.squareup.okhttp.Call call = downloadImagesOnlineCall(document, format, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all presentation images in specified format.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format Export format (png, jpg, gif). (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadImagesOnlineAsync(byte[] document, ImageExportFormat format, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadImagesOnlineCall(document, format, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadMathPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param format Format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadMathPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, MathFormat format, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadMathPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling downloadMathPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling downloadMathPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling downloadMathPortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling downloadMathPortion(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadMathPortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert Mathematical Text to MathML Format
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param format Format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadMathPortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, MathFormat format, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadMathPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, format, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadMathPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, format, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Convert Mathematical Text to MathML Format
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param format Format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadMathPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, MathFormat format, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadMathPortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, format, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Convert Mathematical Text to MathML Format (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param format Format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadMathPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, MathFormat format, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadMathPortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, format, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadNotesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format. 
     * @param height The height of the slide representation in the output format 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideCall(String name, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling downloadNotesSlide(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadNotesSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format. 
     * @param height The height of the slide representation in the output format 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadNotesSlide(String name, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadNotesSlideWithHttpInfo(name, slideIndex, format, width, height, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadNotesSlideWithHttpInfo(name, slideIndex, format, width, height, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format. 
     * @param height The height of the slide representation in the output format 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadNotesSlideWithHttpInfo(String name, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadNotesSlideCall(name, slideIndex, format, width, height, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Convert notes slide to the specified image format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format. 
     * @param height The height of the slide representation in the output format 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideAsync(String name, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadNotesSlideCall(name, slideIndex, format, width, height, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadNotesSlideOnline
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format. 
     * @param height The height of the slide representation in the output format. 
     * @param password Document password. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideOnlineCall(byte[] document, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling downloadNotesSlideOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling downloadNotesSlideOnline(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadNotesSlideOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/notesSlide/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format. 
     * @param height The height of the slide representation in the output format. 
     * @param password Document password. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadNotesSlideOnline(byte[] document, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadNotesSlideOnlineWithHttpInfo(document, slideIndex, format, width, height, password, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadNotesSlideOnlineWithHttpInfo(document, slideIndex, format, width, height, password, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Convert notes slide to the specified image format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format. 
     * @param height The height of the slide representation in the output format. 
     * @param password Document password. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadNotesSlideOnlineWithHttpInfo(byte[] document, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadNotesSlideOnlineCall(document, slideIndex, format, width, height, password, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Convert notes slide to the specified image format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format. 
     * @param height The height of the slide representation in the output format. 
     * @param password Document password. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadNotesSlideOnlineAsync(byte[] document, Integer slideIndex, NotesSlideExportFormat format, Integer width, Integer height, String password, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadNotesSlideOnlineCall(document, slideIndex, format, width, height, password, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadPortionAsMathMl
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadPortionAsMathMlCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadPortionAsMathMl(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling downloadPortionAsMathMl(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling downloadPortionAsMathMl(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling downloadPortionAsMathMl(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling downloadPortionAsMathMl(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/mathml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert Mathematical Text to MathML Format
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadPortionAsMathMl(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = downloadPortionAsMathMlWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadPortionAsMathMlWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Convert Mathematical Text to MathML Format
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadPortionAsMathMlWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = downloadPortionAsMathMlCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Convert Mathematical Text to MathML Format (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadPortionAsMathMlAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadPortionAsMathMlCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadPresentation
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadPresentationCall(String name, ExportFormat format, ExportOptions options, String password, String folder, String storage, String fontsFolder, List<Integer> slides, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadPresentation(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadPresentation(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);
        apiClient.addQueryParameter(queryParams, "slides", slides);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadPresentation(String name, ExportFormat format, ExportOptions options, String password, String folder, String storage, String fontsFolder, List<Integer> slides) throws ApiException {
        try {
            ApiResponse<File> resp = downloadPresentationWithHttpInfo(name, format, options, password, folder, storage, fontsFolder, slides);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadPresentationWithHttpInfo(name, format, options, password, folder, storage, fontsFolder, slides);
            return resp.getData();
        }
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadPresentationWithHttpInfo(String name, ExportFormat format, ExportOptions options, String password, String folder, String storage, String fontsFolder, List<Integer> slides) throws ApiException {
        com.squareup.okhttp.Call call = downloadPresentationCall(name, format, options, password, folder, storage, fontsFolder, slides, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Save a presentation to a specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadPresentationAsync(String name, ExportFormat format, ExportOptions options, String password, String folder, String storage, String fontsFolder, List<Integer> slides, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadPresentationCall(name, format, options, password, folder, storage, fontsFolder, slides, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadShape
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadShapeCall(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling downloadShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling downloadShape(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadShape(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadShape(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape) throws ApiException {
        try {
            ApiResponse<File> resp = downloadShapeWithHttpInfo(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadShapeWithHttpInfo(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape);
            return resp.getData();
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = downloadShapeCall(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadShapeAsync(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadShapeCall(name, slideIndex, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadShapeFromDto
     * @param format Export format (required)
     * @param dto Shape DTO. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadShapeFromDtoCall(ShapeExportFormat format, ShapeBase dto, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadShapeFromDto(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling downloadShapeFromDto(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/shape/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Creates the shape from the DTO and returns the result in the specified format.
     * 
     * @param format Export format (required)
     * @param dto Shape DTO. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadShapeFromDto(ShapeExportFormat format, ShapeBase dto) throws ApiException {
        try {
            ApiResponse<File> resp = downloadShapeFromDtoWithHttpInfo(format, dto);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadShapeFromDtoWithHttpInfo(format, dto);
            return resp.getData();
        }
    }

    /**
     * Creates the shape from the DTO and returns the result in the specified format.
     * 
     * @param format Export format (required)
     * @param dto Shape DTO. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadShapeFromDtoWithHttpInfo(ShapeExportFormat format, ShapeBase dto) throws ApiException {
        com.squareup.okhttp.Call call = downloadShapeFromDtoCall(format, dto, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Creates the shape from the DTO and returns the result in the specified format. (asynchronously)
     * 
     * @param format Export format (required)
     * @param dto Shape DTO. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadShapeFromDtoAsync(ShapeExportFormat format, ShapeBase dto, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadShapeFromDtoCall(format, dto, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadShapeOnline
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Fonts folder. 
     * @param options Export options. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadShapeOnlineCall(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String storage, String fontsFolder, IShapeExportOptions options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling downloadShapeOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling downloadShapeOnline(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling downloadShapeOnline(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadShapeOnline(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Fonts folder. 
     * @param options Export options. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadShapeOnline(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String storage, String fontsFolder, IShapeExportOptions options) throws ApiException {
        try {
            ApiResponse<File> resp = downloadShapeOnlineWithHttpInfo(document, slideIndex, shapeIndex, format, scaleX, scaleY, bounds, password, storage, fontsFolder, options);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadShapeOnlineWithHttpInfo(document, slideIndex, shapeIndex, format, scaleX, scaleY, bounds, password, storage, fontsFolder, options);
            return resp.getData();
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Fonts folder. 
     * @param options Export options. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadShapeOnlineWithHttpInfo(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String storage, String fontsFolder, IShapeExportOptions options) throws ApiException {
        com.squareup.okhttp.Call call = downloadShapeOnlineCall(document, slideIndex, shapeIndex, format, scaleX, scaleY, bounds, password, storage, fontsFolder, options, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Fonts folder. 
     * @param options Export options. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadShapeOnlineAsync(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String storage, String fontsFolder, IShapeExportOptions options, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadShapeOnlineCall(document, slideIndex, shapeIndex, format, scaleX, scaleY, bounds, password, storage, fontsFolder, options, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param options Export options. 
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadSlideCall(String name, Integer slideIndex, SlideExportFormat format, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling downloadSlide(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadSlide(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param options Export options. 
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadSlide(String name, Integer slideIndex, SlideExportFormat format, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = downloadSlideWithHttpInfo(name, slideIndex, format, options, width, height, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadSlideWithHttpInfo(name, slideIndex, format, options, width, height, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param options Export options. 
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadSlideWithHttpInfo(String name, Integer slideIndex, SlideExportFormat format, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = downloadSlideCall(name, slideIndex, format, options, width, height, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param options Export options. 
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadSlideAsync(String name, Integer slideIndex, SlideExportFormat format, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadSlideCall(name, slideIndex, format, options, width, height, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadSlideOnline
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param options Export options. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadSlideOnlineCall(byte[] document, Integer slideIndex, SlideExportFormat format, Integer width, Integer height, String password, String storage, String fontsFolder, ExportOptions options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling downloadSlideOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling downloadSlideOnline(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadSlideOnline(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param options Export options. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadSlideOnline(byte[] document, Integer slideIndex, SlideExportFormat format, Integer width, Integer height, String password, String storage, String fontsFolder, ExportOptions options) throws ApiException {
        try {
            ApiResponse<File> resp = downloadSlideOnlineWithHttpInfo(document, slideIndex, format, width, height, password, storage, fontsFolder, options);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadSlideOnlineWithHttpInfo(document, slideIndex, format, width, height, password, storage, fontsFolder, options);
            return resp.getData();
        }
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param options Export options. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadSlideOnlineWithHttpInfo(byte[] document, Integer slideIndex, SlideExportFormat format, Integer width, Integer height, String password, String storage, String fontsFolder, ExportOptions options) throws ApiException {
        com.squareup.okhttp.Call call = downloadSlideOnlineCall(document, slideIndex, format, width, height, password, storage, fontsFolder, options, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param options Export options. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadSlideOnlineAsync(byte[] document, Integer slideIndex, SlideExportFormat format, Integer width, Integer height, String password, String storage, String fontsFolder, ExportOptions options, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadSlideOnlineCall(document, slideIndex, format, width, height, password, storage, fontsFolder, options, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for downloadSpecialSlideShape
     * @param name Presentation name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options Export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadSpecialSlideShapeCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling downloadSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling downloadSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling downloadSpecialSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling downloadSpecialSlideShape(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadSpecialSlideShape(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options Export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File downloadSpecialSlideShape(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape) throws ApiException {
        try {
            ApiResponse<File> resp = downloadSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = downloadSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape);
            return resp.getData();
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options Export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> downloadSpecialSlideShapeWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = downloadSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param options Export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadSpecialSlideShapeAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeExportFormat format, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, format, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getAnimation
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param paragraphIndex Paragraph index. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAnimationCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getAnimation(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getAnimation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeIndex", shapeIndex);
        apiClient.addQueryParameter(queryParams, "paragraphIndex", paragraphIndex);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide animation effects.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param paragraphIndex Paragraph index. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation getAnimation(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = getAnimationWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = getAnimationWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide animation effects.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param paragraphIndex Paragraph index. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> getAnimationWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getAnimationCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide animation effects. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param paragraphIndex Paragraph index. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAnimationAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAnimationCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getApiInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getApiInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/info"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get API info.
     * 
     * @return ApiInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiInfo getApiInfo() throws ApiException {
        try {
            ApiResponse<ApiInfo> resp = getApiInfoWithHttpInfo();
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ApiInfo> resp = getApiInfoWithHttpInfo();
            return resp.getData();
        }
    }

    /**
     * Get API info.
     * 
     * @return ApiResponse&lt;ApiInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ApiInfo> getApiInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getApiInfoCall(null, null);
        Type returnType = new TypeToken<ApiInfo>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get API info. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getApiInfoAsync(final ApiCallback<ApiInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getApiInfoCall(progressListener, progressRequestListener);
        Type returnType = new TypeToken<ApiInfo>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getAvailableFonts
     * @param fontsFolder Storage folder for custom fonts. 
     * @param storage Storage for custom fonts. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAvailableFontsCall(String fontsFolder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/fonts/available"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Returns presentation fonts info.
     * 
     * @param fontsFolder Storage folder for custom fonts. 
     * @param storage Storage for custom fonts. 
     * @return FontsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FontsData getAvailableFonts(String fontsFolder, String storage) throws ApiException {
        try {
            ApiResponse<FontsData> resp = getAvailableFontsWithHttpInfo(fontsFolder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FontsData> resp = getAvailableFontsWithHttpInfo(fontsFolder, storage);
            return resp.getData();
        }
    }

    /**
     * Returns presentation fonts info.
     * 
     * @param fontsFolder Storage folder for custom fonts. 
     * @param storage Storage for custom fonts. 
     * @return ApiResponse&lt;FontsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FontsData> getAvailableFontsWithHttpInfo(String fontsFolder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getAvailableFontsCall(fontsFolder, storage, null, null);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Returns presentation fonts info. (asynchronously)
     * 
     * @param fontsFolder Storage folder for custom fonts. 
     * @param storage Storage for custom fonts. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAvailableFontsAsync(String fontsFolder, String storage, final ApiCallback<FontsData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAvailableFontsCall(fontsFolder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getBackground
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBackgroundCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getBackground(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getBackground(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide background info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideBackground getBackground(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideBackground> resp = getBackgroundWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideBackground> resp = getBackgroundWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide background info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideBackground> getBackgroundWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getBackgroundCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide background info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBackgroundAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideBackground> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBackgroundCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getColorScheme
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getColorSchemeCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getColorScheme(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getColorScheme(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/theme/colorScheme"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide theme color scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ColorScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ColorScheme getColorScheme(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ColorScheme> resp = getColorSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ColorScheme> resp = getColorSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide theme color scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ColorScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ColorScheme> getColorSchemeWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getColorSchemeCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<ColorScheme>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide theme color scheme info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getColorSchemeAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<ColorScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getColorSchemeCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ColorScheme>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getCommentAuthors
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCommentAuthorsCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getCommentAuthors(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/comments/authors"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Lists comment authors.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return CommentAuthors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CommentAuthors getCommentAuthors(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<CommentAuthors> resp = getCommentAuthorsWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<CommentAuthors> resp = getCommentAuthorsWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Lists comment authors.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;CommentAuthors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CommentAuthors> getCommentAuthorsWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getCommentAuthorsCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<CommentAuthors>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Lists comment authors. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCommentAuthorsAsync(String name, String password, String folder, String storage, final ApiCallback<CommentAuthors> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCommentAuthorsCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<CommentAuthors>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getDiscUsage
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/disc"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get disc usage
     * 
     * @param storageName Storage name 
     * @return DiscUsage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DiscUsage getDiscUsage(String storageName) throws ApiException {
        try {
            ApiResponse<DiscUsage> resp = getDiscUsageWithHttpInfo(storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DiscUsage> resp = getDiscUsageWithHttpInfo(storageName);
            return resp.getData();
        }
    }

    /**
     * Get disc usage
     * 
     * @param storageName Storage name 
     * @return ApiResponse&lt;DiscUsage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DiscUsage> getDiscUsageWithHttpInfo(String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getDiscUsageCall(storageName, null, null);
        Type returnType = new TypeToken<DiscUsage>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get disc usage (asynchronously)
     * 
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiscUsageAsync(String storageName, final ApiCallback<DiscUsage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiscUsageCall(storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DiscUsage>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperties getDocumentProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperties> resp = getDocumentPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperties> resp = getDocumentPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation document properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperties> getDocumentPropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation document properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<DocumentProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentProperty
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyCall(String name, String propertyName, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getDocumentProperty(Async)");
        }
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling getDocumentProperty(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "propertyName" + "\\}", apiClient.objectToString(propertyName));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperty getDocumentProperty(String name, String propertyName, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperty> resp = getDocumentPropertyWithHttpInfo(name, propertyName, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperty> resp = getDocumentPropertyWithHttpInfo(name, propertyName, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperty> getDocumentPropertyWithHttpInfo(String name, String propertyName, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentPropertyCall(name, propertyName, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperty>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation document property. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentPropertyAsync(String name, String propertyName, String password, String folder, String storage, final ApiCallback<DocumentProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentPropertyCall(name, propertyName, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperty>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getFileVersions
     * @param path File path e.g. '/file.ext' 
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFileVersionsCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/version/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get file versions
     * 
     * @param path File path e.g. '/file.ext' 
     * @param storageName Storage name 
     * @return FileVersions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileVersions getFileVersions(String path, String storageName) throws ApiException {
        try {
            ApiResponse<FileVersions> resp = getFileVersionsWithHttpInfo(path, storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FileVersions> resp = getFileVersionsWithHttpInfo(path, storageName);
            return resp.getData();
        }
    }

    /**
     * Get file versions
     * 
     * @param path File path e.g. '/file.ext' 
     * @param storageName Storage name 
     * @return ApiResponse&lt;FileVersions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileVersions> getFileVersionsWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getFileVersionsCall(path, storageName, null, null);
        Type returnType = new TypeToken<FileVersions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get file versions (asynchronously)
     * 
     * @param path File path e.g. '/file.ext' 
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileVersionsAsync(String path, String storageName, final ApiCallback<FileVersions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileVersionsCall(path, storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FileVersions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getFilesList
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFilesListCall(String path, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get all files and folders within a folder
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @return FilesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesList getFilesList(String path, String storageName) throws ApiException {
        try {
            ApiResponse<FilesList> resp = getFilesListWithHttpInfo(path, storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FilesList> resp = getFilesListWithHttpInfo(path, storageName);
            return resp.getData();
        }
    }

    /**
     * Get all files and folders within a folder
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @return ApiResponse&lt;FilesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesList> getFilesListWithHttpInfo(String path, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = getFilesListCall(path, storageName, null, null);
        Type returnType = new TypeToken<FilesList>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get all files and folders within a folder (asynchronously)
     * 
     * @param path Folder path e.g. '/folder' 
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesListAsync(String path, String storageName, final ApiCallback<FilesList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesListCall(path, storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FilesList>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getFontScheme
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFontSchemeCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFontScheme(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getFontScheme(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/theme/fontScheme"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide theme font scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return FontScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FontScheme getFontScheme(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<FontScheme> resp = getFontSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FontScheme> resp = getFontSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide theme font scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;FontScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FontScheme> getFontSchemeWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getFontSchemeCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<FontScheme>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide theme font scheme info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFontSchemeAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<FontScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFontSchemeCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FontScheme>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getFonts
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFontsCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFonts(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/fonts"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Returns presentation fonts info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return FontsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FontsData getFonts(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<FontsData> resp = getFontsWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FontsData> resp = getFontsWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Returns presentation fonts info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;FontsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FontsData> getFontsWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getFontsCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Returns presentation fonts info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFontsAsync(String name, String password, String folder, String storage, final ApiCallback<FontsData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFontsCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getFontsOnline
     * @param document Document data. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFontsOnlineCall(byte[] document, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling getFontsOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/fonts"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Returns presentation fonts info.
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @return FontsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FontsData getFontsOnline(byte[] document, String password) throws ApiException {
        try {
            ApiResponse<FontsData> resp = getFontsOnlineWithHttpInfo(document, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FontsData> resp = getFontsOnlineWithHttpInfo(document, password);
            return resp.getData();
        }
    }

    /**
     * Returns presentation fonts info.
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;FontsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FontsData> getFontsOnlineWithHttpInfo(byte[] document, String password) throws ApiException {
        com.squareup.okhttp.Call call = getFontsOnlineCall(document, password, null, null);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Returns presentation fonts info. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFontsOnlineAsync(byte[] document, String password, final ApiCallback<FontsData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFontsOnlineCall(document, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getFormatScheme
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFormatSchemeCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getFormatScheme(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getFormatScheme(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/theme/formatScheme"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide theme format scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return FormatScheme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FormatScheme getFormatScheme(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<FormatScheme> resp = getFormatSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FormatScheme> resp = getFormatSchemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide theme format scheme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;FormatScheme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FormatScheme> getFormatSchemeWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getFormatSchemeCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<FormatScheme>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide theme format scheme info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFormatSchemeAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<FormatScheme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFormatSchemeCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FormatScheme>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getLayoutSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLayoutSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLayoutSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getLayoutSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/layoutSlides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation layoutSlide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return LayoutSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutSlide getLayoutSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<LayoutSlide> resp = getLayoutSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<LayoutSlide> resp = getLayoutSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation layoutSlide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;LayoutSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutSlide> getLayoutSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getLayoutSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation layoutSlide info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLayoutSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<LayoutSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLayoutSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getLayoutSlides
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLayoutSlidesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getLayoutSlides(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/layoutSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation layoutSlides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return LayoutSlides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutSlides getLayoutSlides(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<LayoutSlides> resp = getLayoutSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<LayoutSlides> resp = getLayoutSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation layoutSlides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;LayoutSlides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutSlides> getLayoutSlidesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getLayoutSlidesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<LayoutSlides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation layoutSlides info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLayoutSlidesAsync(String name, String password, String folder, String storage, final ApiCallback<LayoutSlides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLayoutSlidesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<LayoutSlides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getMasterSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMasterSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMasterSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getMasterSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/masterSlides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation masterSlide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return MasterSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MasterSlide getMasterSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<MasterSlide> resp = getMasterSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<MasterSlide> resp = getMasterSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation masterSlide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;MasterSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MasterSlide> getMasterSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getMasterSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<MasterSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation masterSlide info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMasterSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<MasterSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMasterSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<MasterSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getMasterSlides
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMasterSlidesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getMasterSlides(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/masterSlides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation masterSlides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return MasterSlides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MasterSlides getMasterSlides(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<MasterSlides> resp = getMasterSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<MasterSlides> resp = getMasterSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation masterSlides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;MasterSlides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MasterSlides> getMasterSlidesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getMasterSlidesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<MasterSlides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation masterSlides info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMasterSlidesAsync(String name, String password, String folder, String storage, final ApiCallback<MasterSlides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMasterSlidesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<MasterSlides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getNotesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read notes slide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlide getNotesSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlide> resp = getNotesSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlide> resp = getNotesSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read notes slide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlide> getNotesSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read notes slide info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<NotesSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getNotesSlideHeaderFooter
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideHeaderFooterCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNotesSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideHeaderFooter(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get header/footer info for the notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlideHeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlideHeaderFooter getNotesSlideHeaderFooter(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlideHeaderFooter> resp = getNotesSlideHeaderFooterWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlideHeaderFooter> resp = getNotesSlideHeaderFooterWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get header/footer info for the notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlideHeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlideHeaderFooter> getNotesSlideHeaderFooterWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideHeaderFooterCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlideHeaderFooter>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get header/footer info for the notes slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideHeaderFooterAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<NotesSlideHeaderFooter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideHeaderFooterCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlideHeaderFooter>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getNotesSlideOnline
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideOnlineCall(byte[] document, Integer slideIndex, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling getNotesSlideOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getNotesSlideOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read notes slide info.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlide getNotesSlideOnline(byte[] document, Integer slideIndex, String password) throws ApiException {
        try {
            ApiResponse<NotesSlide> resp = getNotesSlideOnlineWithHttpInfo(document, slideIndex, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlide> resp = getNotesSlideOnlineWithHttpInfo(document, slideIndex, password);
            return resp.getData();
        }
    }

    /**
     * Read notes slide info.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlide> getNotesSlideOnlineWithHttpInfo(byte[] document, Integer slideIndex, String password) throws ApiException {
        com.squareup.okhttp.Call call = getNotesSlideOnlineCall(document, slideIndex, password, null, null);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read notes slide info. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotesSlideOnlineAsync(byte[] document, Integer slideIndex, String password, final ApiCallback<NotesSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNotesSlideOnlineCall(document, slideIndex, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read shape paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph getParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = getParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = getParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read shape paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> getParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read shape paragraph info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getParagraphEffective
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphEffectiveCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getParagraphEffective(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getParagraphEffective(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getParagraphEffective(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getParagraphEffective(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/effective"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read effective paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph getParagraphEffective(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = getParagraphEffectiveWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = getParagraphEffectiveWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read effective paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> getParagraphEffectiveWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getParagraphEffectiveCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read effective paragraph info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParagraphEffectiveAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphEffectiveCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getParagraphRectangle
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphRectangleCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getParagraphRectangle(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getParagraphRectangle(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getParagraphRectangle(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getParagraphRectangle(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/bounds"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return TextBounds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextBounds getParagraphRectangle(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<TextBounds> resp = getParagraphRectangleWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<TextBounds> resp = getParagraphRectangleWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;TextBounds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextBounds> getParagraphRectangleWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getParagraphRectangleCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<TextBounds>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParagraphRectangleAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<TextBounds> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphRectangleCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<TextBounds>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getParagraphs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getParagraphsCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs getParagraphs(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = getParagraphsWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = getParagraphsWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read shape paragraphs info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> getParagraphsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getParagraphsCall(name, slideIndex, shapeIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read shape paragraphs info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getParagraphsAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getParagraphsCall(name, slideIndex, shapeIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getPlaceholder
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param placeholderIndex Placeholder index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlaceholderCall(String name, Integer slideIndex, Integer placeholderIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPlaceholder(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getPlaceholder(Async)");
        }
        // verify the required parameter 'placeholderIndex' is set
        if (placeholderIndex == null) {
            throw new ApiException("Missing the required parameter 'placeholderIndex' when calling getPlaceholder(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/placeholders/{placeholderIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "placeholderIndex" + "\\}", apiClient.objectToString(placeholderIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide placeholder info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param placeholderIndex Placeholder index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Placeholder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Placeholder getPlaceholder(String name, Integer slideIndex, Integer placeholderIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Placeholder> resp = getPlaceholderWithHttpInfo(name, slideIndex, placeholderIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Placeholder> resp = getPlaceholderWithHttpInfo(name, slideIndex, placeholderIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide placeholder info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param placeholderIndex Placeholder index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Placeholder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Placeholder> getPlaceholderWithHttpInfo(String name, Integer slideIndex, Integer placeholderIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPlaceholderCall(name, slideIndex, placeholderIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Placeholder>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide placeholder info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param placeholderIndex Placeholder index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlaceholderAsync(String name, Integer slideIndex, Integer placeholderIndex, String password, String folder, String storage, final ApiCallback<Placeholder> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlaceholderCall(name, slideIndex, placeholderIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Placeholder>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getPlaceholders
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlaceholdersCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPlaceholders(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getPlaceholders(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/placeholders"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide placeholders info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Placeholders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Placeholders getPlaceholders(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Placeholders> resp = getPlaceholdersWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Placeholders> resp = getPlaceholdersWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide placeholders info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Placeholders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Placeholders> getPlaceholdersWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPlaceholdersCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Placeholders>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide placeholders info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlaceholdersAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Placeholders> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPlaceholdersCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Placeholders>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getPortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling getPortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion getPortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portion> resp = getPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = getPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> getPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getPortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portion info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getPortionEffective
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortionEffectiveCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPortionEffective(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getPortionEffective(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getPortionEffective(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getPortionEffective(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling getPortionEffective(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/effective"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read effective portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion getPortionEffective(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portion> resp = getPortionEffectiveWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = getPortionEffectiveWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read effective portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> getPortionEffectiveWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getPortionEffectiveCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read effective portion info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortionEffectiveAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortionEffectiveCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getPortionRectangle
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortionRectangleCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPortionRectangle(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getPortionRectangle(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getPortionRectangle(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getPortionRectangle(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling getPortionRectangle(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/bounds"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return TextBounds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextBounds getPortionRectangle(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<TextBounds> resp = getPortionRectangleWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<TextBounds> resp = getPortionRectangleWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;TextBounds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextBounds> getPortionRectangleWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPortionRectangleCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<TextBounds>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Return coordinates of rect that bounds paragraph. The rect includes all the lines of text in paragraph, including empty ones. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortionRectangleAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<TextBounds> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortionRectangleCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<TextBounds>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getPortions
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortionsCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getPortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getPortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getPortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portions info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions getPortions(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portions> resp = getPortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = getPortionsWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portions info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> getPortionsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getPortionsCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portions info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortionsAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortionsCall(name, slideIndex, shapeIndex, paragraphIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getPresentation
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPresentationCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPresentation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document getPresentation(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = getPresentationWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = getPresentationWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> getPresentationWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPresentationCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPresentationAsync(String name, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPresentationCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getPresentationImages
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPresentationImagesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPresentationImages(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation images info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Images
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Images getPresentationImages(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Images> resp = getPresentationImagesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Images> resp = getPresentationImagesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation images info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Images&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Images> getPresentationImagesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPresentationImagesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<Images>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation images info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPresentationImagesAsync(String name, String password, String folder, String storage, final ApiCallback<Images> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPresentationImagesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Images>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getPresentationTextItems
     * @param name Document name. (required)
     * @param withEmpty True to incude empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPresentationTextItemsCall(String name, Boolean withEmpty, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPresentationTextItems(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/textItems"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "withEmpty", withEmpty);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Extract presentation text items.
     * 
     * @param name Document name. (required)
     * @param withEmpty True to incude empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return TextItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItems getPresentationTextItems(String name, Boolean withEmpty, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<TextItems> resp = getPresentationTextItemsWithHttpInfo(name, withEmpty, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<TextItems> resp = getPresentationTextItemsWithHttpInfo(name, withEmpty, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Extract presentation text items.
     * 
     * @param name Document name. (required)
     * @param withEmpty True to incude empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;TextItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItems> getPresentationTextItemsWithHttpInfo(String name, Boolean withEmpty, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getPresentationTextItemsCall(name, withEmpty, password, folder, storage, null, null);
        Type returnType = new TypeToken<TextItems>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Extract presentation text items. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param withEmpty True to incude empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPresentationTextItemsAsync(String name, Boolean withEmpty, String password, String folder, String storage, final ApiCallback<TextItems> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPresentationTextItemsCall(name, withEmpty, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<TextItems>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getProtectionProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProtectionPropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getProtectionProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation protection properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ProtectionProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProtectionProperties getProtectionProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ProtectionProperties> resp = getProtectionPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ProtectionProperties> resp = getProtectionPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation protection properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ProtectionProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProtectionProperties> getProtectionPropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getProtectionPropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation protection properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProtectionPropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<ProtectionProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProtectionPropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSections
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSectionsCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSections(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation sections info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections getSections(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = getSectionsWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = getSectionsWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation sections info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> getSectionsWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSectionsCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation sections info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSectionsAsync(String name, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSectionsCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShapeCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide shape info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase getShape(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = getShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = getShapeWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read slide shape info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> getShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getShapeCall(name, slideIndex, shapeIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide shape info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShapeAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, String subShape, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShapeCall(name, slideIndex, shapeIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getShapeGeometryPath
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShapeGeometryPathCall(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getShapeGeometryPath(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getShapeGeometryPath(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getShapeGeometryPath(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/geometryPath"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Returns geometry path of the shape
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return GeometryPaths
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeometryPaths getShapeGeometryPath(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<GeometryPaths> resp = getShapeGeometryPathWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<GeometryPaths> resp = getShapeGeometryPathWithHttpInfo(name, slideIndex, shapeIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Returns geometry path of the shape
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;GeometryPaths&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeometryPaths> getShapeGeometryPathWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getShapeGeometryPathCall(name, slideIndex, shapeIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<GeometryPaths>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Returns geometry path of the shape (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShapeGeometryPathAsync(String name, Integer slideIndex, Integer shapeIndex, String password, String folder, String storage, final ApiCallback<GeometryPaths> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShapeGeometryPathCall(name, slideIndex, shapeIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<GeometryPaths>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getShapes
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param shapeType Shape type. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShapesCall(String name, Integer slideIndex, String password, String folder, String storage, ShapeType shapeType, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "shapeType", shapeType);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param shapeType Shape type. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes getShapes(String name, Integer slideIndex, String password, String folder, String storage, ShapeType shapeType, String subShape) throws ApiException {
        try {
            ApiResponse<Shapes> resp = getShapesWithHttpInfo(name, slideIndex, password, folder, storage, shapeType, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = getShapesWithHttpInfo(name, slideIndex, password, folder, storage, shapeType, subShape);
            return resp.getData();
        }
    }

    /**
     * Read slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param shapeType Shape type. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> getShapesWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage, ShapeType shapeType, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getShapesCall(name, slideIndex, password, folder, storage, shapeType, subShape, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide shapes info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param shapeType Shape type. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShapesAsync(String name, Integer slideIndex, String password, String folder, String storage, ShapeType shapeType, String subShape, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getShapesCall(name, slideIndex, password, folder, storage, shapeType, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation slide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slide getSlide(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slide> resp = getSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slide> resp = getSlideWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation slide info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slide> getSlideWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation slide info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Slide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSlideComments
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideCommentsCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideComments(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideComments(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/comments"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation slide comments.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideComments
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideComments getSlideComments(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideComments> resp = getSlideCommentsWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideComments> resp = getSlideCommentsWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation slide comments.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideComments&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideComments> getSlideCommentsWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideCommentsCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideComments>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation slide comments. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideCommentsAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<SlideComments> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideCommentsCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideComments>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSlideHeaderFooter
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideHeaderFooterCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideHeaderFooter(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get footer info for the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return HeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HeaderFooter getSlideHeaderFooter(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<HeaderFooter> resp = getSlideHeaderFooterWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<HeaderFooter> resp = getSlideHeaderFooterWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get footer info for the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;HeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HeaderFooter> getSlideHeaderFooterWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideHeaderFooterCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<HeaderFooter>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get footer info for the slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideHeaderFooterAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<HeaderFooter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideHeaderFooterCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<HeaderFooter>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSlideImages
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideImagesCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideImages(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideImages(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/images"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide images info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Images
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Images getSlideImages(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Images> resp = getSlideImagesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Images> resp = getSlideImagesWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide images info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Images&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Images> getSlideImagesWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideImagesCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Images>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide images info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideImagesAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Images> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideImagesCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Images>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSlideProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlidePropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slideProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation slide properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideProperties getSlideProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideProperties> resp = getSlidePropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideProperties> resp = getSlidePropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation slide properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideProperties> getSlidePropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlidePropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation slide properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlidePropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<SlideProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlidePropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSlideShowProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideShowPropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideShowProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slideShowProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation slide show properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideShowProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideShowProperties getSlideShowProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideShowProperties> resp = getSlideShowPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideShowProperties> resp = getSlideShowPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation slide show properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideShowProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideShowProperties> getSlideShowPropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideShowPropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideShowProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation slide show properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideShowPropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<SlideShowProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideShowPropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideShowProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSlideTextItems
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param withEmpty True to include empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlideTextItemsCall(String name, Integer slideIndex, Boolean withEmpty, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlideTextItems(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSlideTextItems(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/textItems"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "withEmpty", withEmpty);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Extract slide text items.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param withEmpty True to include empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return TextItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TextItems getSlideTextItems(String name, Integer slideIndex, Boolean withEmpty, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<TextItems> resp = getSlideTextItemsWithHttpInfo(name, slideIndex, withEmpty, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<TextItems> resp = getSlideTextItemsWithHttpInfo(name, slideIndex, withEmpty, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Extract slide text items.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param withEmpty True to include empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;TextItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TextItems> getSlideTextItemsWithHttpInfo(String name, Integer slideIndex, Boolean withEmpty, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlideTextItemsCall(name, slideIndex, withEmpty, password, folder, storage, null, null);
        Type returnType = new TypeToken<TextItems>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Extract slide text items. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param withEmpty True to include empty items. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlideTextItemsAsync(String name, Integer slideIndex, Boolean withEmpty, String password, String folder, String storage, final ApiCallback<TextItems> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlideTextItemsCall(name, slideIndex, withEmpty, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<TextItems>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSlides
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSlidesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSlides(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation slides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides getSlides(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = getSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = getSlidesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation slides info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> getSlidesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSlidesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation slides info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSlidesAsync(String name, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSlidesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSpecialSlideAnimation
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param paragraphIndex Paragraph index. If specified, only effects related to that paragraph are returned. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideAnimationCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSpecialSlideAnimation(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSpecialSlideAnimation(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling getSpecialSlideAnimation(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "shapeIndex", shapeIndex);
        apiClient.addQueryParameter(queryParams, "paragraphIndex", paragraphIndex);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read special slide (master, layout, notes) animation effects.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param paragraphIndex Paragraph index. If specified, only effects related to that paragraph are returned. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation getSpecialSlideAnimation(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = getSpecialSlideAnimationWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = getSpecialSlideAnimationWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read special slide (master, layout, notes) animation effects.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param paragraphIndex Paragraph index. If specified, only effects related to that paragraph are returned. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> getSpecialSlideAnimationWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getSpecialSlideAnimationCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read special slide (master, layout, notes) animation effects. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. If specified, only effects related to that shape are returned. 
     * @param paragraphIndex Paragraph index. If specified, only effects related to that paragraph are returned. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideAnimationAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecialSlideAnimationCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSpecialSlideParagraph
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideParagraphCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling getSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getSpecialSlideParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read shape paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph getSpecialSlideParagraph(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = getSpecialSlideParagraphWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = getSpecialSlideParagraphWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read shape paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> getSpecialSlideParagraphWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getSpecialSlideParagraphCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read shape paragraph info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideParagraphAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecialSlideParagraphCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSpecialSlideParagraphs
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideParagraphsCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSpecialSlideParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSpecialSlideParagraphs(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling getSpecialSlideParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSpecialSlideParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read special shape paragraphs info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs getSpecialSlideParagraphs(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = getSpecialSlideParagraphsWithHttpInfo(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = getSpecialSlideParagraphsWithHttpInfo(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read special shape paragraphs info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> getSpecialSlideParagraphsWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getSpecialSlideParagraphsCall(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read special shape paragraphs info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideParagraphsAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecialSlideParagraphsCall(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSpecialSlidePortion
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlidePortionCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling getSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling getSpecialSlidePortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion getSpecialSlidePortion(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portion> resp = getSpecialSlidePortionWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = getSpecialSlidePortionWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portion info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> getSpecialSlidePortionWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getSpecialSlidePortionCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portion info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlidePortionAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, String subShape, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecialSlidePortionCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSpecialSlidePortions
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlidePortionsCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSpecialSlidePortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSpecialSlidePortions(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling getSpecialSlidePortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSpecialSlidePortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getSpecialSlidePortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read paragraph portions info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions getSpecialSlidePortions(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portions> resp = getSpecialSlidePortionsWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = getSpecialSlidePortionsWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read paragraph portions info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> getSpecialSlidePortionsWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getSpecialSlidePortionsCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read paragraph portions info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlidePortionsAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, String password, String folder, String storage, String subShape, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecialSlidePortionsCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSpecialSlideShape
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideShapeCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling getSpecialSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getSpecialSlideShape(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read special slide shape info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase getSpecialSlideShape(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = getSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = getSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read special slide shape info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> getSpecialSlideShapeWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read special slide shape info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideShapeAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, String password, String folder, String storage, String subShape, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getSpecialSlideShapes
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideShapesCall(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSpecialSlideShapes(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getSpecialSlideShapes(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling getSpecialSlideShapes(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read special slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes getSpecialSlideShapes(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Shapes> resp = getSpecialSlideShapesWithHttpInfo(name, slideIndex, slideType, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = getSpecialSlideShapesWithHttpInfo(name, slideIndex, slideType, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Read special slide shapes info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> getSpecialSlideShapesWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = getSpecialSlideShapesCall(name, slideIndex, slideType, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read special slide shapes info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpecialSlideShapesAsync(String name, Integer slideIndex, SpecialSlideType slideType, String password, String folder, String storage, String subShape, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpecialSlideShapesCall(name, slideIndex, slideType, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getTableCellParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCellParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getTableCellParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getTableCellParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getTableCellParagraph(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling getTableCellParagraph(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling getTableCellParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getTableCellParagraph(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Returns paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph getTableCellParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = getTableCellParagraphWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = getTableCellParagraphWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Returns paragraph info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> getTableCellParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getTableCellParagraphCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Returns paragraph info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableCellParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableCellParagraphCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getTableCellParagraphs
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCellParagraphsCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getTableCellParagraphs(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getTableCellParagraphs(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getTableCellParagraphs(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling getTableCellParagraphs(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling getTableCellParagraphs(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Returns table cell paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraphs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraphs getTableCellParagraphs(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraphs> resp = getTableCellParagraphsWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraphs> resp = getTableCellParagraphsWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Returns table cell paragraphs.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraphs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraphs> getTableCellParagraphsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getTableCellParagraphsCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Returns table cell paragraphs. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableCellParagraphsAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, String password, String folder, String storage, final ApiCallback<Paragraphs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableCellParagraphsCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraphs>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getTableCellPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCellPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getTableCellPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getTableCellPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getTableCellPortion(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling getTableCellPortion(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling getTableCellPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getTableCellPortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling getTableCellPortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Returns table cell portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion getTableCellPortion(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = getTableCellPortionWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = getTableCellPortionWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Returns table cell portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> getTableCellPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getTableCellPortionCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Returns table cell portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableCellPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableCellPortionCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getTableCellPortions
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTableCellPortionsCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getTableCellPortions(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getTableCellPortions(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling getTableCellPortions(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling getTableCellPortions(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling getTableCellPortions(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling getTableCellPortions(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Returns table cell portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portions getTableCellPortions(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portions> resp = getTableCellPortionsWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portions> resp = getTableCellPortionsWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Returns table cell portions.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portions> getTableCellPortionsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getTableCellPortionsCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portions>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Returns table cell portions. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTableCellPortionsAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, String password, String folder, String storage, final ApiCallback<Portions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTableCellPortionsCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portions>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getTheme
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThemeCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getTheme(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling getTheme(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/theme"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read slide theme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Theme
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Theme getTheme(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Theme> resp = getThemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Theme> resp = getThemeWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read slide theme info.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Theme&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Theme> getThemeWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getThemeCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<Theme>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read slide theme info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThemeAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<Theme> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThemeCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Theme>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getVbaModule
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVbaModuleCall(String name, Integer moduleIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getVbaModule(Async)");
        }
        // verify the required parameter 'moduleIndex' is set
        if (moduleIndex == null) {
            throw new ApiException("Missing the required parameter 'moduleIndex' when calling getVbaModule(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/vbaProject/modules/{moduleIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "moduleIndex" + "\\}", apiClient.objectToString(moduleIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get VBA module info.
     * 
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return VbaModule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VbaModule getVbaModule(String name, Integer moduleIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<VbaModule> resp = getVbaModuleWithHttpInfo(name, moduleIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<VbaModule> resp = getVbaModuleWithHttpInfo(name, moduleIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get VBA module info.
     * 
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;VbaModule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VbaModule> getVbaModuleWithHttpInfo(String name, Integer moduleIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getVbaModuleCall(name, moduleIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<VbaModule>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get VBA module info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVbaModuleAsync(String name, Integer moduleIndex, String password, String folder, String storage, final ApiCallback<VbaModule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVbaModuleCall(name, moduleIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<VbaModule>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getVbaProject
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVbaProjectCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getVbaProject(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/vbaProject"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get VBA project info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return VbaProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VbaProject getVbaProject(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<VbaProject> resp = getVbaProjectWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<VbaProject> resp = getVbaProjectWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get VBA project info.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;VbaProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VbaProject> getVbaProjectWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getVbaProjectCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<VbaProject>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get VBA project info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVbaProjectAsync(String name, String password, String folder, String storage, final ApiCallback<VbaProject> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVbaProjectCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<VbaProject>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for getViewProperties
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getViewPropertiesCall(String name, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getViewProperties(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/viewProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Read presentation view properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ViewProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewProperties getViewProperties(String name, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ViewProperties> resp = getViewPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ViewProperties> resp = getViewPropertiesWithHttpInfo(name, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Read presentation view properties.
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ViewProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewProperties> getViewPropertiesWithHttpInfo(String name, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = getViewPropertiesCall(name, password, folder, storage, null, null);
        Type returnType = new TypeToken<ViewProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Read presentation view properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getViewPropertiesAsync(String name, String password, String folder, String storage, final ApiCallback<ViewProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getViewPropertiesCall(name, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ViewProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for highlightShapeRegex
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param regex Regular expression. (required)
     * @param color Highlighting color. (required)
     * @param wholeWordsOnly Match only whole words. 
     * @param ignoreCase True to search ignoring char case. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call highlightShapeRegexCall(String name, Integer slideIndex, Integer shapeIndex, String regex, String color, Boolean wholeWordsOnly, Boolean ignoreCase, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling highlightShapeRegex(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling highlightShapeRegex(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling highlightShapeRegex(Async)");
        }
        // verify the required parameter 'regex' is set
        if (regex == null) {
            throw new ApiException("Missing the required parameter 'regex' when calling highlightShapeRegex(Async)");
        }
        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling highlightShapeRegex(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/highlightRegex"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "regex", regex);
        apiClient.addQueryParameter(queryParams, "color", color);
        apiClient.addQueryParameter(queryParams, "wholeWordsOnly", wholeWordsOnly);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Highlight all matches of sample in text frame text using specified color.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param regex Regular expression. (required)
     * @param color Highlighting color. (required)
     * @param wholeWordsOnly Match only whole words. 
     * @param ignoreCase True to search ignoring char case. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shape
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shape highlightShapeRegex(String name, Integer slideIndex, Integer shapeIndex, String regex, String color, Boolean wholeWordsOnly, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shape> resp = highlightShapeRegexWithHttpInfo(name, slideIndex, shapeIndex, regex, color, wholeWordsOnly, ignoreCase, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shape> resp = highlightShapeRegexWithHttpInfo(name, slideIndex, shapeIndex, regex, color, wholeWordsOnly, ignoreCase, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Highlight all matches of sample in text frame text using specified color.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param regex Regular expression. (required)
     * @param color Highlighting color. (required)
     * @param wholeWordsOnly Match only whole words. 
     * @param ignoreCase True to search ignoring char case. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shape&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shape> highlightShapeRegexWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String regex, String color, Boolean wholeWordsOnly, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = highlightShapeRegexCall(name, slideIndex, shapeIndex, regex, color, wholeWordsOnly, ignoreCase, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shape>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Highlight all matches of sample in text frame text using specified color. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param regex Regular expression. (required)
     * @param color Highlighting color. (required)
     * @param wholeWordsOnly Match only whole words. 
     * @param ignoreCase True to search ignoring char case. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call highlightShapeRegexAsync(String name, Integer slideIndex, Integer shapeIndex, String regex, String color, Boolean wholeWordsOnly, Boolean ignoreCase, String password, String folder, String storage, final ApiCallback<Shape> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = highlightShapeRegexCall(name, slideIndex, shapeIndex, regex, color, wholeWordsOnly, ignoreCase, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shape>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for highlightShapeText
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param text Text sample to highlight. (required)
     * @param color Highlighting color. (required)
     * @param wholeWordsOnly Match only whole words. 
     * @param ignoreCase True to search ignoring char case. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call highlightShapeTextCall(String name, Integer slideIndex, Integer shapeIndex, String text, String color, Boolean wholeWordsOnly, Boolean ignoreCase, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling highlightShapeText(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling highlightShapeText(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling highlightShapeText(Async)");
        }
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling highlightShapeText(Async)");
        }
        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling highlightShapeText(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/highlightText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "text", text);
        apiClient.addQueryParameter(queryParams, "color", color);
        apiClient.addQueryParameter(queryParams, "wholeWordsOnly", wholeWordsOnly);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Highlight all matches of sample in text frame text using specified color.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param text Text sample to highlight. (required)
     * @param color Highlighting color. (required)
     * @param wholeWordsOnly Match only whole words. 
     * @param ignoreCase True to search ignoring char case. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Shape
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shape highlightShapeText(String name, Integer slideIndex, Integer shapeIndex, String text, String color, Boolean wholeWordsOnly, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shape> resp = highlightShapeTextWithHttpInfo(name, slideIndex, shapeIndex, text, color, wholeWordsOnly, ignoreCase, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shape> resp = highlightShapeTextWithHttpInfo(name, slideIndex, shapeIndex, text, color, wholeWordsOnly, ignoreCase, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Highlight all matches of sample in text frame text using specified color.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param text Text sample to highlight. (required)
     * @param color Highlighting color. (required)
     * @param wholeWordsOnly Match only whole words. 
     * @param ignoreCase True to search ignoring char case. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Shape&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shape> highlightShapeTextWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, String text, String color, Boolean wholeWordsOnly, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = highlightShapeTextCall(name, slideIndex, shapeIndex, text, color, wholeWordsOnly, ignoreCase, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shape>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Highlight all matches of sample in text frame text using specified color. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param text Text sample to highlight. (required)
     * @param color Highlighting color. (required)
     * @param wholeWordsOnly Match only whole words. 
     * @param ignoreCase True to search ignoring char case. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call highlightShapeTextAsync(String name, Integer slideIndex, Integer shapeIndex, String text, String color, Boolean wholeWordsOnly, Boolean ignoreCase, String password, String folder, String storage, final ApiCallback<Shape> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = highlightShapeTextCall(name, slideIndex, shapeIndex, text, color, wholeWordsOnly, ignoreCase, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shape>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for importFromHtml
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importFromHtmlCall(String name, String html, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling importFromHtml(Async)");
        }
        Object postBody = html;

        // create path and map variables
        String methodPath = "/slides/{name}/fromHtml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create presentation document from html.
     * 
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document importFromHtml(String name, String html, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = importFromHtmlWithHttpInfo(name, html, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = importFromHtmlWithHttpInfo(name, html, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create presentation document from html.
     * 
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> importFromHtmlWithHttpInfo(String name, String html, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = importFromHtmlCall(name, html, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create presentation document from html. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param html HTML data. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importFromHtmlAsync(String name, String html, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importFromHtmlCall(name, html, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for importFromPdf
     * @param name Document name. (required)
     * @param pdf PDF data. (required)
     * @param options Import options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importFromPdfCall(String name, byte[] pdf, PdfImportOptions options, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling importFromPdf(Async)");
        }
        // verify the required parameter 'pdf' is set
        if (pdf == null) {
            throw new ApiException("Missing the required parameter 'pdf' when calling importFromPdf(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/fromPdf"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (pdf != null)
        formParams.put("pdf", pdf);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     * 
     * @param name Document name. (required)
     * @param pdf PDF data. (required)
     * @param options Import options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document importFromPdf(String name, byte[] pdf, PdfImportOptions options, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = importFromPdfWithHttpInfo(name, pdf, options, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = importFromPdfWithHttpInfo(name, pdf, options, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation.
     * 
     * @param name Document name. (required)
     * @param pdf PDF data. (required)
     * @param options Import options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> importFromPdfWithHttpInfo(String name, byte[] pdf, PdfImportOptions options, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = importFromPdfCall(name, pdf, options, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Create presentation document from pdf or append pdf to an existing presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param pdf PDF data. (required)
     * @param options Import options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importFromPdfAsync(String name, byte[] pdf, PdfImportOptions options, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importFromPdfCall(name, pdf, options, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for importShapesFromSvg
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param image SVG image data. 
     * @param x The X coordinate of the imported group of shapes (0 is default if not specified). 
     * @param y The Y coordinate of the imported group of shapes (0 is default if not specified). 
     * @param width The width of the imported group of shapes (default is SVG image width). 
     * @param height The height of the imported group of shapes (default is SVG image width). 
     * @param shapes Indexes of shapes to import. All shapes are imported if not specified. 
     * @param group If true, the set of shapes will be imported as a one group shape. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importShapesFromSvgCall(String name, Integer slideIndex, byte[] image, Integer x, Integer y, Integer width, Integer height, List<Integer> shapes, Boolean group, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling importShapesFromSvg(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling importShapesFromSvg(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/fromSvg"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "x", x);
        apiClient.addQueryParameter(queryParams, "y", y);
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "shapes", shapes);
        apiClient.addQueryParameter(queryParams, "group", group);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (image != null)
        formParams.put("image", image);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Imports shapes from SVG file.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param image SVG image data. 
     * @param x The X coordinate of the imported group of shapes (0 is default if not specified). 
     * @param y The Y coordinate of the imported group of shapes (0 is default if not specified). 
     * @param width The width of the imported group of shapes (default is SVG image width). 
     * @param height The height of the imported group of shapes (default is SVG image width). 
     * @param shapes Indexes of shapes to import. All shapes are imported if not specified. 
     * @param group If true, the set of shapes will be imported as a one group shape. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @return Shapes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Shapes importShapesFromSvg(String name, Integer slideIndex, byte[] image, Integer x, Integer y, Integer width, Integer height, List<Integer> shapes, Boolean group, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Shapes> resp = importShapesFromSvgWithHttpInfo(name, slideIndex, image, x, y, width, height, shapes, group, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Shapes> resp = importShapesFromSvgWithHttpInfo(name, slideIndex, image, x, y, width, height, shapes, group, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Imports shapes from SVG file.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param image SVG image data. 
     * @param x The X coordinate of the imported group of shapes (0 is default if not specified). 
     * @param y The Y coordinate of the imported group of shapes (0 is default if not specified). 
     * @param width The width of the imported group of shapes (default is SVG image width). 
     * @param height The height of the imported group of shapes (default is SVG image width). 
     * @param shapes Indexes of shapes to import. All shapes are imported if not specified. 
     * @param group If true, the set of shapes will be imported as a one group shape. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @return ApiResponse&lt;Shapes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Shapes> importShapesFromSvgWithHttpInfo(String name, Integer slideIndex, byte[] image, Integer x, Integer y, Integer width, Integer height, List<Integer> shapes, Boolean group, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = importShapesFromSvgCall(name, slideIndex, image, x, y, width, height, shapes, group, password, folder, storage, null, null);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Imports shapes from SVG file. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param image SVG image data. 
     * @param x The X coordinate of the imported group of shapes (0 is default if not specified). 
     * @param y The Y coordinate of the imported group of shapes (0 is default if not specified). 
     * @param width The width of the imported group of shapes (default is SVG image width). 
     * @param height The height of the imported group of shapes (default is SVG image width). 
     * @param shapes Indexes of shapes to import. All shapes are imported if not specified. 
     * @param group If true, the set of shapes will be imported as a one group shape. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importShapesFromSvgAsync(String name, Integer slideIndex, byte[] image, Integer x, Integer y, Integer width, Integer height, List<Integer> shapes, Boolean group, String password, String folder, String storage, final ApiCallback<Shapes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importShapesFromSvgCall(name, slideIndex, image, x, y, width, height, shapes, group, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Shapes>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for merge
     * @param name Document name. (required)
     * @param request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeCall(String name, PresentationsMergeRequest request, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling merge(Async)");
        }
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling merge(Async)");
        }
        Object postBody = request;

        // create path and map variables
        String methodPath = "/slides/{name}/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter.
     * 
     * @param name Document name. (required)
     * @param request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document merge(String name, PresentationsMergeRequest request, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = mergeWithHttpInfo(name, request, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = mergeWithHttpInfo(name, request, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter.
     * 
     * @param name Document name. (required)
     * @param request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> mergeWithHttpInfo(String name, PresentationsMergeRequest request, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = mergeCall(name, request, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Merge the presentation with other presentations specified in the request parameter. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param request PresentationsMergeRequest with a list of presentations to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeAsync(String name, PresentationsMergeRequest request, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeCall(name, request, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for mergeAndSaveOnline
     * @param outPath Path to save result. (required)
     * @param files Files to merge 
     * @param request Merge request. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeAndSaveOnlineCall(String outPath, List<FileInfo> files, OrderedMergeRequest request, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling mergeAndSaveOnline(Async)");
        }
        Object postBody = request;

        // create path and map variables
        String methodPath = "/slides/merge"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (files != null)
        formParams.put("files", files);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     * 
     * @param outPath Path to save result. (required)
     * @param files Files to merge 
     * @param request Merge request. 
     * @param storage Document storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void mergeAndSaveOnline(String outPath, List<FileInfo> files, OrderedMergeRequest request, String storage) throws ApiException {
        try {
            mergeAndSaveOnlineWithHttpInfo(outPath, files, request, storage);
        } catch (NeedRepeatRequestException e) {
            mergeAndSaveOnlineWithHttpInfo(outPath, files, request, storage);
        }
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage.
     * 
     * @param outPath Path to save result. (required)
     * @param files Files to merge 
     * @param request Merge request. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> mergeAndSaveOnlineWithHttpInfo(String outPath, List<FileInfo> files, OrderedMergeRequest request, String storage) throws ApiException {
        com.squareup.okhttp.Call call = mergeAndSaveOnlineCall(outPath, files, request, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Result will be save in the storage. (asynchronously)
     * 
     * @param outPath Path to save result. (required)
     * @param files Files to merge 
     * @param request Merge request. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeAndSaveOnlineAsync(String outPath, List<FileInfo> files, OrderedMergeRequest request, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeAndSaveOnlineCall(outPath, files, request, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for mergeOnline
     * @param files Files to merge 
     * @param request Merge request. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeOnlineCall(List<FileInfo> files, OrderedMergeRequest request, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = request;

        // create path and map variables
        String methodPath = "/slides/merge"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (files != null)
        formParams.put("files", files);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     * 
     * @param files Files to merge 
     * @param request Merge request. 
     * @param storage Document storage. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File mergeOnline(List<FileInfo> files, OrderedMergeRequest request, String storage) throws ApiException {
        try {
            ApiResponse<File> resp = mergeOnlineWithHttpInfo(files, request, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = mergeOnlineWithHttpInfo(files, request, storage);
            return resp.getData();
        }
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response. 
     * 
     * @param files Files to merge 
     * @param request Merge request. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> mergeOnlineWithHttpInfo(List<FileInfo> files, OrderedMergeRequest request, String storage) throws ApiException {
        com.squareup.okhttp.Call call = mergeOnlineCall(files, request, storage, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Merges presentations or some of their slides specified in the request parameter. Returns result file in the response.  (asynchronously)
     * 
     * @param files Files to merge 
     * @param request Merge request. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeOnlineAsync(List<FileInfo> files, OrderedMergeRequest request, String storage, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeOnlineCall(files, request, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for mergeTableCells
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param tableCellMergeOptions Merge settings. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call mergeTableCellsCall(String name, Integer slideIndex, Integer shapeIndex, TableCellMergeOptions tableCellMergeOptions, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling mergeTableCells(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling mergeTableCells(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling mergeTableCells(Async)");
        }
        // verify the required parameter 'tableCellMergeOptions' is set
        if (tableCellMergeOptions == null) {
            throw new ApiException("Missing the required parameter 'tableCellMergeOptions' when calling mergeTableCells(Async)");
        }
        Object postBody = tableCellMergeOptions;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/mergeCells"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Merge table cells.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param tableCellMergeOptions Merge settings. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Table
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Table mergeTableCells(String name, Integer slideIndex, Integer shapeIndex, TableCellMergeOptions tableCellMergeOptions, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Table> resp = mergeTableCellsWithHttpInfo(name, slideIndex, shapeIndex, tableCellMergeOptions, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Table> resp = mergeTableCellsWithHttpInfo(name, slideIndex, shapeIndex, tableCellMergeOptions, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Merge table cells.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param tableCellMergeOptions Merge settings. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Table&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Table> mergeTableCellsWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, TableCellMergeOptions tableCellMergeOptions, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = mergeTableCellsCall(name, slideIndex, shapeIndex, tableCellMergeOptions, password, folder, storage, null, null);
        Type returnType = new TypeToken<Table>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Merge table cells. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param tableCellMergeOptions Merge settings. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call mergeTableCellsAsync(String name, Integer slideIndex, Integer shapeIndex, TableCellMergeOptions tableCellMergeOptions, String password, String folder, String storage, final ApiCallback<Table> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mergeTableCellsCall(name, slideIndex, shapeIndex, tableCellMergeOptions, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Table>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for moveFile
     * @param srcPath Source file path e.g. '/src.ext' (required)
     * @param destPath Destination file path e.g. '/dest.ext' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to move 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFileCall(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling moveFile(Async)");
        }
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling moveFile(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/move/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.objectToString(srcPath));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destPath", destPath);
        apiClient.addQueryParameter(queryParams, "srcStorageName", srcStorageName);
        apiClient.addQueryParameter(queryParams, "destStorageName", destStorageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Move file
     * 
     * @param srcPath Source file path e.g. '/src.ext' (required)
     * @param destPath Destination file path e.g. '/dest.ext' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to move 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveFile(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        try {
            moveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        } catch (NeedRepeatRequestException e) {
            moveFileWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName, versionId);
        }
    }

    /**
     * Move file
     * 
     * @param srcPath Source file path e.g. '/src.ext' (required)
     * @param destPath Destination file path e.g. '/dest.ext' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to move 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveFileWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = moveFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move file (asynchronously)
     * 
     * @param srcPath Source file path e.g. '/src.ext' (required)
     * @param destPath Destination file path e.g. '/dest.ext' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param versionId File version ID to move 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveFileAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, String versionId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFileCall(srcPath, destPath, srcStorageName, destStorageName, versionId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for moveFolder
     * @param srcPath Folder path to move e.g. '/folder' (required)
     * @param destPath Destination folder path to move to e.g '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveFolderCall(String srcPath, String destPath, String srcStorageName, String destStorageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'srcPath' is set
        if (srcPath == null) {
            throw new ApiException("Missing the required parameter 'srcPath' when calling moveFolder(Async)");
        }
        // verify the required parameter 'destPath' is set
        if (destPath == null) {
            throw new ApiException("Missing the required parameter 'destPath' when calling moveFolder(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/folder/move/{srcPath}"
            .replaceAll("\\{" + "srcPath" + "\\}", apiClient.objectToString(srcPath));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destPath", destPath);
        apiClient.addQueryParameter(queryParams, "srcStorageName", srcStorageName);
        apiClient.addQueryParameter(queryParams, "destStorageName", destStorageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Move folder
     * 
     * @param srcPath Folder path to move e.g. '/folder' (required)
     * @param destPath Destination folder path to move to e.g '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void moveFolder(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        try {
            moveFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        } catch (NeedRepeatRequestException e) {
            moveFolderWithHttpInfo(srcPath, destPath, srcStorageName, destStorageName);
        }
    }

    /**
     * Move folder
     * 
     * @param srcPath Folder path to move e.g. '/folder' (required)
     * @param destPath Destination folder path to move to e.g '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> moveFolderWithHttpInfo(String srcPath, String destPath, String srcStorageName, String destStorageName) throws ApiException {
        com.squareup.okhttp.Call call = moveFolderCall(srcPath, destPath, srcStorageName, destStorageName, null, null);
        return apiClient.execute(call);
    }

    /**
     * Move folder (asynchronously)
     * 
     * @param srcPath Folder path to move e.g. '/folder' (required)
     * @param destPath Destination folder path to move to e.g '/dst' (required)
     * @param srcStorageName Source storage name 
     * @param destStorageName Destination storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveFolderAsync(String srcPath, String destPath, String srcStorageName, String destStorageName, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveFolderCall(srcPath, destPath, srcStorageName, destStorageName, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for moveSection
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be reordered. (required)
     * @param newPosition The new position of the reordered section. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveSectionCall(String name, Integer sectionIndex, Integer newPosition, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling moveSection(Async)");
        }
        // verify the required parameter 'sectionIndex' is set
        if (sectionIndex == null) {
            throw new ApiException("Missing the required parameter 'sectionIndex' when calling moveSection(Async)");
        }
        // verify the required parameter 'newPosition' is set
        if (newPosition == null) {
            throw new ApiException("Missing the required parameter 'newPosition' when calling moveSection(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections/{sectionIndex}/move"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "sectionIndex" + "\\}", apiClient.objectToString(sectionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "newPosition", newPosition);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Move presentation section to a specified position.
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be reordered. (required)
     * @param newPosition The new position of the reordered section. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections moveSection(String name, Integer sectionIndex, Integer newPosition, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = moveSectionWithHttpInfo(name, sectionIndex, newPosition, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = moveSectionWithHttpInfo(name, sectionIndex, newPosition, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Move presentation section to a specified position.
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be reordered. (required)
     * @param newPosition The new position of the reordered section. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> moveSectionWithHttpInfo(String name, Integer sectionIndex, Integer newPosition, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = moveSectionCall(name, sectionIndex, newPosition, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Move presentation section to a specified position. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be reordered. (required)
     * @param newPosition The new position of the reordered section. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveSectionAsync(String name, Integer sectionIndex, Integer newPosition, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveSectionCall(name, sectionIndex, newPosition, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for moveSlide
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param newPosition The new position of the reordered slide. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call moveSlideCall(String name, Integer slideIndex, Integer newPosition, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling moveSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling moveSlide(Async)");
        }
        // verify the required parameter 'newPosition' is set
        if (newPosition == null) {
            throw new ApiException("Missing the required parameter 'newPosition' when calling moveSlide(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/move"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "newPosition", newPosition);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Reorder presentation slide position.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param newPosition The new position of the reordered slide. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides moveSlide(String name, Integer slideIndex, Integer newPosition, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = moveSlideWithHttpInfo(name, slideIndex, newPosition, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = moveSlideWithHttpInfo(name, slideIndex, newPosition, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Reorder presentation slide position.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param newPosition The new position of the reordered slide. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> moveSlideWithHttpInfo(String name, Integer slideIndex, Integer newPosition, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = moveSlideCall(name, slideIndex, newPosition, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Reorder presentation slide position. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param newPosition The new position of the reordered slide. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call moveSlideAsync(String name, Integer slideIndex, Integer newPosition, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = moveSlideCall(name, slideIndex, newPosition, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for notesSlideExists
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notesSlideExistsCall(String name, Integer slideIndex, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling notesSlideExists(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling notesSlideExists(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/exist"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return EntityExists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityExists notesSlideExists(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<EntityExists> resp = notesSlideExistsWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<EntityExists> resp = notesSlideExistsWithHttpInfo(name, slideIndex, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;EntityExists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityExists> notesSlideExistsWithHttpInfo(String name, Integer slideIndex, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = notesSlideExistsCall(name, slideIndex, password, folder, storage, null, null);
        Type returnType = new TypeToken<EntityExists>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get info whether a notes slide exists. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notesSlideExistsAsync(String name, Integer slideIndex, String password, String folder, String storage, final ApiCallback<EntityExists> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notesSlideExistsCall(name, slideIndex, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<EntityExists>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for notesSlideExistsOnline
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call notesSlideExistsOnlineCall(byte[] document, Integer slideIndex, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling notesSlideExistsOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling notesSlideExistsOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/notesSlide/exist"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @return EntityExists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public EntityExists notesSlideExistsOnline(byte[] document, Integer slideIndex, String password) throws ApiException {
        try {
            ApiResponse<EntityExists> resp = notesSlideExistsOnlineWithHttpInfo(document, slideIndex, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<EntityExists> resp = notesSlideExistsOnlineWithHttpInfo(document, slideIndex, password);
            return resp.getData();
        }
    }

    /**
     * Get info whether a notes slide exists.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;EntityExists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<EntityExists> notesSlideExistsOnlineWithHttpInfo(byte[] document, Integer slideIndex, String password) throws ApiException {
        com.squareup.okhttp.Call call = notesSlideExistsOnlineCall(document, slideIndex, password, null, null);
        Type returnType = new TypeToken<EntityExists>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Get info whether a notes slide exists. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call notesSlideExistsOnlineAsync(byte[] document, Integer slideIndex, String password, final ApiCallback<EntityExists> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = notesSlideExistsOnlineCall(document, slideIndex, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<EntityExists>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for objectExists
     * @param path File or folder path e.g. '/file.ext' or '/folder' 
     * @param storageName Storage name 
     * @param versionId File version ID 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call objectExistsCall(String path, String storageName, String versionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/exist/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);
        apiClient.addQueryParameter(queryParams, "versionId", versionId);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Check if file or folder exists
     * 
     * @param path File or folder path e.g. '/file.ext' or '/folder' 
     * @param storageName Storage name 
     * @param versionId File version ID 
     * @return ObjectExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ObjectExist objectExists(String path, String storageName, String versionId) throws ApiException {
        try {
            ApiResponse<ObjectExist> resp = objectExistsWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ObjectExist> resp = objectExistsWithHttpInfo(path, storageName, versionId);
            return resp.getData();
        }
    }

    /**
     * Check if file or folder exists
     * 
     * @param path File or folder path e.g. '/file.ext' or '/folder' 
     * @param storageName Storage name 
     * @param versionId File version ID 
     * @return ApiResponse&lt;ObjectExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ObjectExist> objectExistsWithHttpInfo(String path, String storageName, String versionId) throws ApiException {
        com.squareup.okhttp.Call call = objectExistsCall(path, storageName, versionId, null, null);
        Type returnType = new TypeToken<ObjectExist>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Check if file or folder exists (asynchronously)
     * 
     * @param path File or folder path e.g. '/file.ext' or '/folder' 
     * @param storageName Storage name 
     * @param versionId File version ID 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call objectExistsAsync(String path, String storageName, String versionId, final ApiCallback<ObjectExist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = objectExistsCall(path, storageName, versionId, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ObjectExist>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for orderedMerge
     * @param name Document name. (required)
     * @param request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderedMergeCall(String name, OrderedMergeRequest request, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling orderedMerge(Async)");
        }
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling orderedMerge(Async)");
        }
        Object postBody = request;

        // create path and map variables
        String methodPath = "/slides/{name}/merge"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     * 
     * @param name Document name. (required)
     * @param request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document orderedMerge(String name, OrderedMergeRequest request, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = orderedMergeWithHttpInfo(name, request, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = orderedMergeWithHttpInfo(name, request, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter.
     * 
     * @param name Document name. (required)
     * @param request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> orderedMergeWithHttpInfo(String name, OrderedMergeRequest request, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = orderedMergeCall(name, request, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Merge the presentation with other presentations or some of their slides specified in the request parameter. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param request OrderedMergeRequest with a list of presentations and slide indices to merge. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderedMergeAsync(String name, OrderedMergeRequest request, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderedMergeCall(name, request, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for pipeline
     * @param pipeline A Pipeline object. (required)
     * @param files Files to upload with the pipeline 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pipelineCall(Pipeline pipeline, List<FileInfo> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling pipeline(Async)");
        }
        Object postBody = pipeline;

        // create path and map variables
        String methodPath = "/slides/pipeline"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (files != null)
        formParams.put("files", files);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Performs slides pipeline.
     * 
     * @param pipeline A Pipeline object. (required)
     * @param files Files to upload with the pipeline 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File pipeline(Pipeline pipeline, List<FileInfo> files) throws ApiException {
        try {
            ApiResponse<File> resp = pipelineWithHttpInfo(pipeline, files);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = pipelineWithHttpInfo(pipeline, files);
            return resp.getData();
        }
    }

    /**
     * Performs slides pipeline.
     * 
     * @param pipeline A Pipeline object. (required)
     * @param files Files to upload with the pipeline 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> pipelineWithHttpInfo(Pipeline pipeline, List<FileInfo> files) throws ApiException {
        com.squareup.okhttp.Call call = pipelineCall(pipeline, files, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Performs slides pipeline. (asynchronously)
     * 
     * @param pipeline A Pipeline object. (required)
     * @param files Files to upload with the pipeline 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pipelineAsync(Pipeline pipeline, List<FileInfo> files, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pipelineCall(pipeline, files, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for reorderSlides
     * @param name Document name. (required)
     * @param oldPositions A comma separated array of positions of slides to be reordered. 
     * @param newPositions A comma separated array of new slide positions. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call reorderSlidesCall(String name, List<Integer> oldPositions, List<Integer> newPositions, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling reorderSlides(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/reorder"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldPositions", oldPositions);
        apiClient.addQueryParameter(queryParams, "newPositions", newPositions);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Reorder presentation slides positions.
     * 
     * @param name Document name. (required)
     * @param oldPositions A comma separated array of positions of slides to be reordered. 
     * @param newPositions A comma separated array of new slide positions. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slides
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slides reorderSlides(String name, List<Integer> oldPositions, List<Integer> newPositions, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slides> resp = reorderSlidesWithHttpInfo(name, oldPositions, newPositions, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slides> resp = reorderSlidesWithHttpInfo(name, oldPositions, newPositions, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Reorder presentation slides positions.
     * 
     * @param name Document name. (required)
     * @param oldPositions A comma separated array of positions of slides to be reordered. 
     * @param newPositions A comma separated array of new slide positions. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slides&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slides> reorderSlidesWithHttpInfo(String name, List<Integer> oldPositions, List<Integer> newPositions, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = reorderSlidesCall(name, oldPositions, newPositions, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slides>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Reorder presentation slides positions. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param oldPositions A comma separated array of positions of slides to be reordered. 
     * @param newPositions A comma separated array of new slide positions. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call reorderSlidesAsync(String name, List<Integer> oldPositions, List<Integer> newPositions, String password, String folder, String storage, final ApiCallback<Slides> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = reorderSlidesCall(name, oldPositions, newPositions, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slides>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for replaceFont
     * @param name Document name. (required)
     * @param sourceFont Source font name. (required)
     * @param targetFont Target font name. (required)
     * @param embed Embed target font. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceFontCall(String name, String sourceFont, String targetFont, Boolean embed, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling replaceFont(Async)");
        }
        // verify the required parameter 'sourceFont' is set
        if (sourceFont == null) {
            throw new ApiException("Missing the required parameter 'sourceFont' when calling replaceFont(Async)");
        }
        // verify the required parameter 'targetFont' is set
        if (targetFont == null) {
            throw new ApiException("Missing the required parameter 'targetFont' when calling replaceFont(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/fonts/{sourceFont}/replace/{targetFont}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "sourceFont" + "\\}", apiClient.objectToString(sourceFont)).replaceAll("\\{" + "targetFont" + "\\}", apiClient.objectToString(targetFont));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "embed", embed);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replaces specified font and returns presentation fonts info.
     * 
     * @param name Document name. (required)
     * @param sourceFont Source font name. (required)
     * @param targetFont Target font name. (required)
     * @param embed Embed target font. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return FontsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FontsData replaceFont(String name, String sourceFont, String targetFont, Boolean embed, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<FontsData> resp = replaceFontWithHttpInfo(name, sourceFont, targetFont, embed, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FontsData> resp = replaceFontWithHttpInfo(name, sourceFont, targetFont, embed, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Replaces specified font and returns presentation fonts info.
     * 
     * @param name Document name. (required)
     * @param sourceFont Source font name. (required)
     * @param targetFont Target font name. (required)
     * @param embed Embed target font. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;FontsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FontsData> replaceFontWithHttpInfo(String name, String sourceFont, String targetFont, Boolean embed, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = replaceFontCall(name, sourceFont, targetFont, embed, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replaces specified font and returns presentation fonts info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sourceFont Source font name. (required)
     * @param targetFont Target font name. (required)
     * @param embed Embed target font. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceFontAsync(String name, String sourceFont, String targetFont, Boolean embed, String password, String folder, String storage, String fontsFolder, final ApiCallback<FontsData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceFontCall(name, sourceFont, targetFont, embed, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for replaceFontOnline
     * @param document Document data. (required)
     * @param sourceFont Source font name. (required)
     * @param targetFont Target font name. (required)
     * @param embed Embed target font. 
     * @param password Document password. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceFontOnlineCall(byte[] document, String sourceFont, String targetFont, Boolean embed, String password, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling replaceFontOnline(Async)");
        }
        // verify the required parameter 'sourceFont' is set
        if (sourceFont == null) {
            throw new ApiException("Missing the required parameter 'sourceFont' when calling replaceFontOnline(Async)");
        }
        // verify the required parameter 'targetFont' is set
        if (targetFont == null) {
            throw new ApiException("Missing the required parameter 'targetFont' when calling replaceFontOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/fonts/{sourceFont}/replace/{targetFont}"
            .replaceAll("\\{" + "sourceFont" + "\\}", apiClient.objectToString(sourceFont)).replaceAll("\\{" + "targetFont" + "\\}", apiClient.objectToString(targetFont));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "embed", embed);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replaces specified font and returns presentation.
     * 
     * @param document Document data. (required)
     * @param sourceFont Source font name. (required)
     * @param targetFont Target font name. (required)
     * @param embed Embed target font. 
     * @param password Document password. 
     * @param fontsFolder Custom fonts folder. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File replaceFontOnline(byte[] document, String sourceFont, String targetFont, Boolean embed, String password, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = replaceFontOnlineWithHttpInfo(document, sourceFont, targetFont, embed, password, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = replaceFontOnlineWithHttpInfo(document, sourceFont, targetFont, embed, password, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Replaces specified font and returns presentation.
     * 
     * @param document Document data. (required)
     * @param sourceFont Source font name. (required)
     * @param targetFont Target font name. (required)
     * @param embed Embed target font. 
     * @param password Document password. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> replaceFontOnlineWithHttpInfo(byte[] document, String sourceFont, String targetFont, Boolean embed, String password, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = replaceFontOnlineCall(document, sourceFont, targetFont, embed, password, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replaces specified font and returns presentation. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param sourceFont Source font name. (required)
     * @param targetFont Target font name. (required)
     * @param embed Embed target font. 
     * @param password Document password. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceFontOnlineAsync(byte[] document, String sourceFont, String targetFont, Boolean embed, String password, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceFontOnlineCall(document, sourceFont, targetFont, embed, password, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for replaceImage
     * @param name Document name. (required)
     * @param imageIndex Image index. (required)
     * @param image Image data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceImageCall(String name, Integer imageIndex, byte[] image, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling replaceImage(Async)");
        }
        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling replaceImage(Async)");
        }
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling replaceImage(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/images/{imageIndex}/replace"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "imageIndex" + "\\}", apiClient.objectToString(imageIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (image != null)
        formParams.put("image", image);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replaces image by the specified index.
     * 
     * @param name Document name. (required)
     * @param imageIndex Image index. (required)
     * @param image Image data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void replaceImage(String name, Integer imageIndex, byte[] image, String password, String folder, String storage) throws ApiException {
        try {
            replaceImageWithHttpInfo(name, imageIndex, image, password, folder, storage);
        } catch (NeedRepeatRequestException e) {
            replaceImageWithHttpInfo(name, imageIndex, image, password, folder, storage);
        }
    }

    /**
     * Replaces image by the specified index.
     * 
     * @param name Document name. (required)
     * @param imageIndex Image index. (required)
     * @param image Image data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> replaceImageWithHttpInfo(String name, Integer imageIndex, byte[] image, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = replaceImageCall(name, imageIndex, image, password, folder, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Replaces image by the specified index. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param imageIndex Image index. (required)
     * @param image Image data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceImageAsync(String name, Integer imageIndex, byte[] image, String password, String folder, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceImageCall(name, imageIndex, image, password, folder, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for replaceImageOnline
     * @param document Document data. (required)
     * @param imageIndex Image index. (required)
     * @param image Image data. (required)
     * @param password Password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceImageOnlineCall(byte[] document, Integer imageIndex, byte[] image, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling replaceImageOnline(Async)");
        }
        // verify the required parameter 'imageIndex' is set
        if (imageIndex == null) {
            throw new ApiException("Missing the required parameter 'imageIndex' when calling replaceImageOnline(Async)");
        }
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling replaceImageOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/images/{imageIndex}/replace"
            .replaceAll("\\{" + "imageIndex" + "\\}", apiClient.objectToString(imageIndex));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);
        if (image != null)
        formParams.put("image", image);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replaces image by the specified index and returns updated document. 
     * 
     * @param document Document data. (required)
     * @param imageIndex Image index. (required)
     * @param image Image data. (required)
     * @param password Password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File replaceImageOnline(byte[] document, Integer imageIndex, byte[] image, String password) throws ApiException {
        try {
            ApiResponse<File> resp = replaceImageOnlineWithHttpInfo(document, imageIndex, image, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = replaceImageOnlineWithHttpInfo(document, imageIndex, image, password);
            return resp.getData();
        }
    }

    /**
     * Replaces image by the specified index and returns updated document. 
     * 
     * @param document Document data. (required)
     * @param imageIndex Image index. (required)
     * @param image Image data. (required)
     * @param password Password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> replaceImageOnlineWithHttpInfo(byte[] document, Integer imageIndex, byte[] image, String password) throws ApiException {
        com.squareup.okhttp.Call call = replaceImageOnlineCall(document, imageIndex, image, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replaces image by the specified index and returns updated document.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param imageIndex Image index. (required)
     * @param image Image data. (required)
     * @param password Password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceImageOnlineAsync(byte[] document, Integer imageIndex, byte[] image, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceImageOnlineCall(document, imageIndex, image, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for replacePresentationText
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replacePresentationTextCall(String name, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling replacePresentationText(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling replacePresentationText(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling replacePresentationText(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/replaceText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace text with a new value.
     * 
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentReplaceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentReplaceResult replacePresentationText(String name, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentReplaceResult> resp = replacePresentationTextWithHttpInfo(name, oldValue, newValue, ignoreCase, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentReplaceResult> resp = replacePresentationTextWithHttpInfo(name, oldValue, newValue, ignoreCase, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Replace text with a new value.
     * 
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentReplaceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentReplaceResult> replacePresentationTextWithHttpInfo(String name, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = replacePresentationTextCall(name, oldValue, newValue, ignoreCase, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentReplaceResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace text with a new value. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replacePresentationTextAsync(String name, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage, final ApiCallback<DocumentReplaceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replacePresentationTextCall(name, oldValue, newValue, ignoreCase, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentReplaceResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for replacePresentationTextOnline
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replacePresentationTextOnlineCall(byte[] document, String oldValue, String newValue, Boolean ignoreCase, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling replacePresentationTextOnline(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling replacePresentationTextOnline(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling replacePresentationTextOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/replaceText"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace text with a new value.
     * 
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File replacePresentationTextOnline(byte[] document, String oldValue, String newValue, Boolean ignoreCase, String password) throws ApiException {
        try {
            ApiResponse<File> resp = replacePresentationTextOnlineWithHttpInfo(document, oldValue, newValue, ignoreCase, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = replacePresentationTextOnlineWithHttpInfo(document, oldValue, newValue, ignoreCase, password);
            return resp.getData();
        }
    }

    /**
     * Replace text with a new value.
     * 
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> replacePresentationTextOnlineWithHttpInfo(byte[] document, String oldValue, String newValue, Boolean ignoreCase, String password) throws ApiException {
        com.squareup.okhttp.Call call = replacePresentationTextOnlineCall(document, oldValue, newValue, ignoreCase, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace text with a new value. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replacePresentationTextOnlineAsync(byte[] document, String oldValue, String newValue, Boolean ignoreCase, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replacePresentationTextOnlineCall(document, oldValue, newValue, ignoreCase, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for replaceSlideText
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceSlideTextCall(String name, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling replaceSlideText(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling replaceSlideText(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling replaceSlideText(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling replaceSlideText(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/replaceText"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace text with a new value.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideReplaceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideReplaceResult replaceSlideText(String name, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideReplaceResult> resp = replaceSlideTextWithHttpInfo(name, slideIndex, oldValue, newValue, ignoreCase, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideReplaceResult> resp = replaceSlideTextWithHttpInfo(name, slideIndex, oldValue, newValue, ignoreCase, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Replace text with a new value.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideReplaceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideReplaceResult> replaceSlideTextWithHttpInfo(String name, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = replaceSlideTextCall(name, slideIndex, oldValue, newValue, ignoreCase, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideReplaceResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace text with a new value. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceSlideTextAsync(String name, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, String folder, String storage, final ApiCallback<SlideReplaceResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceSlideTextCall(name, slideIndex, oldValue, newValue, ignoreCase, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideReplaceResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for replaceSlideTextOnline
     * @param document Document data. (required)
     * @param slideIndex Index of target slide. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceSlideTextOnlineCall(byte[] document, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling replaceSlideTextOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling replaceSlideTextOnline(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling replaceSlideTextOnline(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling replaceSlideTextOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/replaceText"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "ignoreCase", ignoreCase);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace slide text with a new value.
     * 
     * @param document Document data. (required)
     * @param slideIndex Index of target slide. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File replaceSlideTextOnline(byte[] document, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password) throws ApiException {
        try {
            ApiResponse<File> resp = replaceSlideTextOnlineWithHttpInfo(document, slideIndex, oldValue, newValue, ignoreCase, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = replaceSlideTextOnlineWithHttpInfo(document, slideIndex, oldValue, newValue, ignoreCase, password);
            return resp.getData();
        }
    }

    /**
     * Replace slide text with a new value.
     * 
     * @param document Document data. (required)
     * @param slideIndex Index of target slide. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> replaceSlideTextOnlineWithHttpInfo(byte[] document, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password) throws ApiException {
        com.squareup.okhttp.Call call = replaceSlideTextOnlineCall(document, slideIndex, oldValue, newValue, ignoreCase, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace slide text with a new value. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Index of target slide. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param ignoreCase True if character case must be ignored. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceSlideTextOnlineAsync(byte[] document, Integer slideIndex, String oldValue, String newValue, Boolean ignoreCase, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceSlideTextOnlineCall(document, slideIndex, oldValue, newValue, ignoreCase, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for replaceTextFormatting
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param portionFormat Portion format. 
     * @param withMasters Text replacement includes master slides. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceTextFormattingCall(String name, String oldValue, String newValue, PortionFormat portionFormat, Boolean withMasters, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling replaceTextFormatting(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling replaceTextFormatting(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling replaceTextFormatting(Async)");
        }
        Object postBody = portionFormat;

        // create path and map variables
        String methodPath = "/slides/{name}/replaceTextFormatting"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "withMasters", withMasters);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Finds and replaces text in presentation with given format.
     * 
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param portionFormat Portion format. 
     * @param withMasters Text replacement includes master slides. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document replaceTextFormatting(String name, String oldValue, String newValue, PortionFormat portionFormat, Boolean withMasters, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = replaceTextFormattingWithHttpInfo(name, oldValue, newValue, portionFormat, withMasters, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = replaceTextFormattingWithHttpInfo(name, oldValue, newValue, portionFormat, withMasters, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Finds and replaces text in presentation with given format.
     * 
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param portionFormat Portion format. 
     * @param withMasters Text replacement includes master slides. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> replaceTextFormattingWithHttpInfo(String name, String oldValue, String newValue, PortionFormat portionFormat, Boolean withMasters, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = replaceTextFormattingCall(name, oldValue, newValue, portionFormat, withMasters, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Finds and replaces text in presentation with given format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param portionFormat Portion format. 
     * @param withMasters Text replacement includes master slides. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceTextFormattingAsync(String name, String oldValue, String newValue, PortionFormat portionFormat, Boolean withMasters, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceTextFormattingCall(name, oldValue, newValue, portionFormat, withMasters, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for replaceTextFormattingOnline
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param portionFormat Portion format. 
     * @param withMasters Text replacement includes master slides. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call replaceTextFormattingOnlineCall(byte[] document, String oldValue, String newValue, PortionFormat portionFormat, Boolean withMasters, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling replaceTextFormattingOnline(Async)");
        }
        // verify the required parameter 'oldValue' is set
        if (oldValue == null) {
            throw new ApiException("Missing the required parameter 'oldValue' when calling replaceTextFormattingOnline(Async)");
        }
        // verify the required parameter 'newValue' is set
        if (newValue == null) {
            throw new ApiException("Missing the required parameter 'newValue' when calling replaceTextFormattingOnline(Async)");
        }
        Object postBody = portionFormat;

        // create path and map variables
        String methodPath = "/slides/replaceTextFormatting"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "oldValue", oldValue);
        apiClient.addQueryParameter(queryParams, "newValue", newValue);
        apiClient.addQueryParameter(queryParams, "withMasters", withMasters);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Finds and replaces text in presentation with given format.
     * 
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param portionFormat Portion format. 
     * @param withMasters Text replacement includes master slides. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File replaceTextFormattingOnline(byte[] document, String oldValue, String newValue, PortionFormat portionFormat, Boolean withMasters, String password) throws ApiException {
        try {
            ApiResponse<File> resp = replaceTextFormattingOnlineWithHttpInfo(document, oldValue, newValue, portionFormat, withMasters, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = replaceTextFormattingOnlineWithHttpInfo(document, oldValue, newValue, portionFormat, withMasters, password);
            return resp.getData();
        }
    }

    /**
     * Finds and replaces text in presentation with given format.
     * 
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param portionFormat Portion format. 
     * @param withMasters Text replacement includes master slides. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> replaceTextFormattingOnlineWithHttpInfo(byte[] document, String oldValue, String newValue, PortionFormat portionFormat, Boolean withMasters, String password) throws ApiException {
        com.squareup.okhttp.Call call = replaceTextFormattingOnlineCall(document, oldValue, newValue, portionFormat, withMasters, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Finds and replaces text in presentation with given format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param oldValue Text value to be replaced. (required)
     * @param newValue Text value to replace with. (required)
     * @param portionFormat Portion format. 
     * @param withMasters Text replacement includes master slides. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call replaceTextFormattingOnlineAsync(byte[] document, String oldValue, String newValue, PortionFormat portionFormat, Boolean withMasters, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = replaceTextFormattingOnlineCall(document, oldValue, newValue, portionFormat, withMasters, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for saveMathPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param format Format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveMathPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, MathFormat format, String outPath, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling saveMathPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling saveMathPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling saveMathPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling saveMathPortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling saveMathPortion(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling saveMathPortion(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling saveMathPortion(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param format Format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveMathPortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, MathFormat format, String outPath, String password, String folder, String storage) throws ApiException {
        try {
            saveMathPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, format, outPath, password, folder, storage);
        } catch (NeedRepeatRequestException e) {
            saveMathPortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, format, outPath, password, folder, storage);
        }
    }

    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param format Format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveMathPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, MathFormat format, String outPath, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = saveMathPortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, format, outPath, password, folder, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param format Format. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveMathPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, MathFormat format, String outPath, String password, String folder, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveMathPortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, format, outPath, password, folder, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for savePortionAsMathMl
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call savePortionAsMathMlCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String outPath, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling savePortionAsMathMl(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling savePortionAsMathMl(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling savePortionAsMathMl(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling savePortionAsMathMl(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling savePortionAsMathMl(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling savePortionAsMathMl(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}/mathml"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void savePortionAsMathMl(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String outPath, String password, String folder, String storage) throws ApiException {
        try {
            savePortionAsMathMlWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, outPath, password, folder, storage);
        } catch (NeedRepeatRequestException e) {
            savePortionAsMathMlWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, outPath, password, folder, storage);
        }
    }

    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> savePortionAsMathMlWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String outPath, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = savePortionAsMathMlCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, outPath, password, folder, storage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Convert Mathematical Text to MathML Format and saves result to the storage (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param outPath Path to save result. (required)
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call savePortionAsMathMlAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, String outPath, String password, String folder, String storage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = savePortionAsMathMlCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, outPath, password, folder, storage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for savePresentation
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param outPath Output path. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call savePresentationCall(String name, ExportFormat format, String outPath, ExportOptions options, String password, String folder, String storage, String fontsFolder, List<Integer> slides, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling savePresentation(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling savePresentation(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling savePresentation(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);
        apiClient.addQueryParameter(queryParams, "slides", slides);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param outPath Output path. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void savePresentation(String name, ExportFormat format, String outPath, ExportOptions options, String password, String folder, String storage, String fontsFolder, List<Integer> slides) throws ApiException {
        try {
            savePresentationWithHttpInfo(name, format, outPath, options, password, folder, storage, fontsFolder, slides);
        } catch (NeedRepeatRequestException e) {
            savePresentationWithHttpInfo(name, format, outPath, options, password, folder, storage, fontsFolder, slides);
        }
    }

    /**
     * Save a presentation to a specified format.
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param outPath Output path. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> savePresentationWithHttpInfo(String name, ExportFormat format, String outPath, ExportOptions options, String password, String folder, String storage, String fontsFolder, List<Integer> slides) throws ApiException {
        com.squareup.okhttp.Call call = savePresentationCall(name, format, outPath, options, password, folder, storage, fontsFolder, slides, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save a presentation to a specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param format Export format. (required)
     * @param outPath Output path. (required)
     * @param options Export options. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param slides The indices of the slides to be saved. If not specified, all slides are saved by default. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call savePresentationAsync(String name, ExportFormat format, String outPath, ExportOptions options, String password, String folder, String storage, String fontsFolder, List<Integer> slides, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = savePresentationCall(name, format, outPath, options, password, folder, storage, fontsFolder, slides, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for saveShape
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveShapeCall(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling saveShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling saveShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling saveShape(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling saveShape(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling saveShape(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveShape(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape) throws ApiException {
        try {
            saveShapeWithHttpInfo(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape);
        } catch (NeedRepeatRequestException e) {
            saveShapeWithHttpInfo(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape);
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = saveShapeCall(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape, null, null);
        return apiClient.execute(call);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveShapeAsync(String name, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveShapeCall(name, slideIndex, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for saveShapeOnline
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Path to save result. (required)
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Fonts folder. 
     * @param options Export options. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveShapeOnlineCall(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String storage, String fontsFolder, IShapeExportOptions options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling saveShapeOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling saveShapeOnline(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling saveShapeOnline(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling saveShapeOnline(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling saveShapeOnline(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Path to save result. (required)
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Fonts folder. 
     * @param options Export options. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveShapeOnline(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String storage, String fontsFolder, IShapeExportOptions options) throws ApiException {
        try {
            saveShapeOnlineWithHttpInfo(document, slideIndex, shapeIndex, format, outPath, scaleX, scaleY, bounds, password, storage, fontsFolder, options);
        } catch (NeedRepeatRequestException e) {
            saveShapeOnlineWithHttpInfo(document, slideIndex, shapeIndex, format, outPath, scaleX, scaleY, bounds, password, storage, fontsFolder, options);
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Path to save result. (required)
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Fonts folder. 
     * @param options Export options. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveShapeOnlineWithHttpInfo(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String storage, String fontsFolder, IShapeExportOptions options) throws ApiException {
        com.squareup.okhttp.Call call = saveShapeOnlineCall(document, slideIndex, shapeIndex, format, outPath, scaleX, scaleY, bounds, password, storage, fontsFolder, options, null, null);
        return apiClient.execute(call);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Path to save result. (required)
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Fonts folder. 
     * @param options Export options. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveShapeOnlineAsync(byte[] document, Integer slideIndex, Integer shapeIndex, ShapeExportFormat format, String outPath, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String storage, String fontsFolder, IShapeExportOptions options, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveShapeOnlineCall(document, slideIndex, shapeIndex, format, outPath, scaleX, scaleY, bounds, password, storage, fontsFolder, options, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for saveSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to upload the output file to. (required)
     * @param options Export options. 
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSlideCall(String name, Integer slideIndex, SlideExportFormat format, String outPath, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling saveSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling saveSlide(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling saveSlide(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling saveSlide(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to upload the output file to. (required)
     * @param options Export options. 
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveSlide(String name, Integer slideIndex, SlideExportFormat format, String outPath, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            saveSlideWithHttpInfo(name, slideIndex, format, outPath, options, width, height, password, folder, storage, fontsFolder);
        } catch (NeedRepeatRequestException e) {
            saveSlideWithHttpInfo(name, slideIndex, format, outPath, options, width, height, password, folder, storage, fontsFolder);
        }
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to upload the output file to. (required)
     * @param options Export options. 
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveSlideWithHttpInfo(String name, Integer slideIndex, SlideExportFormat format, String outPath, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = saveSlideCall(name, slideIndex, format, outPath, options, width, height, password, folder, storage, fontsFolder, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to upload the output file to. (required)
     * @param options Export options. 
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveSlideAsync(String name, Integer slideIndex, SlideExportFormat format, String outPath, ExportOptions options, Integer width, Integer height, String password, String folder, String storage, String fontsFolder, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveSlideCall(name, slideIndex, format, outPath, options, width, height, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for saveSlideOnline
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to save result. (required)
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param options Export options. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSlideOnlineCall(byte[] document, Integer slideIndex, SlideExportFormat format, String outPath, Integer width, Integer height, String password, String storage, String fontsFolder, ExportOptions options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling saveSlideOnline(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling saveSlideOnline(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling saveSlideOnline(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling saveSlideOnline(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/slides/{slideIndex}/{format}"
            .replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to save result. (required)
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param options Export options. 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveSlideOnline(byte[] document, Integer slideIndex, SlideExportFormat format, String outPath, Integer width, Integer height, String password, String storage, String fontsFolder, ExportOptions options) throws ApiException {
        try {
            saveSlideOnlineWithHttpInfo(document, slideIndex, format, outPath, width, height, password, storage, fontsFolder, options);
        } catch (NeedRepeatRequestException e) {
            saveSlideOnlineWithHttpInfo(document, slideIndex, format, outPath, width, height, password, storage, fontsFolder, options);
        }
    }

    /**
     * Save a slide to a specified format.
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to save result. (required)
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param options Export options. 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveSlideOnlineWithHttpInfo(byte[] document, Integer slideIndex, SlideExportFormat format, String outPath, Integer width, Integer height, String password, String storage, String fontsFolder, ExportOptions options) throws ApiException {
        com.squareup.okhttp.Call call = saveSlideOnlineCall(document, slideIndex, format, outPath, width, height, password, storage, fontsFolder, options, null, null);
        return apiClient.execute(call);
    }

    /**
     * Save a slide to a specified format. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param slideIndex Slide index. (required)
     * @param format Output file format. (required)
     * @param outPath Path to save result. (required)
     * @param width The width of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param height The height of the slide representation in the output format; 0 to not adjust the size. Default is 0. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Storage folder containing custom fonts to be used with the document. 
     * @param options Export options. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveSlideOnlineAsync(byte[] document, Integer slideIndex, SlideExportFormat format, String outPath, Integer width, Integer height, String password, String storage, String fontsFolder, ExportOptions options, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveSlideOnlineCall(document, slideIndex, format, outPath, width, height, password, storage, fontsFolder, options, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for saveSpecialSlideShape
     * @param name Presentation name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSpecialSlideShapeCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling saveSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling saveSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling saveSpecialSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling saveSpecialSlideShape(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling saveSpecialSlideShape(Async)");
        }
        // verify the required parameter 'outPath' is set
        if (outPath == null) {
            throw new ApiException("Missing the required parameter 'outPath' when calling saveSpecialSlideShape(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/{format}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "outPath", outPath);
        apiClient.addQueryParameter(queryParams, "scaleX", scaleX);
        apiClient.addQueryParameter(queryParams, "scaleY", scaleY);
        apiClient.addQueryParameter(queryParams, "bounds", bounds);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void saveSpecialSlideShape(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape) throws ApiException {
        try {
            saveSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape);
        } catch (NeedRepeatRequestException e) {
            saveSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape);
        }
    }

    /**
     * Render shape to specified picture format.
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> saveSpecialSlideShapeWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = saveSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape, null, null);
        return apiClient.execute(call);
    }

    /**
     * Render shape to specified picture format. (asynchronously)
     * 
     * @param name Presentation name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Index of shape starting from 1 (required)
     * @param format Export picture format. (required)
     * @param outPath Output path. (required)
     * @param options export options 
     * @param scaleX X scale ratio. 
     * @param scaleY Y scale ratio. 
     * @param bounds Shape thumbnail bounds type. 
     * @param password Document password. 
     * @param folder Presentation folder. 
     * @param storage Presentation storage. 
     * @param fontsFolder Fonts folder. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveSpecialSlideShapeAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeExportFormat format, String outPath, IShapeExportOptions options, Double scaleX, Double scaleY, ShapeThumbnailBounds bounds, String password, String folder, String storage, String fontsFolder, String subShape, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, format, outPath, options, scaleX, scaleY, bounds, password, folder, storage, fontsFolder, subShape, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for setAnimation
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setAnimationCall(String name, Integer slideIndex, SlideAnimation animation, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setAnimation(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setAnimation(Async)");
        }
        // verify the required parameter 'animation' is set
        if (animation == null) {
            throw new ApiException("Missing the required parameter 'animation' when calling setAnimation(Async)");
        }
        Object postBody = animation;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation setAnimation(String name, Integer slideIndex, SlideAnimation animation, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = setAnimationWithHttpInfo(name, slideIndex, animation, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = setAnimationWithHttpInfo(name, slideIndex, animation, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set slide animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> setAnimationWithHttpInfo(String name, Integer slideIndex, SlideAnimation animation, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setAnimationCall(name, slideIndex, animation, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set slide animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setAnimationAsync(String name, Integer slideIndex, SlideAnimation animation, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setAnimationCall(name, slideIndex, animation, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setBackground
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param background Slide background update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBackgroundCall(String name, Integer slideIndex, SlideBackground background, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setBackground(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setBackground(Async)");
        }
        // verify the required parameter 'background' is set
        if (background == null) {
            throw new ApiException("Missing the required parameter 'background' when calling setBackground(Async)");
        }
        Object postBody = background;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/background"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set background for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param background Slide background update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideBackground setBackground(String name, Integer slideIndex, SlideBackground background, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideBackground> resp = setBackgroundWithHttpInfo(name, slideIndex, background, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideBackground> resp = setBackgroundWithHttpInfo(name, slideIndex, background, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set background for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param background Slide background update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideBackground> setBackgroundWithHttpInfo(String name, Integer slideIndex, SlideBackground background, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setBackgroundCall(name, slideIndex, background, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set background for a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param background Slide background update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBackgroundAsync(String name, Integer slideIndex, SlideBackground background, String password, String folder, String storage, final ApiCallback<SlideBackground> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBackgroundCall(name, slideIndex, background, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setBackgroundColor
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param color Slide background target color in RRGGBB format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setBackgroundColorCall(String name, Integer slideIndex, String color, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setBackgroundColor(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setBackgroundColor(Async)");
        }
        // verify the required parameter 'color' is set
        if (color == null) {
            throw new ApiException("Missing the required parameter 'color' when calling setBackgroundColor(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/backgroundColor"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "color", color);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set background color for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param color Slide background target color in RRGGBB format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideBackground
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideBackground setBackgroundColor(String name, Integer slideIndex, String color, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideBackground> resp = setBackgroundColorWithHttpInfo(name, slideIndex, color, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideBackground> resp = setBackgroundColorWithHttpInfo(name, slideIndex, color, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set background color for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param color Slide background target color in RRGGBB format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideBackground&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideBackground> setBackgroundColorWithHttpInfo(String name, Integer slideIndex, String color, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setBackgroundColorCall(name, slideIndex, color, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set background color for a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param color Slide background target color in RRGGBB format. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setBackgroundColorAsync(String name, Integer slideIndex, String color, String password, String folder, String storage, final ApiCallback<SlideBackground> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setBackgroundColorCall(name, slideIndex, color, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideBackground>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setChartAxis
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param axisType Axis type. Horizontal, Vertical, SecondaryHorizontal or SecondaryVertical. (required)
     * @param axis Axis DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setChartAxisCall(String name, Integer slideIndex, Integer shapeIndex, AxisType axisType, Axis axis, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setChartAxis(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setChartAxis(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling setChartAxis(Async)");
        }
        // verify the required parameter 'axisType' is set
        if (axisType == null) {
            throw new ApiException("Missing the required parameter 'axisType' when calling setChartAxis(Async)");
        }
        // verify the required parameter 'axis' is set
        if (axis == null) {
            throw new ApiException("Missing the required parameter 'axis' when calling setChartAxis(Async)");
        }
        Object postBody = axis;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{axisType}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "axisType" + "\\}", apiClient.objectToString(axisType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set chart axis.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param axisType Axis type. Horizontal, Vertical, SecondaryHorizontal or SecondaryVertical. (required)
     * @param axis Axis DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Axis
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Axis setChartAxis(String name, Integer slideIndex, Integer shapeIndex, AxisType axisType, Axis axis, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Axis> resp = setChartAxisWithHttpInfo(name, slideIndex, shapeIndex, axisType, axis, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Axis> resp = setChartAxisWithHttpInfo(name, slideIndex, shapeIndex, axisType, axis, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set chart axis.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param axisType Axis type. Horizontal, Vertical, SecondaryHorizontal or SecondaryVertical. (required)
     * @param axis Axis DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Axis&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Axis> setChartAxisWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, AxisType axisType, Axis axis, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setChartAxisCall(name, slideIndex, shapeIndex, axisType, axis, password, folder, storage, null, null);
        Type returnType = new TypeToken<Axis>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set chart axis. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param axisType Axis type. Horizontal, Vertical, SecondaryHorizontal or SecondaryVertical. (required)
     * @param axis Axis DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setChartAxisAsync(String name, Integer slideIndex, Integer shapeIndex, AxisType axisType, Axis axis, String password, String folder, String storage, final ApiCallback<Axis> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setChartAxisCall(name, slideIndex, shapeIndex, axisType, axis, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Axis>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setChartLegend
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param legend Chart legend DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setChartLegendCall(String name, Integer slideIndex, Integer shapeIndex, Legend legend, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setChartLegend(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setChartLegend(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling setChartLegend(Async)");
        }
        // verify the required parameter 'legend' is set
        if (legend == null) {
            throw new ApiException("Missing the required parameter 'legend' when calling setChartLegend(Async)");
        }
        Object postBody = legend;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/legend"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set chart axis.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param legend Chart legend DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Legend
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Legend setChartLegend(String name, Integer slideIndex, Integer shapeIndex, Legend legend, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Legend> resp = setChartLegendWithHttpInfo(name, slideIndex, shapeIndex, legend, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Legend> resp = setChartLegendWithHttpInfo(name, slideIndex, shapeIndex, legend, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set chart axis.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param legend Chart legend DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Legend&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Legend> setChartLegendWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Legend legend, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setChartLegendCall(name, slideIndex, shapeIndex, legend, password, folder, storage, null, null);
        Type returnType = new TypeToken<Legend>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set chart axis. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param legend Chart legend DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setChartLegendAsync(String name, Integer slideIndex, Integer shapeIndex, Legend legend, String password, String folder, String storage, final ApiCallback<Legend> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setChartLegendCall(name, slideIndex, shapeIndex, legend, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Legend>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setChartSeriesGroup
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesGroupIndex Series group index. (required)
     * @param seriesGroup Series group DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setChartSeriesGroupCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesGroupIndex, ChartSeriesGroup seriesGroup, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setChartSeriesGroup(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setChartSeriesGroup(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling setChartSeriesGroup(Async)");
        }
        // verify the required parameter 'seriesGroupIndex' is set
        if (seriesGroupIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesGroupIndex' when calling setChartSeriesGroup(Async)");
        }
        // verify the required parameter 'seriesGroup' is set
        if (seriesGroup == null) {
            throw new ApiException("Missing the required parameter 'seriesGroup' when calling setChartSeriesGroup(Async)");
        }
        Object postBody = seriesGroup;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/seriesGroup/{seriesGroupIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesGroupIndex" + "\\}", apiClient.objectToString(seriesGroupIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set a series group in a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesGroupIndex Series group index. (required)
     * @param seriesGroup Series group DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart setChartSeriesGroup(String name, Integer slideIndex, Integer shapeIndex, Integer seriesGroupIndex, ChartSeriesGroup seriesGroup, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = setChartSeriesGroupWithHttpInfo(name, slideIndex, shapeIndex, seriesGroupIndex, seriesGroup, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = setChartSeriesGroupWithHttpInfo(name, slideIndex, shapeIndex, seriesGroupIndex, seriesGroup, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set a series group in a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesGroupIndex Series group index. (required)
     * @param seriesGroup Series group DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> setChartSeriesGroupWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesGroupIndex, ChartSeriesGroup seriesGroup, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setChartSeriesGroupCall(name, slideIndex, shapeIndex, seriesGroupIndex, seriesGroup, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set a series group in a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesGroupIndex Series group index. (required)
     * @param seriesGroup Series group DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setChartSeriesGroupAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesGroupIndex, ChartSeriesGroup seriesGroup, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setChartSeriesGroupCall(name, slideIndex, shapeIndex, seriesGroupIndex, seriesGroup, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setChartWall
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param chartWallType Chart wall type: floor, sideWall or backWall. (required)
     * @param chartWall Chart wall DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setChartWallCall(String name, Integer slideIndex, Integer shapeIndex, ChartWallType chartWallType, ChartWall chartWall, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setChartWall(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setChartWall(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling setChartWall(Async)");
        }
        // verify the required parameter 'chartWallType' is set
        if (chartWallType == null) {
            throw new ApiException("Missing the required parameter 'chartWallType' when calling setChartWall(Async)");
        }
        // verify the required parameter 'chartWall' is set
        if (chartWall == null) {
            throw new ApiException("Missing the required parameter 'chartWall' when calling setChartWall(Async)");
        }
        Object postBody = chartWall;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/{chartWallType}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "chartWallType" + "\\}", apiClient.objectToString(chartWallType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set 3D chart wall.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param chartWallType Chart wall type: floor, sideWall or backWall. (required)
     * @param chartWall Chart wall DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ChartWall
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChartWall setChartWall(String name, Integer slideIndex, Integer shapeIndex, ChartWallType chartWallType, ChartWall chartWall, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ChartWall> resp = setChartWallWithHttpInfo(name, slideIndex, shapeIndex, chartWallType, chartWall, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ChartWall> resp = setChartWallWithHttpInfo(name, slideIndex, shapeIndex, chartWallType, chartWall, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set 3D chart wall.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param chartWallType Chart wall type: floor, sideWall or backWall. (required)
     * @param chartWall Chart wall DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ChartWall&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChartWall> setChartWallWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ChartWallType chartWallType, ChartWall chartWall, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setChartWallCall(name, slideIndex, shapeIndex, chartWallType, chartWall, password, folder, storage, null, null);
        Type returnType = new TypeToken<ChartWall>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set 3D chart wall. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param chartWallType Chart wall type: floor, sideWall or backWall. (required)
     * @param chartWall Chart wall DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setChartWallAsync(String name, Integer slideIndex, Integer shapeIndex, ChartWallType chartWallType, ChartWall chartWall, String password, String folder, String storage, final ApiCallback<ChartWall> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setChartWallCall(name, slideIndex, shapeIndex, chartWallType, chartWall, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ChartWall>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setDocumentProperties
     * @param name Document name. (required)
     * @param properties New properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDocumentPropertiesCall(String name, DocumentProperties properties, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setDocumentProperties(Async)");
        }
        // verify the required parameter 'properties' is set
        if (properties == null) {
            throw new ApiException("Missing the required parameter 'properties' when calling setDocumentProperties(Async)");
        }
        Object postBody = properties;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set document properties.
     * 
     * @param name Document name. (required)
     * @param properties New properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperties setDocumentProperties(String name, DocumentProperties properties, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperties> resp = setDocumentPropertiesWithHttpInfo(name, properties, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperties> resp = setDocumentPropertiesWithHttpInfo(name, properties, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set document properties.
     * 
     * @param name Document name. (required)
     * @param properties New properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperties> setDocumentPropertiesWithHttpInfo(String name, DocumentProperties properties, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setDocumentPropertiesCall(name, properties, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set document properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param properties New properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDocumentPropertiesAsync(String name, DocumentProperties properties, String password, String folder, String storage, final ApiCallback<DocumentProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDocumentPropertiesCall(name, properties, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setDocumentProperty
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param property Property with the value. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setDocumentPropertyCall(String name, String propertyName, DocumentProperty property, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setDocumentProperty(Async)");
        }
        // verify the required parameter 'propertyName' is set
        if (propertyName == null) {
            throw new ApiException("Missing the required parameter 'propertyName' when calling setDocumentProperty(Async)");
        }
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling setDocumentProperty(Async)");
        }
        Object postBody = property;

        // create path and map variables
        String methodPath = "/slides/{name}/documentproperties/{propertyName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "propertyName" + "\\}", apiClient.objectToString(propertyName));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param property Property with the value. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return DocumentProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentProperty setDocumentProperty(String name, String propertyName, DocumentProperty property, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<DocumentProperty> resp = setDocumentPropertyWithHttpInfo(name, propertyName, property, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<DocumentProperty> resp = setDocumentPropertyWithHttpInfo(name, propertyName, property, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set document property.
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param property Property with the value. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;DocumentProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentProperty> setDocumentPropertyWithHttpInfo(String name, String propertyName, DocumentProperty property, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setDocumentPropertyCall(name, propertyName, property, password, folder, storage, null, null);
        Type returnType = new TypeToken<DocumentProperty>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set document property. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param propertyName The property name. (required)
     * @param property Property with the value. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setDocumentPropertyAsync(String name, String propertyName, DocumentProperty property, String password, String folder, String storage, final ApiCallback<DocumentProperty> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setDocumentPropertyCall(name, propertyName, property, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<DocumentProperty>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setEmbeddedFont
     * @param name Document name. (required)
     * @param fontName Font name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEmbeddedFontCall(String name, String fontName, Boolean onlyUsed, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setEmbeddedFont(Async)");
        }
        // verify the required parameter 'fontName' is set
        if (fontName == null) {
            throw new ApiException("Missing the required parameter 'fontName' when calling setEmbeddedFont(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/fonts/embedded/{fontName}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "fontName" + "\\}", apiClient.objectToString(fontName));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "onlyUsed", onlyUsed);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Embeds specified font and returns presentation fonts info.
     * 
     * @param name Document name. (required)
     * @param fontName Font name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return FontsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FontsData setEmbeddedFont(String name, String fontName, Boolean onlyUsed, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<FontsData> resp = setEmbeddedFontWithHttpInfo(name, fontName, onlyUsed, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FontsData> resp = setEmbeddedFontWithHttpInfo(name, fontName, onlyUsed, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Embeds specified font and returns presentation fonts info.
     * 
     * @param name Document name. (required)
     * @param fontName Font name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;FontsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FontsData> setEmbeddedFontWithHttpInfo(String name, String fontName, Boolean onlyUsed, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = setEmbeddedFontCall(name, fontName, onlyUsed, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Embeds specified font and returns presentation fonts info. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param fontName Font name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEmbeddedFontAsync(String name, String fontName, Boolean onlyUsed, String password, String folder, String storage, String fontsFolder, final ApiCallback<FontsData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEmbeddedFontCall(name, fontName, onlyUsed, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setEmbeddedFontFromRequest
     * @param font Font data. (required)
     * @param name Document name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEmbeddedFontFromRequestCall(byte[] font, String name, Boolean onlyUsed, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'font' is set
        if (font == null) {
            throw new ApiException("Missing the required parameter 'font' when calling setEmbeddedFontFromRequest(Async)");
        }
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setEmbeddedFontFromRequest(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/fonts/embedded"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "onlyUsed", onlyUsed);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (font != null)
        formParams.put("font", font);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Embeds font from request and returns presentation fonts info.
     * 
     * @param font Font data. (required)
     * @param name Document name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return FontsData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FontsData setEmbeddedFontFromRequest(byte[] font, String name, Boolean onlyUsed, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<FontsData> resp = setEmbeddedFontFromRequestWithHttpInfo(font, name, onlyUsed, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FontsData> resp = setEmbeddedFontFromRequestWithHttpInfo(font, name, onlyUsed, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Embeds font from request and returns presentation fonts info.
     * 
     * @param font Font data. (required)
     * @param name Document name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;FontsData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FontsData> setEmbeddedFontFromRequestWithHttpInfo(byte[] font, String name, Boolean onlyUsed, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setEmbeddedFontFromRequestCall(font, name, onlyUsed, password, folder, storage, null, null);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Embeds font from request and returns presentation fonts info. (asynchronously)
     * 
     * @param font Font data. (required)
     * @param name Document name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEmbeddedFontFromRequestAsync(byte[] font, String name, Boolean onlyUsed, String password, String folder, String storage, final ApiCallback<FontsData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEmbeddedFontFromRequestCall(font, name, onlyUsed, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FontsData>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setEmbeddedFontFromRequestOnline
     * @param document Document data. (required)
     * @param font Font data. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEmbeddedFontFromRequestOnlineCall(byte[] document, byte[] font, Boolean onlyUsed, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling setEmbeddedFontFromRequestOnline(Async)");
        }
        // verify the required parameter 'font' is set
        if (font == null) {
            throw new ApiException("Missing the required parameter 'font' when calling setEmbeddedFontFromRequestOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/fonts/embedded"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "onlyUsed", onlyUsed);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);
        if (font != null)
        formParams.put("font", font);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Embeds font from request and returns presentation.
     * 
     * @param document Document data. (required)
     * @param font Font data. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File setEmbeddedFontFromRequestOnline(byte[] document, byte[] font, Boolean onlyUsed, String password) throws ApiException {
        try {
            ApiResponse<File> resp = setEmbeddedFontFromRequestOnlineWithHttpInfo(document, font, onlyUsed, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = setEmbeddedFontFromRequestOnlineWithHttpInfo(document, font, onlyUsed, password);
            return resp.getData();
        }
    }

    /**
     * Embeds font from request and returns presentation.
     * 
     * @param document Document data. (required)
     * @param font Font data. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> setEmbeddedFontFromRequestOnlineWithHttpInfo(byte[] document, byte[] font, Boolean onlyUsed, String password) throws ApiException {
        com.squareup.okhttp.Call call = setEmbeddedFontFromRequestOnlineCall(document, font, onlyUsed, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Embeds font from request and returns presentation. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param font Font data. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEmbeddedFontFromRequestOnlineAsync(byte[] document, byte[] font, Boolean onlyUsed, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEmbeddedFontFromRequestOnlineCall(document, font, onlyUsed, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setEmbeddedFontOnline
     * @param document Document data. (required)
     * @param fontName Font name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setEmbeddedFontOnlineCall(byte[] document, String fontName, Boolean onlyUsed, String password, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling setEmbeddedFontOnline(Async)");
        }
        // verify the required parameter 'fontName' is set
        if (fontName == null) {
            throw new ApiException("Missing the required parameter 'fontName' when calling setEmbeddedFontOnline(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/fonts/embedded/{fontName}"
            .replaceAll("\\{" + "fontName" + "\\}", apiClient.objectToString(fontName));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "onlyUsed", onlyUsed);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Embeds specified font and returns presentation.
     * 
     * @param document Document data. (required)
     * @param fontName Font name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param fontsFolder Custom fonts folder. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File setEmbeddedFontOnline(byte[] document, String fontName, Boolean onlyUsed, String password, String fontsFolder) throws ApiException {
        try {
            ApiResponse<File> resp = setEmbeddedFontOnlineWithHttpInfo(document, fontName, onlyUsed, password, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = setEmbeddedFontOnlineWithHttpInfo(document, fontName, onlyUsed, password, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Embeds specified font and returns presentation.
     * 
     * @param document Document data. (required)
     * @param fontName Font name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> setEmbeddedFontOnlineWithHttpInfo(byte[] document, String fontName, Boolean onlyUsed, String password, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = setEmbeddedFontOnlineCall(document, fontName, onlyUsed, password, fontsFolder, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Embeds specified font and returns presentation. (asynchronously)
     * 
     * @param document Document data. (required)
     * @param fontName Font name. (required)
     * @param onlyUsed Only used characters will be embedded. 
     * @param password Document password. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setEmbeddedFontOnlineAsync(byte[] document, String fontName, Boolean onlyUsed, String password, String fontsFolder, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setEmbeddedFontOnlineCall(document, fontName, onlyUsed, password, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setNotesSlideHeaderFooter
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Header/footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setNotesSlideHeaderFooterCall(String name, Integer slideIndex, NotesSlideHeaderFooter dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setNotesSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setNotesSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling setNotesSlideHeaderFooter(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set header/footer the notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Header/footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlideHeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlideHeaderFooter setNotesSlideHeaderFooter(String name, Integer slideIndex, NotesSlideHeaderFooter dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlideHeaderFooter> resp = setNotesSlideHeaderFooterWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlideHeaderFooter> resp = setNotesSlideHeaderFooterWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set header/footer the notes slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Header/footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlideHeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlideHeaderFooter> setNotesSlideHeaderFooterWithHttpInfo(String name, Integer slideIndex, NotesSlideHeaderFooter dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setNotesSlideHeaderFooterCall(name, slideIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlideHeaderFooter>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set header/footer the notes slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto Header/footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setNotesSlideHeaderFooterAsync(String name, Integer slideIndex, NotesSlideHeaderFooter dto, String password, String folder, String storage, final ApiCallback<NotesSlideHeaderFooter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setNotesSlideHeaderFooterCall(name, slideIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlideHeaderFooter>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setPresentationHeaderFooter
     * @param name Document name. (required)
     * @param dto HeaderFooter instance. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setPresentationHeaderFooterCall(String name, HeaderFooter dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setPresentationHeaderFooter(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling setPresentationHeaderFooter(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set footers for all slides in a presentation.
     * 
     * @param name Document name. (required)
     * @param dto HeaderFooter instance. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document setPresentationHeaderFooter(String name, HeaderFooter dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Document> resp = setPresentationHeaderFooterWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Document> resp = setPresentationHeaderFooterWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set footers for all slides in a presentation.
     * 
     * @param name Document name. (required)
     * @param dto HeaderFooter instance. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> setPresentationHeaderFooterWithHttpInfo(String name, HeaderFooter dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setPresentationHeaderFooterCall(name, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set footers for all slides in a presentation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param dto HeaderFooter instance. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setPresentationHeaderFooterAsync(String name, HeaderFooter dto, String password, String folder, String storage, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setPresentationHeaderFooterCall(name, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setProtection
     * @param name Document name. (required)
     * @param dto Protection properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setProtectionCall(String name, ProtectionProperties dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setProtection(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling setProtection(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/protection"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Updates presentation protection properties.
     * 
     * @param name Document name. (required)
     * @param dto Protection properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ProtectionProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProtectionProperties setProtection(String name, ProtectionProperties dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ProtectionProperties> resp = setProtectionWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ProtectionProperties> resp = setProtectionWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Updates presentation protection properties.
     * 
     * @param name Document name. (required)
     * @param dto Protection properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ProtectionProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProtectionProperties> setProtectionWithHttpInfo(String name, ProtectionProperties dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setProtectionCall(name, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Updates presentation protection properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param dto Protection properties. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setProtectionAsync(String name, ProtectionProperties dto, String password, String folder, String storage, final ApiCallback<ProtectionProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setProtectionCall(name, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ProtectionProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setProtectionOnline
     * @param document Document data. (required)
     * @param dto Protection properties. (required)
     * @param password Document password. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setProtectionOnlineCall(byte[] document, ProtectionProperties dto, String password, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling setProtectionOnline(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling setProtectionOnline(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/protection"
            ;

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Sets presentation protection options. 
     * 
     * @param document Document data. (required)
     * @param dto Protection properties. (required)
     * @param password Document password. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File setProtectionOnline(byte[] document, ProtectionProperties dto, String password) throws ApiException {
        try {
            ApiResponse<File> resp = setProtectionOnlineWithHttpInfo(document, dto, password);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = setProtectionOnlineWithHttpInfo(document, dto, password);
            return resp.getData();
        }
    }

    /**
     * Sets presentation protection options. 
     * 
     * @param document Document data. (required)
     * @param dto Protection properties. (required)
     * @param password Document password. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> setProtectionOnlineWithHttpInfo(byte[] document, ProtectionProperties dto, String password) throws ApiException {
        com.squareup.okhttp.Call call = setProtectionOnlineCall(document, dto, password, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Sets presentation protection options.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param dto Protection properties. (required)
     * @param password Document password. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setProtectionOnlineAsync(byte[] document, ProtectionProperties dto, String password, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setProtectionOnlineCall(document, dto, password, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setSections
     * @param name Document name. (required)
     * @param sections Sections DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSectionsCall(String name, Sections sections, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setSections(Async)");
        }
        // verify the required parameter 'sections' is set
        if (sections == null) {
            throw new ApiException("Missing the required parameter 'sections' when calling setSections(Async)");
        }
        Object postBody = sections;

        // create path and map variables
        String methodPath = "/slides/{name}/sections"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     * 
     * @param name Document name. (required)
     * @param sections Sections DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections setSections(String name, Sections sections, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = setSectionsWithHttpInfo(name, sections, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = setSectionsWithHttpInfo(name, sections, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO.
     * 
     * @param name Document name. (required)
     * @param sections Sections DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> setSectionsWithHttpInfo(String name, Sections sections, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setSectionsCall(name, sections, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Replace existing presentation sections with the ones provided in the sections DTO. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sections Sections DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSectionsAsync(String name, Sections sections, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSectionsCall(name, sections, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setShapeGeometryPath
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Geometry paths DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setShapeGeometryPathCall(String name, Integer slideIndex, Integer shapeIndex, GeometryPaths dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setShapeGeometryPath(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setShapeGeometryPath(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling setShapeGeometryPath(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling setShapeGeometryPath(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/geometryPath"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Sets geometry path to the shape
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Geometry paths DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase setShapeGeometryPath(String name, Integer slideIndex, Integer shapeIndex, GeometryPaths dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = setShapeGeometryPathWithHttpInfo(name, slideIndex, shapeIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = setShapeGeometryPathWithHttpInfo(name, slideIndex, shapeIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Sets geometry path to the shape
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Geometry paths DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> setShapeGeometryPathWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, GeometryPaths dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setShapeGeometryPathCall(name, slideIndex, shapeIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Sets geometry path to the shape (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Geometry paths DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setShapeGeometryPathAsync(String name, Integer slideIndex, Integer shapeIndex, GeometryPaths dto, String password, String folder, String storage, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setShapeGeometryPathCall(name, slideIndex, shapeIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setSlideHeaderFooter
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param dto Footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSlideHeaderFooterCall(String name, Integer slideIndex, HeaderFooter dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setSlideHeaderFooter(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling setSlideHeaderFooter(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/headerFooter"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set footer the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param dto Footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return HeaderFooter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public HeaderFooter setSlideHeaderFooter(String name, Integer slideIndex, HeaderFooter dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<HeaderFooter> resp = setSlideHeaderFooterWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<HeaderFooter> resp = setSlideHeaderFooterWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set footer the slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param dto Footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;HeaderFooter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<HeaderFooter> setSlideHeaderFooterWithHttpInfo(String name, Integer slideIndex, HeaderFooter dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setSlideHeaderFooterCall(name, slideIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<HeaderFooter>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set footer the slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex The position of the slide to be reordered. (required)
     * @param dto Footer to set. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSlideHeaderFooterAsync(String name, Integer slideIndex, HeaderFooter dto, String password, String folder, String storage, final ApiCallback<HeaderFooter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSlideHeaderFooterCall(name, slideIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<HeaderFooter>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setSlideProperties
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSlidePropertiesCall(String name, SlideProperties dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setSlideProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling setSlideProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slideProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update presentation slide properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideProperties setSlideProperties(String name, SlideProperties dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideProperties> resp = setSlidePropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideProperties> resp = setSlidePropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update presentation slide properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideProperties> setSlidePropertiesWithHttpInfo(String name, SlideProperties dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setSlidePropertiesCall(name, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update presentation slide properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSlidePropertiesAsync(String name, SlideProperties dto, String password, String folder, String storage, final ApiCallback<SlideProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSlidePropertiesCall(name, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setSlideShowProperties
     * @param name Document name. (required)
     * @param dto The slide show properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSlideShowPropertiesCall(String name, SlideShowProperties dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setSlideShowProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling setSlideShowProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slideShowProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update presentation slide show properties.
     * 
     * @param name Document name. (required)
     * @param dto The slide show properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideShowProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideShowProperties setSlideShowProperties(String name, SlideShowProperties dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideShowProperties> resp = setSlideShowPropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideShowProperties> resp = setSlideShowPropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update presentation slide show properties.
     * 
     * @param name Document name. (required)
     * @param dto The slide show properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideShowProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideShowProperties> setSlideShowPropertiesWithHttpInfo(String name, SlideShowProperties dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setSlideShowPropertiesCall(name, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideShowProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update presentation slide show properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param dto The slide show properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSlideShowPropertiesAsync(String name, SlideShowProperties dto, String password, String folder, String storage, final ApiCallback<SlideShowProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSlideShowPropertiesCall(name, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideShowProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setSpecialSlideAnimation
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setSpecialSlideAnimationCall(String name, Integer slideIndex, SpecialSlideType slideType, SlideAnimation animation, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setSpecialSlideAnimation(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling setSpecialSlideAnimation(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling setSpecialSlideAnimation(Async)");
        }
        // verify the required parameter 'animation' is set
        if (animation == null) {
            throw new ApiException("Missing the required parameter 'animation' when calling setSpecialSlideAnimation(Async)");
        }
        Object postBody = animation;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Set special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation setSpecialSlideAnimation(String name, Integer slideIndex, SpecialSlideType slideType, SlideAnimation animation, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = setSpecialSlideAnimationWithHttpInfo(name, slideIndex, slideType, animation, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = setSpecialSlideAnimationWithHttpInfo(name, slideIndex, slideType, animation, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Set special slide (master, layout, notes) animation.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> setSpecialSlideAnimationWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, SlideAnimation animation, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setSpecialSlideAnimationCall(name, slideIndex, slideType, animation, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Set special slide (master, layout, notes) animation. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param animation Animation DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setSpecialSlideAnimationAsync(String name, Integer slideIndex, SpecialSlideType slideType, SlideAnimation animation, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setSpecialSlideAnimationCall(name, slideIndex, slideType, animation, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for setViewProperties
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setViewPropertiesCall(String name, ViewProperties dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setViewProperties(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling setViewProperties(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/viewProperties"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update presentation view properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ViewProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewProperties setViewProperties(String name, ViewProperties dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<ViewProperties> resp = setViewPropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ViewProperties> resp = setViewPropertiesWithHttpInfo(name, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update presentation view properties.
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;ViewProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ViewProperties> setViewPropertiesWithHttpInfo(String name, ViewProperties dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = setViewPropertiesCall(name, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<ViewProperties>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update presentation view properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param dto The view properties data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setViewPropertiesAsync(String name, ViewProperties dto, String password, String folder, String storage, final ApiCallback<ViewProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setViewPropertiesCall(name, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ViewProperties>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for split
     * @param name Document name. (required)
     * @param options Export options. 
     * @param format Export format. Default value is jpeg. 
     * @param width The width of created images. 
     * @param height The height of created images. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitCall(String name, ExportOptions options, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String destFolder, String password, String folder, String storage, String fontsFolder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling split(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/{name}/split"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "format", format);
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "from", from);
        apiClient.addQueryParameter(queryParams, "to", to);
        apiClient.addQueryParameter(queryParams, "destFolder", destFolder);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Splitting presentations. Create one image per slide.
     * 
     * @param name Document name. (required)
     * @param options Export options. 
     * @param format Export format. Default value is jpeg. 
     * @param width The width of created images. 
     * @param height The height of created images. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return SplitDocumentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitDocumentResult split(String name, ExportOptions options, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String destFolder, String password, String folder, String storage, String fontsFolder) throws ApiException {
        try {
            ApiResponse<SplitDocumentResult> resp = splitWithHttpInfo(name, options, format, width, height, from, to, destFolder, password, folder, storage, fontsFolder);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SplitDocumentResult> resp = splitWithHttpInfo(name, options, format, width, height, from, to, destFolder, password, folder, storage, fontsFolder);
            return resp.getData();
        }
    }

    /**
     * Splitting presentations. Create one image per slide.
     * 
     * @param name Document name. (required)
     * @param options Export options. 
     * @param format Export format. Default value is jpeg. 
     * @param width The width of created images. 
     * @param height The height of created images. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @return ApiResponse&lt;SplitDocumentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitDocumentResult> splitWithHttpInfo(String name, ExportOptions options, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String destFolder, String password, String folder, String storage, String fontsFolder) throws ApiException {
        com.squareup.okhttp.Call call = splitCall(name, options, format, width, height, from, to, destFolder, password, folder, storage, fontsFolder, null, null);
        Type returnType = new TypeToken<SplitDocumentResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Splitting presentations. Create one image per slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param options Export options. 
     * @param format Export format. Default value is jpeg. 
     * @param width The width of created images. 
     * @param height The height of created images. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to same folder as presentation. 
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitAsync(String name, ExportOptions options, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String destFolder, String password, String folder, String storage, String fontsFolder, final ApiCallback<SplitDocumentResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitCall(name, options, format, width, height, from, to, destFolder, password, folder, storage, fontsFolder, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SplitDocumentResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for splitAndSaveOnline
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. 
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param options Export options. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitAndSaveOnlineCall(byte[] document, SlideExportFormat format, String destFolder, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, ExportOptions options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling splitAndSaveOnline(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling splitAndSaveOnline(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/split/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "destFolder", destFolder);
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "from", from);
        apiClient.addQueryParameter(queryParams, "to", to);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. 
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param options Export options. 
     * @return SplitDocumentResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SplitDocumentResult splitAndSaveOnline(byte[] document, SlideExportFormat format, String destFolder, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, ExportOptions options) throws ApiException {
        try {
            ApiResponse<SplitDocumentResult> resp = splitAndSaveOnlineWithHttpInfo(document, format, destFolder, width, height, from, to, password, storage, fontsFolder, options);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SplitDocumentResult> resp = splitAndSaveOnlineWithHttpInfo(document, format, destFolder, width, height, from, to, password, storage, fontsFolder, options);
            return resp.getData();
        }
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. 
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param options Export options. 
     * @return ApiResponse&lt;SplitDocumentResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SplitDocumentResult> splitAndSaveOnlineWithHttpInfo(byte[] document, SlideExportFormat format, String destFolder, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, ExportOptions options) throws ApiException {
        com.squareup.okhttp.Call call = splitAndSaveOnlineCall(document, format, destFolder, width, height, from, to, password, storage, fontsFolder, options, null, null);
        Type returnType = new TypeToken<SplitDocumentResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param destFolder Folder on storage where images are going to be uploaded. If not specified then images are uploaded to the root folder. 
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param options Export options. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitAndSaveOnlineAsync(byte[] document, SlideExportFormat format, String destFolder, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, ExportOptions options, final ApiCallback<SplitDocumentResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitAndSaveOnlineCall(document, format, destFolder, width, height, from, to, password, storage, fontsFolder, options, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SplitDocumentResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for splitOnline
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param options Export options. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitOnlineCall(byte[] document, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, ExportOptions options, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling splitOnline(Async)");
        }
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling splitOnline(Async)");
        }
        Object postBody = options;

        // create path and map variables
        String methodPath = "/slides/split/{format}"
            .replaceAll("\\{" + "format" + "\\}", apiClient.objectToString(format));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "width", width);
        apiClient.addQueryParameter(queryParams, "height", height);
        apiClient.addQueryParameter(queryParams, "from", from);
        apiClient.addQueryParameter(queryParams, "to", to);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "fontsFolder", fontsFolder);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (document != null)
        formParams.put("document", document);

        final String[] accepts = {
            "multipart/form-data"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param options Export options. 
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File splitOnline(byte[] document, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, ExportOptions options) throws ApiException {
        try {
            ApiResponse<File> resp = splitOnlineWithHttpInfo(document, format, width, height, from, to, password, storage, fontsFolder, options);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<File> resp = splitOnlineWithHttpInfo(document, format, width, height, from, to, password, storage, fontsFolder, options);
            return resp.getData();
        }
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed. 
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param options Export options. 
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> splitOnlineWithHttpInfo(byte[] document, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, ExportOptions options) throws ApiException {
        com.squareup.okhttp.Call call = splitOnlineCall(document, format, width, height, from, to, password, storage, fontsFolder, options, null, null);
        Type returnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Splits PowerPoint presentation slides from the specified range into separate files and exports them in the specified file format. If the range is not provided all slides will be processed.  (asynchronously)
     * 
     * @param document Document data. (required)
     * @param format ExportFormat (required)
     * @param width Slide width. 
     * @param height Slide height. 
     * @param from The start slide number for splitting, if is not specified splitting starts from the first slide of the presentation. 
     * @param to The last slide number for splitting, if is not specified splitting ends at the last slide of the document. 
     * @param password Document password. 
     * @param storage Document storage. 
     * @param fontsFolder Custom fonts folder. 
     * @param options Export options. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitOnlineAsync(byte[] document, SlideExportFormat format, Integer width, Integer height, Integer from, Integer to, String password, String storage, String fontsFolder, ExportOptions options, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitOnlineCall(document, format, width, height, from, to, password, storage, fontsFolder, options, progressListener, progressRequestListener);
        Type returnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for splitTableCell
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param splitType Table cell split type (SplitByWidth, SplitByHeight,SplitByColSpan or SplitByRowSpan). (required)
     * @param value Split value. In case of splitting by column or row span, the value must be an integer number. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call splitTableCellCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, TableCellSplitType splitType, Double value, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling splitTableCell(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling splitTableCell(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling splitTableCell(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling splitTableCell(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling splitTableCell(Async)");
        }
        // verify the required parameter 'splitType' is set
        if (splitType == null) {
            throw new ApiException("Missing the required parameter 'splitType' when calling splitTableCell(Async)");
        }
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling splitTableCell(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/{splitType}/{value}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex)).replaceAll("\\{" + "splitType" + "\\}", apiClient.objectToString(splitType)).replaceAll("\\{" + "value" + "\\}", apiClient.objectToString(value));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "POST", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Split table cell.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param splitType Table cell split type (SplitByWidth, SplitByHeight,SplitByColSpan or SplitByRowSpan). (required)
     * @param value Split value. In case of splitting by column or row span, the value must be an integer number. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Table
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Table splitTableCell(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, TableCellSplitType splitType, Double value, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Table> resp = splitTableCellWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, splitType, value, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Table> resp = splitTableCellWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, splitType, value, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Split table cell.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param splitType Table cell split type (SplitByWidth, SplitByHeight,SplitByColSpan or SplitByRowSpan). (required)
     * @param value Split value. In case of splitting by column or row span, the value must be an integer number. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Table&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Table> splitTableCellWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, TableCellSplitType splitType, Double value, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = splitTableCellCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, splitType, value, password, folder, storage, null, null);
        Type returnType = new TypeToken<Table>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Split table cell. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param splitType Table cell split type (SplitByWidth, SplitByHeight,SplitByColSpan or SplitByRowSpan). (required)
     * @param value Split value. In case of splitting by column or row span, the value must be an integer number. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call splitTableCellAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, TableCellSplitType splitType, Double value, String password, String folder, String storage, final ApiCallback<Table> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = splitTableCellCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, splitType, value, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Table>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for storageExists
     * @param storageName Storage name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageExistsCall(String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'storageName' is set
        if (storageName == null) {
            throw new ApiException("Missing the required parameter 'storageName' when calling storageExists(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/{storageName}/exist"
            .replaceAll("\\{" + "storageName" + "\\}", apiClient.objectToString(storageName));

        List<Pair> queryParams = new ArrayList<Pair>();

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "GET", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Check if storage exists
     * 
     * @param storageName Storage name (required)
     * @return StorageExist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StorageExist storageExists(String storageName) throws ApiException {
        try {
            ApiResponse<StorageExist> resp = storageExistsWithHttpInfo(storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<StorageExist> resp = storageExistsWithHttpInfo(storageName);
            return resp.getData();
        }
    }

    /**
     * Check if storage exists
     * 
     * @param storageName Storage name (required)
     * @return ApiResponse&lt;StorageExist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StorageExist> storageExistsWithHttpInfo(String storageName) throws ApiException {
        com.squareup.okhttp.Call call = storageExistsCall(storageName, null, null);
        Type returnType = new TypeToken<StorageExist>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Check if storage exists (asynchronously)
     * 
     * @param storageName Storage name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageExistsAsync(String storageName, final ApiCallback<StorageExist> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageExistsCall(storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<StorageExist>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateAnimationEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAnimationEffectCall(String name, Integer slideIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateAnimationEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateAnimationEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling updateAnimationEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling updateAnimationEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/mainSequence/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Modify an animation effect for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation updateAnimationEffect(String name, Integer slideIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = updateAnimationEffectWithHttpInfo(name, slideIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = updateAnimationEffectWithHttpInfo(name, slideIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Modify an animation effect for a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> updateAnimationEffectWithHttpInfo(String name, Integer slideIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateAnimationEffectCall(name, slideIndex, effectIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Modify an animation effect for a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAnimationEffectAsync(String name, Integer slideIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAnimationEffectCall(name, slideIndex, effectIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateAnimationInteractiveSequenceEffect
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateAnimationInteractiveSequenceEffectCall(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling updateAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling updateAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling updateAnimationInteractiveSequenceEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Modify an animation effect for a slide interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation updateAnimationInteractiveSequenceEffect(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = updateAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = updateAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, sequenceIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Modify an animation effect for a slide interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> updateAnimationInteractiveSequenceEffectWithHttpInfo(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effectIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Modify an animation effect for a slide interactive sequence. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateAnimationInteractiveSequenceEffectAsync(String name, Integer slideIndex, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateAnimationInteractiveSequenceEffectCall(name, slideIndex, sequenceIndex, effectIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateChartCategory
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateChartCategoryCall(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, ChartCategory category, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateChartCategory(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateChartCategory(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateChartCategory(Async)");
        }
        // verify the required parameter 'categoryIndex' is set
        if (categoryIndex == null) {
            throw new ApiException("Missing the required parameter 'categoryIndex' when calling updateChartCategory(Async)");
        }
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling updateChartCategory(Async)");
        }
        Object postBody = category;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/categories/{categoryIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "categoryIndex" + "\\}", apiClient.objectToString(categoryIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a chart category.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart updateChartCategory(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, ChartCategory category, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = updateChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, categoryIndex, category, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = updateChartCategoryWithHttpInfo(name, slideIndex, shapeIndex, categoryIndex, category, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a chart category.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> updateChartCategoryWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, ChartCategory category, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateChartCategoryCall(name, slideIndex, shapeIndex, categoryIndex, category, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a chart category. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param categoryIndex Category index. (required)
     * @param category Category DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChartCategoryAsync(String name, Integer slideIndex, Integer shapeIndex, Integer categoryIndex, ChartCategory category, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChartCategoryCall(name, slideIndex, shapeIndex, categoryIndex, category, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateChartDataPoint
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateChartDataPointCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, DataPoint dataPoint, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateChartDataPoint(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateChartDataPoint(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateChartDataPoint(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling updateChartDataPoint(Async)");
        }
        // verify the required parameter 'pointIndex' is set
        if (pointIndex == null) {
            throw new ApiException("Missing the required parameter 'pointIndex' when calling updateChartDataPoint(Async)");
        }
        // verify the required parameter 'dataPoint' is set
        if (dataPoint == null) {
            throw new ApiException("Missing the required parameter 'dataPoint' when calling updateChartDataPoint(Async)");
        }
        Object postBody = dataPoint;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}/dataPoints/{pointIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex)).replaceAll("\\{" + "pointIndex" + "\\}", apiClient.objectToString(pointIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a data point in a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart updateChartDataPoint(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, DataPoint dataPoint, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = updateChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, pointIndex, dataPoint, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = updateChartDataPointWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, pointIndex, dataPoint, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a data point in a chart series.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> updateChartDataPointWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, DataPoint dataPoint, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, pointIndex, dataPoint, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a data point in a chart series. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param seriesIndex Series index. (required)
     * @param pointIndex Data point index. (required)
     * @param dataPoint Data point DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChartDataPointAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Integer pointIndex, DataPoint dataPoint, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChartDataPointCall(name, slideIndex, shapeIndex, seriesIndex, pointIndex, dataPoint, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateChartSeries
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateChartSeriesCall(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Series series, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateChartSeries(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateChartSeries(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateChartSeries(Async)");
        }
        // verify the required parameter 'seriesIndex' is set
        if (seriesIndex == null) {
            throw new ApiException("Missing the required parameter 'seriesIndex' when calling updateChartSeries(Async)");
        }
        // verify the required parameter 'series' is set
        if (series == null) {
            throw new ApiException("Missing the required parameter 'series' when calling updateChartSeries(Async)");
        }
        Object postBody = series;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/series/{seriesIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "seriesIndex" + "\\}", apiClient.objectToString(seriesIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a series in a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Chart
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Chart updateChartSeries(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Series series, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Chart> resp = updateChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, series, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Chart> resp = updateChartSeriesWithHttpInfo(name, slideIndex, shapeIndex, seriesIndex, series, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a series in a chart.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Chart&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Chart> updateChartSeriesWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Series series, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateChartSeriesCall(name, slideIndex, shapeIndex, seriesIndex, series, password, folder, storage, null, null);
        Type returnType = new TypeToken<Chart>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a series in a chart. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index (must be a chart). (required)
     * @param seriesIndex Series index. (required)
     * @param series Series DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateChartSeriesAsync(String name, Integer slideIndex, Integer shapeIndex, Integer seriesIndex, Series series, String password, String folder, String storage, final ApiCallback<Chart> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateChartSeriesCall(name, slideIndex, shapeIndex, seriesIndex, series, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Chart>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateLayoutSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLayoutSlideCall(String name, Integer slideIndex, LayoutSlide slideDto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateLayoutSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateLayoutSlide(Async)");
        }
        // verify the required parameter 'slideDto' is set
        if (slideDto == null) {
            throw new ApiException("Missing the required parameter 'slideDto' when calling updateLayoutSlide(Async)");
        }
        Object postBody = slideDto;

        // create path and map variables
        String methodPath = "/slides/{name}/layoutSlides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a layoutSlide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return LayoutSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LayoutSlide updateLayoutSlide(String name, Integer slideIndex, LayoutSlide slideDto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<LayoutSlide> resp = updateLayoutSlideWithHttpInfo(name, slideIndex, slideDto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<LayoutSlide> resp = updateLayoutSlideWithHttpInfo(name, slideIndex, slideDto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a layoutSlide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;LayoutSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LayoutSlide> updateLayoutSlideWithHttpInfo(String name, Integer slideIndex, LayoutSlide slideDto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateLayoutSlideCall(name, slideIndex, slideDto, password, folder, storage, null, null);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a layoutSlide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLayoutSlideAsync(String name, Integer slideIndex, LayoutSlide slideDto, String password, String folder, String storage, final ApiCallback<LayoutSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLayoutSlideCall(name, slideIndex, slideDto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<LayoutSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateNotesSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlideCall(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateNotesSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateNotesSlide(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateNotesSlide(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/notesSlide"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update notes slide properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return NotesSlide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NotesSlide updateNotesSlide(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<NotesSlide> resp = updateNotesSlideWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<NotesSlide> resp = updateNotesSlideWithHttpInfo(name, slideIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update notes slide properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;NotesSlide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NotesSlide> updateNotesSlideWithHttpInfo(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateNotesSlideCall(name, slideIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update notes slide properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param dto A NotesSlide object with notes slide data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNotesSlideAsync(String name, Integer slideIndex, NotesSlide dto, String password, String folder, String storage, final ApiCallback<NotesSlide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNotesSlideCall(name, slideIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<NotesSlide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling updateParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update paragraph properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph updateParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = updateParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = updateParagraphWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Update paragraph properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> updateParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = updateParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update paragraph properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, String subShape, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateParagraphCall(name, slideIndex, shapeIndex, paragraphIndex, dto, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updatePortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updatePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updatePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updatePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling updatePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling updatePortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updatePortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update portion properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion updatePortion(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portion> resp = updatePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = updatePortionWithHttpInfo(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Update portion properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> updatePortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = updatePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update portion properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, String subShape, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortionCall(name, slideIndex, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateSection
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be updated. (required)
     * @param sectionName Section name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSectionCall(String name, Integer sectionIndex, String sectionName, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateSection(Async)");
        }
        // verify the required parameter 'sectionIndex' is set
        if (sectionIndex == null) {
            throw new ApiException("Missing the required parameter 'sectionIndex' when calling updateSection(Async)");
        }
        // verify the required parameter 'sectionName' is set
        if (sectionName == null) {
            throw new ApiException("Missing the required parameter 'sectionName' when calling updateSection(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/{name}/sections/{sectionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "sectionIndex" + "\\}", apiClient.objectToString(sectionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "sectionName", sectionName);
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update section name.
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be updated. (required)
     * @param sectionName Section name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Sections
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sections updateSection(String name, Integer sectionIndex, String sectionName, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Sections> resp = updateSectionWithHttpInfo(name, sectionIndex, sectionName, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Sections> resp = updateSectionWithHttpInfo(name, sectionIndex, sectionName, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update section name.
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be updated. (required)
     * @param sectionName Section name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Sections&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sections> updateSectionWithHttpInfo(String name, Integer sectionIndex, String sectionName, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateSectionCall(name, sectionIndex, sectionName, password, folder, storage, null, null);
        Type returnType = new TypeToken<Sections>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update section name. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param sectionIndex The position of the section to be updated. (required)
     * @param sectionName Section name. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSectionAsync(String name, Integer sectionIndex, String sectionName, String password, String folder, String storage, final ApiCallback<Sections> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSectionCall(name, sectionIndex, sectionName, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Sections>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateShape
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateShapeCall(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateShape(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateShape(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update shape properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase updateShape(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = updateShapeWithHttpInfo(name, slideIndex, shapeIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = updateShapeWithHttpInfo(name, slideIndex, shapeIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Update shape properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> updateShapeWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = updateShapeCall(name, slideIndex, shapeIndex, dto, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update shape properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateShapeAsync(String name, Integer slideIndex, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, String subShape, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateShapeCall(name, slideIndex, shapeIndex, dto, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateSlide
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSlideCall(String name, Integer slideIndex, Slide slideDto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateSlide(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateSlide(Async)");
        }
        // verify the required parameter 'slideDto' is set
        if (slideDto == null) {
            throw new ApiException("Missing the required parameter 'slideDto' when calling updateSlide(Async)");
        }
        Object postBody = slideDto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Slide
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Slide updateSlide(String name, Integer slideIndex, Slide slideDto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Slide> resp = updateSlideWithHttpInfo(name, slideIndex, slideDto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Slide> resp = updateSlideWithHttpInfo(name, slideIndex, slideDto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update a slide.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Slide&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Slide> updateSlideWithHttpInfo(String name, Integer slideIndex, Slide slideDto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateSlideCall(name, slideIndex, slideDto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Slide>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update a slide. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param slideDto Slide update data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSlideAsync(String name, Integer slideIndex, Slide slideDto, String password, String folder, String storage, final ApiCallback<Slide> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSlideCall(name, slideIndex, slideDto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Slide>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateSpecialSlideAnimationEffect
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlideAnimationEffectCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer effectIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling updateSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling updateSpecialSlideAnimationEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling updateSpecialSlideAnimationEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/mainSequence/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation updateSpecialSlideAnimationEffect(String name, Integer slideIndex, SpecialSlideType slideType, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = updateSpecialSlideAnimationEffectWithHttpInfo(name, slideIndex, slideType, effectIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = updateSpecialSlideAnimationEffectWithHttpInfo(name, slideIndex, slideType, effectIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Modify an animation effect for a special slide (master, layout, notes).
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> updateSpecialSlideAnimationEffectWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateSpecialSlideAnimationEffectCall(name, slideIndex, slideType, effectIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Modify an animation effect for a special slide (master, layout, notes). (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlideAnimationEffectAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer effectIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSpecialSlideAnimationEffectCall(name, slideIndex, slideType, effectIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateSpecialSlideAnimationInteractiveSequenceEffect
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlideAnimationInteractiveSequenceEffectCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling updateSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'sequenceIndex' is set
        if (sequenceIndex == null) {
            throw new ApiException("Missing the required parameter 'sequenceIndex' when calling updateSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effectIndex' is set
        if (effectIndex == null) {
            throw new ApiException("Missing the required parameter 'effectIndex' when calling updateSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        // verify the required parameter 'effect' is set
        if (effect == null) {
            throw new ApiException("Missing the required parameter 'effect' when calling updateSpecialSlideAnimationInteractiveSequenceEffect(Async)");
        }
        Object postBody = effect;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/animation/interactiveSequences/{sequenceIndex}/{effectIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "sequenceIndex" + "\\}", apiClient.objectToString(sequenceIndex)).replaceAll("\\{" + "effectIndex" + "\\}", apiClient.objectToString(effectIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return SlideAnimation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SlideAnimation updateSpecialSlideAnimationInteractiveSequenceEffect(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<SlideAnimation> resp = updateSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, slideType, sequenceIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<SlideAnimation> resp = updateSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo(name, slideIndex, slideType, sequenceIndex, effectIndex, effect, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;SlideAnimation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SlideAnimation> updateSpecialSlideAnimationInteractiveSequenceEffectWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateSpecialSlideAnimationInteractiveSequenceEffectCall(name, slideIndex, slideType, sequenceIndex, effectIndex, effect, password, folder, storage, null, null);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Modify an animation effect for a special slide (master, layout, notes) interactive sequence. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param sequenceIndex The position of the interactive sequence. (required)
     * @param effectIndex The position of the effect to be modified. (required)
     * @param effect Animation effect DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlideAnimationInteractiveSequenceEffectAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer sequenceIndex, Integer effectIndex, Effect effect, String password, String folder, String storage, final ApiCallback<SlideAnimation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSpecialSlideAnimationInteractiveSequenceEffectCall(name, slideIndex, slideType, sequenceIndex, effectIndex, effect, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<SlideAnimation>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateSpecialSlideParagraph
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlideParagraphCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling updateSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling updateSpecialSlideParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateSpecialSlideParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update paragraph properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph updateSpecialSlideParagraph(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = updateSpecialSlideParagraphWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = updateSpecialSlideParagraphWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Update paragraph properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> updateSpecialSlideParagraphWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = updateSpecialSlideParagraphCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, dto, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update paragraph properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlideParagraphAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, String subShape, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSpecialSlideParagraphCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, dto, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateSpecialSlidePortion
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlidePortionCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling updateSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling updateSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling updateSpecialSlidePortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateSpecialSlidePortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update portion properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion updateSpecialSlidePortion(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<Portion> resp = updateSpecialSlidePortionWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = updateSpecialSlidePortionWithHttpInfo(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Update portion properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> updateSpecialSlidePortionWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = updateSpecialSlidePortionCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update portion properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlidePortionAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, String subShape, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSpecialSlidePortionCall(name, slideIndex, slideType, shapeIndex, paragraphIndex, portionIndex, dto, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateSpecialSlideShape
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlideShapeCall(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, String subShape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateSpecialSlideShape(Async)");
        }
        // verify the required parameter 'slideType' is set
        if (slideType == null) {
            throw new ApiException("Missing the required parameter 'slideType' when calling updateSpecialSlideShape(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateSpecialSlideShape(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateSpecialSlideShape(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/{slideType}/shapes/{shapeIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "slideType" + "\\}", apiClient.objectToString(slideType)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);
        apiClient.addQueryParameter(queryParams, "subShape", subShape);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update shape properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ShapeBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShapeBase updateSpecialSlideShape(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, String subShape) throws ApiException {
        try {
            ApiResponse<ShapeBase> resp = updateSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<ShapeBase> resp = updateSpecialSlideShapeWithHttpInfo(name, slideIndex, slideType, shapeIndex, dto, password, folder, storage, subShape);
            return resp.getData();
        }
    }

    /**
     * Update shape properties.
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @return ApiResponse&lt;ShapeBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ShapeBase> updateSpecialSlideShapeWithHttpInfo(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, String subShape) throws ApiException {
        com.squareup.okhttp.Call call = updateSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, dto, password, folder, storage, subShape, null, null);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update shape properties. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Parent slide index. (required)
     * @param slideType Slide type (master, layout or notes). (required)
     * @param shapeIndex Shape index. (required)
     * @param dto Shape DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param subShape Sub-shape path (e.g. \"3\", \"3/shapes/2). 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateSpecialSlideShapeAsync(String name, Integer slideIndex, SpecialSlideType slideType, Integer shapeIndex, ShapeBase dto, String password, String folder, String storage, String subShape, final ApiCallback<ShapeBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateSpecialSlideShapeCall(name, slideIndex, slideType, shapeIndex, dto, password, folder, storage, subShape, progressListener, progressRequestListener);
        Type returnType = new TypeToken<ShapeBase>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateTableCell
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param dto Table cell data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTableCellCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, TableCell dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateTableCell(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateTableCell(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateTableCell(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling updateTableCell(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling updateTableCell(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateTableCell(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update the table cell.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param dto Table cell data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return TableCell
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TableCell updateTableCell(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, TableCell dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<TableCell> resp = updateTableCellWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<TableCell> resp = updateTableCellWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update the table cell.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param dto Table cell data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;TableCell&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TableCell> updateTableCellWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, TableCell dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateTableCellCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<TableCell>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update the table cell. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param dto Table cell data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTableCellAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, TableCell dto, String password, String folder, String storage, final ApiCallback<TableCell> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTableCellCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<TableCell>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateTableCellParagraph
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTableCellParagraphCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateTableCellParagraph(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateTableCellParagraph(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateTableCellParagraph(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling updateTableCellParagraph(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling updateTableCellParagraph(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling updateTableCellParagraph(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateTableCellParagraph(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Updates table cell paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Paragraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Paragraph updateTableCellParagraph(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Paragraph> resp = updateTableCellParagraphWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Paragraph> resp = updateTableCellParagraphWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Updates table cell paragraph.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Paragraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Paragraph> updateTableCellParagraphWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateTableCellParagraphCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Updates table cell paragraph. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param dto Paragraph DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTableCellParagraphAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Paragraph dto, String password, String folder, String storage, final ApiCallback<Paragraph> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTableCellParagraphCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Paragraph>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateTableCellPortion
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTableCellPortionCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateTableCellPortion(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateTableCellPortion(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateTableCellPortion(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling updateTableCellPortion(Async)");
        }
        // verify the required parameter 'cellIndex' is set
        if (cellIndex == null) {
            throw new ApiException("Missing the required parameter 'cellIndex' when calling updateTableCellPortion(Async)");
        }
        // verify the required parameter 'paragraphIndex' is set
        if (paragraphIndex == null) {
            throw new ApiException("Missing the required parameter 'paragraphIndex' when calling updateTableCellPortion(Async)");
        }
        // verify the required parameter 'portionIndex' is set
        if (portionIndex == null) {
            throw new ApiException("Missing the required parameter 'portionIndex' when calling updateTableCellPortion(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateTableCellPortion(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}/cells/{cellIndex}/paragraphs/{paragraphIndex}/portions/{portionIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex)).replaceAll("\\{" + "cellIndex" + "\\}", apiClient.objectToString(cellIndex)).replaceAll("\\{" + "paragraphIndex" + "\\}", apiClient.objectToString(paragraphIndex)).replaceAll("\\{" + "portionIndex" + "\\}", apiClient.objectToString(portionIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Updates table cell portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return Portion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portion updateTableCellPortion(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<Portion> resp = updateTableCellPortionWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<Portion> resp = updateTableCellPortionWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Updates table cell portion.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;Portion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portion> updateTableCellPortionWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateTableCellPortionCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<Portion>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Updates table cell portion. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param cellIndex Table cell index. (required)
     * @param paragraphIndex Paragraph index. (required)
     * @param portionIndex Portion index. (required)
     * @param dto Portion DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTableCellPortionAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, Integer cellIndex, Integer paragraphIndex, Integer portionIndex, Portion dto, String password, String folder, String storage, final ApiCallback<Portion> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTableCellPortionCall(name, slideIndex, shapeIndex, rowIndex, cellIndex, paragraphIndex, portionIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<Portion>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateTableRow
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param dto Table cell data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTableRowCall(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, TableRow dto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateTableRow(Async)");
        }
        // verify the required parameter 'slideIndex' is set
        if (slideIndex == null) {
            throw new ApiException("Missing the required parameter 'slideIndex' when calling updateTableRow(Async)");
        }
        // verify the required parameter 'shapeIndex' is set
        if (shapeIndex == null) {
            throw new ApiException("Missing the required parameter 'shapeIndex' when calling updateTableRow(Async)");
        }
        // verify the required parameter 'rowIndex' is set
        if (rowIndex == null) {
            throw new ApiException("Missing the required parameter 'rowIndex' when calling updateTableRow(Async)");
        }
        // verify the required parameter 'dto' is set
        if (dto == null) {
            throw new ApiException("Missing the required parameter 'dto' when calling updateTableRow(Async)");
        }
        Object postBody = dto;

        // create path and map variables
        String methodPath = "/slides/{name}/slides/{slideIndex}/shapes/{shapeIndex}/rows/{rowIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "slideIndex" + "\\}", apiClient.objectToString(slideIndex)).replaceAll("\\{" + "shapeIndex" + "\\}", apiClient.objectToString(shapeIndex)).replaceAll("\\{" + "rowIndex" + "\\}", apiClient.objectToString(rowIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update the table row.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param dto Table cell data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return TableRow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TableRow updateTableRow(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, TableRow dto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<TableRow> resp = updateTableRowWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, dto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<TableRow> resp = updateTableRowWithHttpInfo(name, slideIndex, shapeIndex, rowIndex, dto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update the table row.
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param dto Table cell data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;TableRow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TableRow> updateTableRowWithHttpInfo(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, TableRow dto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateTableRowCall(name, slideIndex, shapeIndex, rowIndex, dto, password, folder, storage, null, null);
        Type returnType = new TypeToken<TableRow>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update the table row. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param slideIndex Slide index. (required)
     * @param shapeIndex Shape index. (required)
     * @param rowIndex Row index. (required)
     * @param dto Table cell data. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTableRowAsync(String name, Integer slideIndex, Integer shapeIndex, Integer rowIndex, TableRow dto, String password, String folder, String storage, final ApiCallback<TableRow> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTableRowCall(name, slideIndex, shapeIndex, rowIndex, dto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<TableRow>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for updateVbaModule
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param moduleDto VBA module DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateVbaModuleCall(String name, Integer moduleIndex, VbaModule moduleDto, String password, String folder, String storage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling updateVbaModule(Async)");
        }
        // verify the required parameter 'moduleIndex' is set
        if (moduleIndex == null) {
            throw new ApiException("Missing the required parameter 'moduleIndex' when calling updateVbaModule(Async)");
        }
        // verify the required parameter 'moduleDto' is set
        if (moduleDto == null) {
            throw new ApiException("Missing the required parameter 'moduleDto' when calling updateVbaModule(Async)");
        }
        Object postBody = moduleDto;

        // create path and map variables
        String methodPath = "/slides/{name}/vbaProject/modules/{moduleIndex}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.objectToString(name)).replaceAll("\\{" + "moduleIndex" + "\\}", apiClient.objectToString(moduleIndex));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "folder", folder);
        apiClient.addQueryParameter(queryParams, "storage", storage);

        Map<String, String> headerParams = new HashMap<String, String>();
        if (password != null)
        headerParams.put("password", apiClient.parameterToString(password));

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "application/json"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Update VBA module.
     * 
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param moduleDto VBA module DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return VbaModule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VbaModule updateVbaModule(String name, Integer moduleIndex, VbaModule moduleDto, String password, String folder, String storage) throws ApiException {
        try {
            ApiResponse<VbaModule> resp = updateVbaModuleWithHttpInfo(name, moduleIndex, moduleDto, password, folder, storage);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<VbaModule> resp = updateVbaModuleWithHttpInfo(name, moduleIndex, moduleDto, password, folder, storage);
            return resp.getData();
        }
    }

    /**
     * Update VBA module.
     * 
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param moduleDto VBA module DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @return ApiResponse&lt;VbaModule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VbaModule> updateVbaModuleWithHttpInfo(String name, Integer moduleIndex, VbaModule moduleDto, String password, String folder, String storage) throws ApiException {
        com.squareup.okhttp.Call call = updateVbaModuleCall(name, moduleIndex, moduleDto, password, folder, storage, null, null);
        Type returnType = new TypeToken<VbaModule>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Update VBA module. (asynchronously)
     * 
     * @param name Document name. (required)
     * @param moduleIndex The index of the macros module to remove. (required)
     * @param moduleDto VBA module DTO. (required)
     * @param password Document password. 
     * @param folder Document folder. 
     * @param storage Document storage. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateVbaModuleAsync(String name, Integer moduleIndex, VbaModule moduleDto, String password, String folder, String storage, final ApiCallback<VbaModule> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateVbaModuleCall(name, moduleIndex, moduleDto, password, folder, storage, progressListener, progressRequestListener);
        Type returnType = new TypeToken<VbaModule>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }
    /**
     * Build call for uploadFile
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     * @param file File to upload (required)
     * @param storageName Storage name 
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileCall(String path, byte[] file, String storageName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadFile(Async)");
        }
        Object postBody = null;

        // create path and map variables
        String methodPath = "/slides/storage/file/{path}"
            .replaceAll("\\{" + "path" + "\\}", apiClient.objectToString(path));

        List<Pair> queryParams = new ArrayList<Pair>();
        apiClient.addQueryParameter(queryParams, "storageName", storageName);

        Map<String, String> headerParams = new HashMap<String, String>();

        Map<String, Object> formParams = new LinkedHashMap<String, Object>();
        if (file != null)
        formParams.put("file", file);

        final String[] accepts = {
            "application/json"
        };
        final String accept = apiClient.selectHeaderAccept(accepts);
        if (accept != null) headerParams.put("Accept", accept);

        final String[] contentTypes = {
            "multipart/form-data"
        };
        final String contentType = apiClient.selectHeaderContentType(contentTypes);
        headerParams.put("Content-Type", contentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }
        return apiClient.buildCall(methodPath, "PUT", queryParams, postBody, headerParams, formParams, progressRequestListener);
    }

    /**
     * Upload file
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     * @param file File to upload (required)
     * @param storageName Storage name 
     * @return FilesUploadResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilesUploadResult uploadFile(String path, byte[] file, String storageName) throws ApiException {
        try {
            ApiResponse<FilesUploadResult> resp = uploadFileWithHttpInfo(path, file, storageName);
            return resp.getData();
        } catch (NeedRepeatRequestException e) {
            ApiResponse<FilesUploadResult> resp = uploadFileWithHttpInfo(path, file, storageName);
            return resp.getData();
        }
    }

    /**
     * Upload file
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     * @param file File to upload (required)
     * @param storageName Storage name 
     * @return ApiResponse&lt;FilesUploadResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilesUploadResult> uploadFileWithHttpInfo(String path, byte[] file, String storageName) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileCall(path, file, storageName, null, null);
        Type returnType = new TypeToken<FilesUploadResult>(){}.getType();
        return apiClient.execute(call, returnType);
    }

    /**
     * Upload file (asynchronously)
     * 
     * @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.              
     * @param file File to upload (required)
     * @param storageName Storage name 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileAsync(String path, byte[] file, String storageName, final ApiCallback<FilesUploadResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileCall(path, file, storageName, progressListener, progressRequestListener);
        Type returnType = new TypeToken<FilesUploadResult>(){}.getType();
        apiClient.executeAsync(call, returnType, callback);
        return call;
    }

    private final ApiClient apiClient;
}
